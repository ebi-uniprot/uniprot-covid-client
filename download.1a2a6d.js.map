{"version":3,"sources":["webpack:///./src/uniprotkb/components/column-select/ColumnSelectDragDrop.tsx","webpack:///./src/uniprotkb/components/column-select/ColumnSelectView.tsx","webpack:///./src/uniprotkb/components/column-select/ColumnSelectContainer.tsx","webpack:///./src/uniprotkb/components/download/DownloadView.tsx","webpack:///./src/shared/utils/url.ts","webpack:///./src/uniprotkb/components/download/DownloadContainer.tsx"],"names":["ColumnSelectDragDrop","columns","onDragDrop","onRemove","onDragEnd","result","destination","source","index","droppableId","direction","droppableProvided","ref","innerRef","className","bem","b","e","droppableProps","map","itemId","label","key","draggableId","draggableProvided","snapshot","draggableProps","dragHandleProps","m","isDragging","style","type","data-testid","onClick","placeholder","getTabTitle","tabId","length","size","value","ColumnSelectView","selectedColumns","fieldData","onSelect","onReset","fieldDataForSelectedColumns","selected","Array","ColumnSelectTab","data","links","forEach","accordionId","id","items","indexOf","getFieldDataForColumns","tabData","selectedColumnsInTab","filter","item","title","content","accordionData","Object","values","_accordionId","tabIndex","entryField","Column","accession","ColumnSelectContainer","withRouter","connect","state","ownProps","onChange","results","fields","isFetching","dispatch","bindActionCreators","fetchFieldsIfNeeded","resultsActions","selectedColumnsWithoutEntry","col","FieldFromFieldsDataWithoutEntry","group","removeFieldFromFieldsData","handleChange","defaultTableColumns","removeItemFromList","srcIndex","destIndex","moveItemInList","DownloadView","previewNode","onSubmit","onCancel","onPreview","downloadAll","fileFormat","compressed","preview","loadingPreview","onSelectedColumnsChange","onDownloadAllChange","onFileFormatChange","onCompressedChange","nSelectedEntries","nPreview","totalNumberResults","htmlFor","name","checked","disabled","FileFormat","format","rdfXml","fileFormatsWithColumns","includes","urlsAreEqual","url1","url2","ignoreParams","urlObject1","queryString","parseUrl","urlObject2","url","paramsIntersection","uniq","keys","query","every","param","getPreviewFileFormat","excel","tsv","DownloadContainer","tableColumns","history","location","selectedFacets","sortColumn","sortDirection","selectedEntries","useState","setSelectedColumns","setDownloadAll","fastaCanonical","setFileFormat","setCompressed","setLoadingPreview","contentType","setPreview","Math","min","previewFileFormat","previewUrl","getDownloadUrl","selectedAccessions","showPreview","fileFormatToContentType","get","preventDefault","link","document","createElement","href","target","setAttribute","body","appendChild","click","removeChild","goBack","fetchData","Accept","then","response","idx","o","headers","json","JSON","stringify","config","catch","console","error","finally"],"mappings":"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","file":"download.1a2a6d.js","sourcesContent":["import React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { CloseIcon } from 'franklin-sites';\nimport { getBEMClassName as bem } from '../../../shared/utils/utils';\nimport { SelectedColumn } from '../../types/resultsTypes';\nimport { Column } from '../../types/columnTypes';\nimport './styles/column-select-drag-drop.scss';\n\ntype ColumnSelectDragDropProps = {\n  columns: SelectedColumn[];\n  onDragDrop: (srcIndex: number, destIndex: number) => void;\n  onRemove: (columnId: Column) => void;\n};\n\nconst ColumnSelectDragDrop: React.FC<ColumnSelectDragDropProps> = ({\n  columns,\n  onDragDrop,\n  onRemove,\n}) => (\n  <DragDropContext\n    onDragEnd={result => {\n      if (result.destination) {\n        onDragDrop(result.source.index, result.destination.index);\n      }\n    }}\n  >\n    <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n      {droppableProvided => (\n        <div\n          ref={droppableProvided.innerRef}\n          className={bem({\n            b: 'column-select-drag-drop',\n            e: 'list',\n          })}\n          {...droppableProvided.droppableProps}\n        >\n          {columns.map(({ itemId, label }, index) => (\n            <Draggable key={itemId} draggableId={itemId} index={index}>\n              {(draggableProvided, snapshot) => (\n                <div\n                  ref={draggableProvided.innerRef}\n                  {...draggableProvided.draggableProps}\n                  {...draggableProvided.dragHandleProps}\n                  className={`button ${bem({\n                    b: 'column-select-drag-drop',\n                    e: ['list', 'item'],\n                    m: snapshot.isDragging && 'dragging',\n                  })}`}\n                  style={draggableProvided.draggableProps.style}\n                >\n                  {label}\n                  <button\n                    type=\"button\"\n                    data-testid=\"column-select-dnd-remove-button\"\n                    className={bem({\n                      b: 'column-select-drag-drop',\n                      e: ['list', 'item', 'button'],\n                    })}\n                    onClick={() => onRemove(itemId)}\n                  >\n                    <CloseIcon\n                      className={bem({\n                        b: 'column-select-drag-drop',\n                        e: ['list', 'item', 'button', 'icon'],\n                      })}\n                    />\n                  </button>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {droppableProvided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  </DragDropContext>\n);\n\nexport default ColumnSelectDragDrop;\n","import React from 'react';\nimport { AccordionSearch, Tabs, Bubble } from 'franklin-sites';\nimport { getBEMClassName as bem } from '../../../shared/utils/utils';\nimport ColumnSelectDragDrop from './ColumnSelectDragDrop';\nimport { Column } from '../../types/columnTypes';\nimport {\n  ColumnSelectTab,\n  FieldData,\n  SelectedColumn,\n} from '../../types/resultsTypes';\nimport './styles/column-select.scss';\n\nconst getTabTitle = (tabId: ColumnSelectTab, columns: SelectedColumn[]) => (\n  <div\n    className={bem({\n      b: 'column-select',\n      e: 'tab-title',\n    })}\n  >\n    {tabId}\n    <span\n      className={bem({\n        b: 'column-select',\n        e: ['tab-title', 'count'],\n        m: columns.length ? 'visible' : 'hidden',\n      })}\n    >\n      <Bubble size=\"small\" value={columns.length} />\n    </span>\n  </div>\n);\n\nconst getFieldDataForColumns = (columns: Column[], fieldData: FieldData) => {\n  /*\n  For each column (a string enum) searches through the result field structure\n  to find the associated information:\n    -tabId\n    -accordionId\n    -itemId\n    -label\n  */\n  const selected: SelectedColumn[] = new Array(columns.length);\n  [ColumnSelectTab.data, ColumnSelectTab.links].forEach(tabId => {\n    fieldData[tabId].forEach(({ id: accordionId, items }) => {\n      items.forEach(({ id: itemId, label }) => {\n        const index = columns.indexOf(itemId);\n        if (index >= 0) {\n          selected[index] = { tabId, accordionId, itemId, label };\n        }\n      });\n    });\n  });\n  return selected;\n};\n\ntype ColumnSelectViewProps = {\n  selectedColumns: Column[];\n  fieldData: FieldData;\n  onSelect: (columnId: Column) => void;\n  onDragDrop: (srcIndex: number, destIndex: number) => void;\n  onReset: () => void;\n};\n\nconst ColumnSelectView: React.FC<ColumnSelectViewProps> = ({\n  selectedColumns,\n  fieldData,\n  onDragDrop,\n  onSelect,\n  onReset,\n}) => {\n  const fieldDataForSelectedColumns = getFieldDataForColumns(\n    selectedColumns,\n    fieldData\n  );\n\n  const tabData = [ColumnSelectTab.data, ColumnSelectTab.links].map(tabId => {\n    const selectedColumnsInTab = fieldDataForSelectedColumns.filter(\n      item => item.tabId === tabId\n    );\n    return {\n      title: getTabTitle(tabId, selectedColumnsInTab),\n      id: tabId,\n      key: tabId,\n      content: (\n        <AccordionSearch\n          accordionData={Object.values(fieldData[tabId])}\n          onSelect={(_accordionId: string, itemId: Column) => onSelect(itemId)}\n          selected={selectedColumnsInTab}\n          columns\n        />\n      ),\n    };\n  });\n  return (\n    <div className=\"column-select\">\n      <ColumnSelectDragDrop\n        columns={fieldDataForSelectedColumns}\n        onDragDrop={onDragDrop}\n        onRemove={onSelect}\n      />\n      <button\n        className=\"button secondary\"\n        type=\"button\"\n        tabIndex={0}\n        onClick={onReset}\n        data-testid=\"column-select-reset-button\"\n      >\n        Reset to default\n      </button>\n      <Tabs tabData={tabData} />\n    </div>\n  );\n};\n\nexport default ColumnSelectView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Loader } from 'franklin-sites';\nimport {\n  moveItemInList,\n  removeItemFromList,\n} from '../../../shared/utils/utils';\nimport { RootState, RootAction } from '../../../app/state/rootInitialState';\nimport * as resultsActions from '../../state/resultsActions';\nimport ColumnSelectView from './ColumnSelectView';\nimport { defaultTableColumns } from '../../state/resultsInitialState';\nimport { Column } from '../../types/columnTypes';\nimport { ColumnSelectTab, FieldData } from '../../types/resultsTypes';\n\ntype ColumnSelectProps = {\n  selectedColumns: Column[];\n  fetchFieldsIfNeeded: () => void;\n  isFetching: boolean;\n  fieldData: FieldData;\n  onChange: (columndIds: Column[]) => void;\n} & RouteComponentProps;\n\nexport const entryField = {\n  tabId: ColumnSelectTab.data,\n  accordionId: 'Names & Taxonomy',\n  itemId: Column.accession,\n};\n\nexport const removeFieldFromFieldsData = (\n  {\n    tabId,\n    accordionId,\n    itemId,\n  }: { tabId: ColumnSelectTab; accordionId: string; itemId: Column },\n  fieldData: FieldData\n) => ({\n  ...fieldData,\n  [tabId]: fieldData[tabId].map(group =>\n    group.id === accordionId\n      ? { ...group, items: group.items.filter(({ id }) => id !== itemId) }\n      : group\n  ),\n});\n\nconst ColumnSelect: React.FC<ColumnSelectProps> = ({\n  fetchFieldsIfNeeded,\n  isFetching,\n  fieldData,\n  selectedColumns,\n  onChange,\n}) => {\n  if (\n    isFetching ||\n    !fieldData ||\n    !fieldData[ColumnSelectTab.data] ||\n    !fieldData[ColumnSelectTab.data].length ||\n    !fieldData[ColumnSelectTab.links] ||\n    !fieldData[ColumnSelectTab.links].length\n  ) {\n    fetchFieldsIfNeeded();\n    return <Loader />;\n  }\n\n  // remove the entry field from the choices as this must always be present\n  // in the url fields parameter when making the search request ie\n  // don't give users the choice to remove it\n  const selectedColumnsWithoutEntry = selectedColumns.filter(\n    col => col !== entryField.itemId\n  );\n  const FieldFromFieldsDataWithoutEntry = removeFieldFromFieldsData(\n    entryField,\n    fieldData\n  );\n\n  const handleChange = (columns: Column[]) => {\n    onChange([entryField.itemId, ...columns]);\n  };\n\n  const handleSelect = (itemId: Column) => {\n    const index = selectedColumnsWithoutEntry.indexOf(itemId);\n    handleChange(\n      index >= 0\n        ? removeItemFromList(selectedColumnsWithoutEntry, index)\n        : [...selectedColumnsWithoutEntry, itemId]\n    );\n  };\n\n  const handleDragDrop = (srcIndex: number, destIndex: number) => {\n    handleChange(\n      moveItemInList(selectedColumnsWithoutEntry, srcIndex, destIndex)\n    );\n  };\n\n  return (\n    <ColumnSelectView\n      selectedColumns={selectedColumnsWithoutEntry}\n      fieldData={FieldFromFieldsDataWithoutEntry}\n      onReset={() => onChange(defaultTableColumns)}\n      onSelect={handleSelect}\n      onDragDrop={handleDragDrop}\n    />\n  );\n};\n\nconst mapStateToProps = (\n  state: RootState,\n  ownProps: {\n    onChange: (columndIds: Column[]) => void;\n    selectedColumns: Column[];\n  }\n) => ({\n  onChange: ownProps.onChange,\n  fieldData: state.results.fields.data,\n  isFetching: state.results.fields.isFetching,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\n  bindActionCreators(\n    {\n      fetchFieldsIfNeeded: () => resultsActions.fetchFieldsIfNeeded(),\n    },\n    dispatch\n  );\n\nconst ColumnSelectContainer = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ColumnSelect)\n);\n\nexport default ColumnSelectContainer;\n","import React, { Fragment } from 'react';\nimport { Loader } from 'franklin-sites';\nimport ColumnSelectContainer from '../column-select/ColumnSelectContainer';\nimport { FileFormat, fileFormatsWithColumns } from '../../types/resultsTypes';\nimport { Column } from '../../types/columnTypes';\nimport './styles/download.scss';\n\ntype DownloadViewProps = {\n  selectedColumns: Column[];\n  onPreview: (nPreview: number) => void;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  onCancel: () => void;\n  downloadAll: boolean;\n  fileFormat: FileFormat;\n  compressed: boolean;\n  preview: string;\n  loadingPreview: boolean;\n  onSelectedColumnsChange: (columns: Column[]) => void;\n  onFileFormatChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  onDownloadAllChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onCompressedChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  nSelectedEntries: number;\n  totalNumberResults: number;\n  nPreview: number;\n};\n\nconst DownloadView: React.FC<DownloadViewProps> = ({\n  onSubmit,\n  onCancel,\n  onPreview,\n  selectedColumns,\n  downloadAll,\n  fileFormat,\n  compressed,\n  preview,\n  loadingPreview,\n  onSelectedColumnsChange,\n  onDownloadAllChange,\n  onFileFormatChange,\n  onCompressedChange,\n  nSelectedEntries,\n  nPreview,\n  totalNumberResults,\n}) => {\n  let previewNode;\n  if (loadingPreview) {\n    previewNode = <Loader />;\n  } else if (preview && preview.length) {\n    previewNode = (\n      <div className=\"preview\">\n        <h4>Preview</h4>\n        <div className=\"preview__container\">\n          <pre className=\"preview__inner\" data-testid=\"download-preview\">\n            {preview}\n          </pre>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <Fragment>\n      <form\n        onSubmit={onSubmit}\n        className=\"download\"\n        data-testid=\"download-form\"\n      >\n        <h3>Download</h3>\n        <label htmlFor=\"data-selection-false\">\n          <input\n            id=\"data-selection-false\"\n            type=\"radio\"\n            name=\"data-selection\"\n            value=\"false\"\n            checked={!downloadAll}\n            onChange={onDownloadAllChange}\n            disabled={nSelectedEntries === 0}\n          />\n          Download selected ({nSelectedEntries})\n        </label>\n        <label htmlFor=\"data-selection-true\">\n          <input\n            id=\"data-selection-true\"\n            type=\"radio\"\n            name=\"data-selection\"\n            value=\"true\"\n            checked={downloadAll}\n            onChange={onDownloadAllChange}\n          />\n          Download all ({totalNumberResults})\n        </label>\n        <fieldset>\n          <legend>Format</legend>\n          <select\n            id=\"file-format-select\"\n            data-testid=\"file-format-select\"\n            value={fileFormat}\n            onChange={onFileFormatChange}\n          >\n            {Object.values(FileFormat)\n              .filter((format) => format !== FileFormat.rdfXml) // this download file type currently doesn't work so remove for now\n              .map((format) => (\n                <option value={format} key={format}>\n                  {format}\n                </option>\n              ))}\n          </select>\n        </fieldset>\n        <fieldset>\n          <legend>Compressed</legend>\n          <label htmlFor=\"compressed-true\">\n            <input\n              id=\"compressed-true\"\n              type=\"radio\"\n              name=\"compressed\"\n              value=\"true\"\n              checked={compressed}\n              onChange={onCompressedChange}\n            />\n            Yes\n          </label>\n          <label htmlFor=\"compressed-false\">\n            <input\n              id=\"compressed-false\"\n              type=\"radio\"\n              name=\"compressed\"\n              value=\"false\"\n              checked={!compressed}\n              onChange={onCompressedChange}\n            />\n            No\n          </label>\n        </fieldset>\n        {fileFormatsWithColumns.includes(fileFormat) && (\n          <fieldset>\n            <legend>Customize data</legend>\n            <ColumnSelectContainer\n              onChange={onSelectedColumnsChange}\n              selectedColumns={selectedColumns}\n            />\n          </fieldset>\n        )}\n        <div className=\"button-group customise-table--cancel-submit-buttons\">\n          <button className=\"button secondary\" type=\"button\" onClick={onCancel}>\n            Cancel\n          </button>\n          <button\n            className=\"button secondary\"\n            type=\"button\"\n            onClick={() => onPreview(nPreview)}\n          >\n            Preview {nPreview}\n          </button>\n          <button className=\"button\" type=\"submit\">\n            Download\n          </button>\n        </div>\n      </form>\n      {previewNode}\n    </Fragment>\n  );\n};\n\nexport default DownloadView;\n","import queryString from 'query-string';\nimport { uniq } from 'lodash-es';\n\nconst urlsAreEqual = (\n  url1: string,\n  url2: string,\n  ignoreParams: string[] = []\n) => {\n  const urlObject1 = queryString.parseUrl(url1);\n  const urlObject2 = queryString.parseUrl(url2);\n  if (urlObject1.url !== urlObject2.url) {\n    return false;\n  }\n  const paramsIntersection = uniq([\n    ...Object.keys(urlObject1.query),\n    ...Object.keys(urlObject1.query),\n  ]);\n  return paramsIntersection.every(\n    (param) =>\n      ignoreParams.includes(param) ||\n      urlObject1.query[param] === urlObject2.query[param]\n  );\n};\n\nexport default urlsAreEqual;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport idx from 'idx';\nimport { RootState } from '../../../app/state/rootInitialState';\nimport DownloadView from './DownloadView';\nimport { Column, SortableColumn } from '../../types/columnTypes';\nimport {\n  FileFormat,\n  fileFormatToContentType,\n  SelectedFacet,\n  SortDirection,\n} from '../../types/resultsTypes';\nimport { getDownloadUrl } from '../../config/apiUrls';\nimport urlsAreEqual from '../../../shared/utils/url';\nimport fetchData from '../../../shared/utils/fetchData';\n\nexport const getPreviewFileFormat = (fileFormat: FileFormat) =>\n  fileFormat === FileFormat.excel ? FileFormat.tsv : fileFormat;\n\ntype DownloadTableProps = {\n  tableColumns: Column[];\n  location: {\n    state: {\n      query: string;\n      selectedFacets: SelectedFacet[];\n      sortColumn: SortableColumn;\n      sortDirection: SortDirection;\n      selectedEntries: string[];\n      totalNumberResults: number;\n    };\n  };\n} & RouteComponentProps;\n\nconst Download: React.FC<DownloadTableProps> = ({\n  tableColumns,\n  history,\n  location: {\n    state: {\n      query,\n      selectedFacets,\n      sortColumn,\n      sortDirection,\n      selectedEntries,\n      totalNumberResults,\n    },\n  },\n}) => {\n  const [selectedColumns, setSelectedColumns] = useState(tableColumns);\n  const [downloadAll, setDownloadAll] = useState(true);\n  const [fileFormat, setFileFormat] = useState(FileFormat.fastaCanonical);\n  const [compressed, setCompressed] = useState(true);\n  const [loadingPreview, setLoadingPreview] = useState(false);\n  const [preview, setPreview] = useState({\n    url: '',\n    contentType: '',\n    data: '',\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const url = getDownloadUrl({\n      query,\n      columns: selectedColumns,\n      selectedFacets,\n      sortColumn,\n      sortDirection,\n      fileFormat,\n      compressed,\n      selectedAccessions: downloadAll ? [] : selectedEntries,\n    });\n    const link = document.createElement('a');\n    link.href = url;\n    link.target = '_blank';\n    link.setAttribute('download', '');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    history.goBack();\n  };\n  const nSelectedEntries = selectedEntries.length;\n  const handleCancel = () => {\n    history.goBack();\n  };\n  const nPreview = Math.min(\n    10,\n    downloadAll ? totalNumberResults : nSelectedEntries\n  );\n  const previewFileFormat = getPreviewFileFormat(fileFormat);\n  const previewUrl = getDownloadUrl({\n    query,\n    columns: selectedColumns,\n    selectedFacets,\n    sortColumn,\n    sortDirection,\n    fileFormat: previewFileFormat,\n    compressed,\n    size: nPreview,\n    selectedAccessions: downloadAll ? [] : selectedEntries,\n  });\n  const handlePreview = () => {\n    setLoadingPreview(true);\n    fetchData(previewUrl, {\n      Accept: fileFormatToContentType.get(previewFileFormat),\n    })\n      .then((response) => {\n        const contentType = idx(\n          response,\n          (o) => o.headers['content-type']\n        ) as FileFormat;\n        setPreview({\n          data:\n            contentType === fileFormatToContentType.get(FileFormat.json)\n              ? JSON.stringify(response.data, null, 2)\n              : response.data,\n          url: idx(response, (o) => o.config.url) || '',\n          contentType,\n        });\n      })\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n      })\n      .finally(() => {\n        setLoadingPreview(false);\n      });\n  };\n  const showPreview =\n    urlsAreEqual(preview.url, previewUrl, ['compressed']) &&\n    preview.data &&\n    preview.contentType === fileFormatToContentType.get(previewFileFormat);\n  return (\n    <DownloadView\n      onSubmit={handleSubmit}\n      onCancel={handleCancel}\n      onPreview={handlePreview}\n      selectedColumns={selectedColumns}\n      downloadAll={downloadAll}\n      fileFormat={fileFormat}\n      compressed={compressed}\n      onSelectedColumnsChange={setSelectedColumns}\n      nSelectedEntries={nSelectedEntries}\n      onDownloadAllChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n        setDownloadAll(e.target.value === 'true')\n      }\n      onFileFormatChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n        setFileFormat(e.target.value as FileFormat)\n      }\n      onCompressedChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n        setCompressed(e.target.value === 'true')\n      }\n      preview={showPreview ? preview.data : ''}\n      loadingPreview={loadingPreview}\n      nPreview={nPreview}\n      totalNumberResults={totalNumberResults}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  tableColumns: state.results.tableColumns,\n});\n\nconst DownloadContainer = withRouter(connect(mapStateToProps)(Download));\n\nexport default DownloadContainer;\n"],"sourceRoot":""}