{"version":3,"sources":["webpack:///./src/uniprotkb/components/column-select/ColumnSelectDragDrop.tsx","webpack:///./src/uniprotkb/components/column-select/ColumnSelectView.tsx","webpack:///./src/uniprotkb/components/column-select/ColumnSelectContainer.tsx","webpack:///./src/uniprotkb/components/customise-table/CustomiseTableView.tsx","webpack:///./src/uniprotkb/components/customise-table/CustomiseTableContainer.tsx"],"names":["ColumnSelectDragDrop","columns","onDragDrop","onRemove","onDragEnd","result","destination","source","index","droppableId","direction","droppableProvided","ref","innerRef","className","bem","b","e","droppableProps","map","itemId","label","key","draggableId","draggableProvided","snapshot","draggableProps","dragHandleProps","m","isDragging","style","type","data-testid","onClick","placeholder","getTabTitle","tabId","length","size","value","ColumnSelectView","selectedColumns","fieldData","onSelect","onReset","fieldDataForSelectedColumns","selected","Array","ColumnSelectTab","data","links","forEach","accordionId","id","items","indexOf","getFieldDataForColumns","tabData","selectedColumnsInTab","filter","item","title","content","accordionData","Object","values","_accordionId","tabIndex","entryField","Column","accession","ColumnSelectContainer","withRouter","connect","state","ownProps","onChange","results","fields","isFetching","dispatch","bindActionCreators","fetchFieldsIfNeeded","resultsActions","selectedColumnsWithoutEntry","col","FieldFromFieldsDataWithoutEntry","group","removeFieldFromFieldsData","handleChange","defaultTableColumns","removeItemFromList","srcIndex","destIndex","moveItemInList","CustomiseTableView","onSubmit","onCancel","CustomiseTableContainer","tableColumns","updateTableColumns","history","useState","setSelectedColumns","columnIds","preventDefault","goBack"],"mappings":"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","file":"customise-table.f06842.js","sourcesContent":["import React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { CloseIcon } from 'franklin-sites';\nimport { getBEMClassName as bem } from '../../../shared/utils/utils';\nimport { SelectedColumn } from '../../types/resultsTypes';\nimport { Column } from '../../types/columnTypes';\nimport './styles/column-select-drag-drop.scss';\n\ntype ColumnSelectDragDropProps = {\n  columns: SelectedColumn[];\n  onDragDrop: (srcIndex: number, destIndex: number) => void;\n  onRemove: (columnId: Column) => void;\n};\n\nconst ColumnSelectDragDrop: React.FC<ColumnSelectDragDropProps> = ({\n  columns,\n  onDragDrop,\n  onRemove,\n}) => (\n  <DragDropContext\n    onDragEnd={result => {\n      if (result.destination) {\n        onDragDrop(result.source.index, result.destination.index);\n      }\n    }}\n  >\n    <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n      {droppableProvided => (\n        <div\n          ref={droppableProvided.innerRef}\n          className={bem({\n            b: 'column-select-drag-drop',\n            e: 'list',\n          })}\n          {...droppableProvided.droppableProps}\n        >\n          {columns.map(({ itemId, label }, index) => (\n            <Draggable key={itemId} draggableId={itemId} index={index}>\n              {(draggableProvided, snapshot) => (\n                <div\n                  ref={draggableProvided.innerRef}\n                  {...draggableProvided.draggableProps}\n                  {...draggableProvided.dragHandleProps}\n                  className={`button ${bem({\n                    b: 'column-select-drag-drop',\n                    e: ['list', 'item'],\n                    m: snapshot.isDragging && 'dragging',\n                  })}`}\n                  style={draggableProvided.draggableProps.style}\n                >\n                  {label}\n                  <button\n                    type=\"button\"\n                    data-testid=\"column-select-dnd-remove-button\"\n                    className={bem({\n                      b: 'column-select-drag-drop',\n                      e: ['list', 'item', 'button'],\n                    })}\n                    onClick={() => onRemove(itemId)}\n                  >\n                    <CloseIcon\n                      className={bem({\n                        b: 'column-select-drag-drop',\n                        e: ['list', 'item', 'button', 'icon'],\n                      })}\n                    />\n                  </button>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {droppableProvided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  </DragDropContext>\n);\n\nexport default ColumnSelectDragDrop;\n","import React from 'react';\nimport { AccordionSearch, Tabs, Bubble } from 'franklin-sites';\nimport { getBEMClassName as bem } from '../../../shared/utils/utils';\nimport ColumnSelectDragDrop from './ColumnSelectDragDrop';\nimport { Column } from '../../types/columnTypes';\nimport {\n  ColumnSelectTab,\n  FieldData,\n  SelectedColumn,\n} from '../../types/resultsTypes';\nimport './styles/column-select.scss';\n\nconst getTabTitle = (tabId: ColumnSelectTab, columns: SelectedColumn[]) => (\n  <div\n    className={bem({\n      b: 'column-select',\n      e: 'tab-title',\n    })}\n  >\n    {tabId}\n    <span\n      className={bem({\n        b: 'column-select',\n        e: ['tab-title', 'count'],\n        m: columns.length ? 'visible' : 'hidden',\n      })}\n    >\n      <Bubble size=\"small\" value={columns.length} />\n    </span>\n  </div>\n);\n\nconst getFieldDataForColumns = (columns: Column[], fieldData: FieldData) => {\n  /*\n  For each column (a string enum) searches through the result field structure\n  to find the associated information:\n    -tabId\n    -accordionId\n    -itemId\n    -label\n  */\n  const selected: SelectedColumn[] = new Array(columns.length);\n  [ColumnSelectTab.data, ColumnSelectTab.links].forEach(tabId => {\n    fieldData[tabId].forEach(({ id: accordionId, items }) => {\n      items.forEach(({ id: itemId, label }) => {\n        const index = columns.indexOf(itemId);\n        if (index >= 0) {\n          selected[index] = { tabId, accordionId, itemId, label };\n        }\n      });\n    });\n  });\n  return selected;\n};\n\ntype ColumnSelectViewProps = {\n  selectedColumns: Column[];\n  fieldData: FieldData;\n  onSelect: (columnId: Column) => void;\n  onDragDrop: (srcIndex: number, destIndex: number) => void;\n  onReset: () => void;\n};\n\nconst ColumnSelectView: React.FC<ColumnSelectViewProps> = ({\n  selectedColumns,\n  fieldData,\n  onDragDrop,\n  onSelect,\n  onReset,\n}) => {\n  const fieldDataForSelectedColumns = getFieldDataForColumns(\n    selectedColumns,\n    fieldData\n  );\n\n  const tabData = [ColumnSelectTab.data, ColumnSelectTab.links].map(tabId => {\n    const selectedColumnsInTab = fieldDataForSelectedColumns.filter(\n      item => item.tabId === tabId\n    );\n    return {\n      title: getTabTitle(tabId, selectedColumnsInTab),\n      id: tabId,\n      key: tabId,\n      content: (\n        <AccordionSearch\n          accordionData={Object.values(fieldData[tabId])}\n          onSelect={(_accordionId: string, itemId: Column) => onSelect(itemId)}\n          selected={selectedColumnsInTab}\n          columns\n        />\n      ),\n    };\n  });\n  return (\n    <div className=\"column-select\">\n      <ColumnSelectDragDrop\n        columns={fieldDataForSelectedColumns}\n        onDragDrop={onDragDrop}\n        onRemove={onSelect}\n      />\n      <button\n        className=\"button secondary\"\n        type=\"button\"\n        tabIndex={0}\n        onClick={onReset}\n        data-testid=\"column-select-reset-button\"\n      >\n        Reset to default\n      </button>\n      <Tabs tabData={tabData} />\n    </div>\n  );\n};\n\nexport default ColumnSelectView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Loader } from 'franklin-sites';\nimport {\n  moveItemInList,\n  removeItemFromList,\n} from '../../../shared/utils/utils';\nimport { RootState, RootAction } from '../../../app/state/rootInitialState';\nimport * as resultsActions from '../../state/resultsActions';\nimport ColumnSelectView from './ColumnSelectView';\nimport { defaultTableColumns } from '../../state/resultsInitialState';\nimport { Column } from '../../types/columnTypes';\nimport { ColumnSelectTab, FieldData } from '../../types/resultsTypes';\n\ntype ColumnSelectProps = {\n  selectedColumns: Column[];\n  fetchFieldsIfNeeded: () => void;\n  isFetching: boolean;\n  fieldData: FieldData;\n  onChange: (columndIds: Column[]) => void;\n} & RouteComponentProps;\n\nexport const entryField = {\n  tabId: ColumnSelectTab.data,\n  accordionId: 'Names & Taxonomy',\n  itemId: Column.accession,\n};\n\nexport const removeFieldFromFieldsData = (\n  {\n    tabId,\n    accordionId,\n    itemId,\n  }: { tabId: ColumnSelectTab; accordionId: string; itemId: Column },\n  fieldData: FieldData\n) => ({\n  ...fieldData,\n  [tabId]: fieldData[tabId].map(group =>\n    group.id === accordionId\n      ? { ...group, items: group.items.filter(({ id }) => id !== itemId) }\n      : group\n  ),\n});\n\nconst ColumnSelect: React.FC<ColumnSelectProps> = ({\n  fetchFieldsIfNeeded,\n  isFetching,\n  fieldData,\n  selectedColumns,\n  onChange,\n}) => {\n  if (\n    isFetching ||\n    !fieldData ||\n    !fieldData[ColumnSelectTab.data] ||\n    !fieldData[ColumnSelectTab.data].length ||\n    !fieldData[ColumnSelectTab.links] ||\n    !fieldData[ColumnSelectTab.links].length\n  ) {\n    fetchFieldsIfNeeded();\n    return <Loader />;\n  }\n\n  // remove the entry field from the choices as this must always be present\n  // in the url fields parameter when making the search request ie\n  // don't give users the choice to remove it\n  const selectedColumnsWithoutEntry = selectedColumns.filter(\n    col => col !== entryField.itemId\n  );\n  const FieldFromFieldsDataWithoutEntry = removeFieldFromFieldsData(\n    entryField,\n    fieldData\n  );\n\n  const handleChange = (columns: Column[]) => {\n    onChange([entryField.itemId, ...columns]);\n  };\n\n  const handleSelect = (itemId: Column) => {\n    const index = selectedColumnsWithoutEntry.indexOf(itemId);\n    handleChange(\n      index >= 0\n        ? removeItemFromList(selectedColumnsWithoutEntry, index)\n        : [...selectedColumnsWithoutEntry, itemId]\n    );\n  };\n\n  const handleDragDrop = (srcIndex: number, destIndex: number) => {\n    handleChange(\n      moveItemInList(selectedColumnsWithoutEntry, srcIndex, destIndex)\n    );\n  };\n\n  return (\n    <ColumnSelectView\n      selectedColumns={selectedColumnsWithoutEntry}\n      fieldData={FieldFromFieldsDataWithoutEntry}\n      onReset={() => onChange(defaultTableColumns)}\n      onSelect={handleSelect}\n      onDragDrop={handleDragDrop}\n    />\n  );\n};\n\nconst mapStateToProps = (\n  state: RootState,\n  ownProps: {\n    onChange: (columndIds: Column[]) => void;\n    selectedColumns: Column[];\n  }\n) => ({\n  onChange: ownProps.onChange,\n  fieldData: state.results.fields.data,\n  isFetching: state.results.fields.isFetching,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\n  bindActionCreators(\n    {\n      fetchFieldsIfNeeded: () => resultsActions.fetchFieldsIfNeeded(),\n    },\n    dispatch\n  );\n\nconst ColumnSelectContainer = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ColumnSelect)\n);\n\nexport default ColumnSelectContainer;\n","import React from 'react';\nimport ColumnSelectContainer from '../column-select/ColumnSelectContainer';\nimport { Column } from '../../types/columnTypes';\nimport './styles/customise-table.scss';\n\ntype CustomiseTableViewProps = {\n  selectedColumns: Column[];\n  onChange: (columndIds: Column[]) => void;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  onCancel: () => void;\n};\n\nconst CustomiseTableView: React.FC<CustomiseTableViewProps> = ({\n  selectedColumns,\n  onChange,\n  onSubmit,\n  onCancel,\n}) => (\n  <form\n    onSubmit={onSubmit}\n    className=\"customise-table\"\n    data-testid=\"customise-table-form\"\n  >\n    <ColumnSelectContainer\n      onChange={onChange}\n      selectedColumns={selectedColumns}\n    />\n    <div className=\"button-group customise-table--cancel-submit-buttons\">\n      <button\n        className=\"button secondary\"\n        type=\"button\"\n        onClick={onCancel}\n        data-testid=\"customise-table-cancel-button\"\n      >\n        Cancel\n      </button>\n      <button className=\"button\" type=\"submit\">\n        Save\n      </button>\n    </div>\n  </form>\n);\n\nexport default CustomiseTableView;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { RootState, RootAction } from '../../../app/state/rootInitialState';\nimport * as resultsActions from '../../state/resultsActions';\nimport CustomiseTableView from './CustomiseTableView';\nimport { Column } from '../../types/columnTypes';\n\ntype CustomiseTableProps = {\n  tableColumns: Column[];\n  updateTableColumns: (columnIds: Column[]) => void;\n} & RouteComponentProps;\n\nconst CustomiseTable: React.FC<CustomiseTableProps> = ({\n  tableColumns,\n  updateTableColumns,\n  history,\n}) => {\n  const [selectedColumns, setSelectedColumns] = useState(tableColumns);\n\n  const handleChange = (columnIds: Column[]) => {\n    setSelectedColumns(columnIds);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    updateTableColumns(selectedColumns);\n    history.goBack();\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  return (\n    <CustomiseTableView\n      selectedColumns={selectedColumns}\n      onChange={handleChange}\n      onSubmit={handleSubmit}\n      onCancel={handleCancel}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  tableColumns: state.results.tableColumns,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\n  bindActionCreators(\n    {\n      updateTableColumns: (tableColumns: Column[]) =>\n        resultsActions.updateTableColumns(tableColumns),\n    },\n    dispatch\n  );\n\nconst CustomiseTableContainer = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(CustomiseTable)\n);\n\nexport default CustomiseTableContainer;\n"],"sourceRoot":""}