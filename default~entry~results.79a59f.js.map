{"version":3,"sources":["webpack:///./src/uniprotkb/types/entrySection.ts","webpack:///./src/uniprotkb/types/commentTypes.ts","webpack:///./src/uniprotkb/types/modelTypes.ts","webpack:///./src/uniprotkb/components/protein-data-views/XRefView.tsx","webpack:///./src/uniprotkb/utils/utils.ts","webpack:///./src/uniprotkb/config/evidenceCodes.ts","webpack:///./src/uniprotkb/components/protein-data-views/UniProtKBEntryPublications.tsx","webpack:///./src/uniprotkb/components/protein-data-views/UniProtKBEvidenceTag.tsx","webpack:///./src/uniprotkb/config/evidenceUrls.ts","webpack:///./src/uniprotkb/components/protein-data-views/FreeTextView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/KeywordView.tsx","webpack:///./src/uniprotkb/types/featureType.ts","webpack:///./src/uniprotkb/adapters/sectionConverter.ts","webpack:///./src/shared/hooks/useDataApi.ts","webpack:///./src/uniprotkb/components/protein-data-views/FeaturesView.tsx","webpack:///./src/uniprotkb/types/keywordCategory.ts","webpack:///./src/uniprotkb/config/externalUrls.ts","webpack:///./src/uniprotkb/utils/database.ts","webpack:///./src/uniprotkb/config/database.ts","webpack:///./src/uniprotkb/utils/xrefUtils.ts","webpack:///./src/uniprotkb/utils/resultsUtils.ts","webpack:///./src/uniprotkb/adapters/pathologyAndBiotechConverter.ts","webpack:///./src/uniprotkb/adapters/proteinProcessingConverter.ts","webpack:///./src/uniprotkb/adapters/expressionConverter.ts","webpack:///./src/uniprotkb/adapters/subcellularLocationConverter.ts","webpack:///./src/uniprotkb/adapters/interactionConverter.ts","webpack:///./src/uniprotkb/adapters/familyAndDomainsConverter.ts","webpack:///./src/uniprotkb/adapters/structureConverter.ts","webpack:///./src/uniprotkb/adapters/uniProtkbConverter.ts","webpack:///./src/uniprotkb/adapters/externalLinksConverter.ts","webpack:///./src/uniprotkb/adapters/namesAndTaxonomyConverter.ts","webpack:///./src/uniprotkb/utils/KeywordsUtil.tsx","webpack:///./src/shared/components/error-pages/ErrorHandler.tsx","webpack:///./src/uniprotkb/components/protein-data-views/ProteinNamesView.tsx","webpack:///./src/uniprotkb/types/databaseRefs.ts","webpack:///./src/uniprotkb/components/protein-data-views/GeneNamesView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/OrganismView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/AnnotationScoreDoughnutChart.tsx","webpack:///./src/uniprotkb/components/protein-data-views/UniProtKBTitle.tsx","webpack:///./src/uniprotkb/components/entry/NamesAndTaxonomySection.tsx","webpack:///./src/uniprotkb/components/entry/PathologyAndBiotechSection.tsx","webpack:///./src/uniprotkb/components/entry/ProteinProcessingSection.tsx","webpack:///./src/uniprotkb/components/entry/ExpressionSection.tsx","webpack:///./src/uniprotkb/components/entry/SubcellularLocationSection.tsx","webpack:///./src/uniprotkb/components/entry/SequenceSection.tsx","webpack:///./src/uniprotkb/components/entry/InteractionSection.tsx","webpack:///./src/uniprotkb/components/entry/FamilyAndDomainsSection.tsx","webpack:///./src/uniprotkb/components/entry/StructureSection.tsx","webpack:///./src/uniprotkb/config/UniProtEntryConfig.tsx","webpack:///./src/shared/components/layouts/SideBarLayout.tsx","webpack:///./src/uniprotkb/adapters/literatureConverter.ts","webpack:///./src/uniprotkb/components/entry/FunctionSection.tsx","webpack:///./src/uniprotkb/components/protein-data-views/CatalyticActivityView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/FeaturesTableView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/GOView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/ProteomesView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/DiseaseInvolvementView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/SubcellularLocationView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/SequenceView.tsx","webpack:///./src/uniprotkb/components/protein-data-views/NumberView.tsx","webpack:///./src/blast_website/BlastUtils.ts","webpack:///./src/uniprotkb/components/protein-data-views/PDBView.tsx","webpack:///./src/uniprotkb/adapters/sequenceConverter.ts","webpack:///./src/uniprotkb/adapters/functionConverter.ts","webpack:///./src/uniprotkb/utils/queryUtils.ts","webpack:///./src/uniprotkb/config/variationFiltersConfig.ts","webpack:///./src/uniprotkb/components/protein-data-views/VariationView.tsx"],"names":["EntrySection","CommentType","PhysiologicalReactionDirection","InteractionType","PropertyKey","processUrlTemplate","urlTemplate","params","url","Object","entries","forEach","param","value","replace","RegExp","formatSuffixWithCount","prefix","number","count","parseInt","getPropertyLink","databaseInfo","property","xref","attributes","attribute","name","find","getDatabaseInfoAttribute","properties","id","uriLink","key","EMBLXref","isoformNode","genBankInfo","databaseToDatabaseInfo","GenBank","ddbjInfo","DDBJ","additionalIds","console","warn","externalUrls","ENA","map","additionalId","MoleculeType","EMBLXrefProperties","ProteinId","Status","XRef","propertiesNode","database","primaryAccession","crc64","isoformId","databaseType","implicit","keys","GeneId","includes","MatchStatus","Interactions","getPropertyString","href","text","DatabaseList","viewItem","xrefsGoupedByDatabase","xrefs","viewLink","viewProteinLinkDatabases","get","v1","content","xrefItems","descriptionString","concat","StructureXRefsGroupedByCategory","PDBViewNode","databases","partitionStructureDatabases","PDBDatabase","otherStructureDatabases","length","PDBView","noStructure","XRefsGroupedByCategory","infoData","sortBy","idx","o","title","displayName","columns","XRefView","nodes","category","xrefsNode","DatabaseCategory","STRUCTURE","databaseCategoryToString","hasContent","obj","values","some","val","Array","isArray","Map","from","hasExternalLinks","transformedData","UniProtKBEntryConfig","data","xrefData","flattenGeneNameData","geneNamesData","geneNames","geneName","synonyms","orfNames","orderedLocusNames","push","names","uniq","transfromProperties","ECO","labels","publicationCountRenderer","evidences","PUBLICATION","CURATED","rulesCountRenderer","evidence","source","SEQ_ANA","AA","getEvidenceCodeData","eco","Number","split","EXP","manual","label","description","labelRender","HTP","IDA","HDA","IPI","IMP","HMP","IGI","HGI","IEP","HEP","ISS","SIMILARITY","ISO","ISA","ISM","IGC","IBA","IBD","IKR","IRD","RCA","TAS","NAS","IC","ND","IEA","MI","IMPORTED","AI","MIXM","COMBINED","MIXA","SGNM","SGNA","INTERPRO","evidenceTagSourceTypes","UniProtKBEntryPublications","pubmedIds","getPublicationsURL","useDataApi","loading","status","error","level","MessageLevel","FAILURE","message","results","literatureItem","formatCitationData","citation","statistics","pubmedId","journalInfo","authors","citationType","journal","evidenceUrls","Araport","CGD","EMBL","EPD","Ensembl","EnsemblBacteria","EnsemblFungi","EnsemblMetazoa","EnsemblPlants","EnsemblProtists","FlyBase","HGNC","MGI","MaxQB","PDB","PIR","PIRNR","PIRSR","PROSITE","PeptideAtlas","Pfam","PomBase","Proteomes","PubMed","RGD","RefSeq","RuleBase","SAAS","SAM","SGD","SMART","UniRule","VGNC","VectorBase","WBParaSite","WormBase","Xenbase","ZFIN","UniProtKB","Reference","dictyBase","MIM","EcoGene","TubercuList","ProteomicsDB","UniProtEvidenceTagContent","evidenceData","groupedEvidences","groupBy","PUBMED","publicationReferences","groupedEvidencesWithoutPubs","reference","filter","mappedEvidences","urlPattern","UniProtProtvistaEvidenceTag","callback","evidenceObj","evidenceCode","references","html","unsafeHTML","ReactDOMServer","renderToStaticMarkup","width","height","UniProtKBEvidenceTag","evidenceTags","className","TextView","comments","comment","FreeTextView","freeTextData","item","texts","molecule","style","textTransform","KeywordItem","KeywordList","keywords","idOnly","keyword","index","KeywordView","keywordCategory","FeatureType","convertSection","sectionComments","sectionKeywords","sectionFeatures","section","convertedData","commentsData","keywordData","featuresData","features","uniProtKBCrossReferences","genes","organism","uniProtkbId","commentType","set","getKeywordsForCategories","feature","type","commonName","ecNumbers","proteinDescription","recommendedName","similarityComments","getXrefsForSection","ActionType","reducer","state","action","INIT","SUCCESS","newState","response","statusText","headers","request","responseURL","originalURL","redirectedTo","responseUrl","ERROR","useReducer","dispatch","useEffect","didCancel","axios","CancelToken","fetchData","undefined","token","then","isCancel","cancel","LocationModifier","FeaturesView","sequence","loadWebComponent","ProtvistaTrack","ProtvistaManager","ProtvistaSequence","ProtvistaNavigation","processedData","accession","featureId","start","location","end","startModifier","modifier","endModifier","setTrackData","useCallback","node","ref","layout","getColumnConfig","evidenceTagCallback","resolver","d","positions","UNKNOWN","KeywordCategory","IntAct","QuickGO","NCBI","InterPro","getIntActQueryForAccessionUrl","joinUrl","getIntActQueryUrl","firstInteractor","secondInteractor","databaseCategoryToNames","databaseNameToCategory","implicitDatabaseXRefs","databaseInfoJson","CHEMISTRY","DOMAIN","EXPRESSION","FAMILY","GEL","GENOME","INTERACTION","ORGANISM","OTHER","PATHWAY","PHYLOGENOMIC","POLYMORPHISM","PROTEOMIC","PROTOCOL","PTM","SEQUENCE","info","databaseNames","PDBMirrors","PDBMirrorsInfo","PDBMirror","databaseSelector","categories","whitelist","blacklist","flatten","db","selectDatabases","entrySectionToDatabaseNames","Expression","FamilyAndDomains","Function","Interaction","NamesAndTaxonomy","PathologyAndBioTech","ProteinProcessing","Sequence","Structure","ExternalLinks","getDatabaseNameToEntrySection","databaseName","entrySection","entrySectionToDatabaseCategoryOrder","uniqueCategories","databaseCategory","getEntrySectionToDatabaseCategoryOrder","getDatabaseInfoByName","dbName","dbInfo","toLowerCase","implicitDatabaseDRPresence","implicitDatabaseDRAbsence","SMR","implicitDatabaseAlwaysInclude","implicitDatabaseGenePatternOrganism","pattern","Human","Mouse","implicitDatabaseSimilarityComment","GPCRDB","implicitDatabasesEC","getJoinedXrefs","JOINED","NOT_JOINED","joinedXrefIds","joinedXref","databasesForSection","foundXrefs","categoryToNameToXrefs","implicitDatabaseDRPresenceCheck","implicitDatabaseDRAbsenceCheck","check","ruleMap","implicitNames","implicitName","GeneName","getDRImplicitXrefs","commentSubstring","getDatabaseSimilarityCommentImplicitXrefs","match","gene","getGenePatternOrganismImplicitXrefs","ec","getECImplicitXrefs","nameToXrefs","databaseCategoryOrder","xrefCategories","PDBDatabases","getParamsFromURL","urlParams","queryStringModule","parse","query","facets","sort","dir","selectedFacets","stringItem","sortDirection","sortColumn","SortDirection","facetsAsString","reduce","accumulator","facet","i","getLocationObjForParams","pathname","search","join","getSortableColumnToSortColumn","resultFields","sortableColumnToSortColumn","fields","sortField","keywordsCategories","DISEASE","featuresCategories","MUTAGEN","commentsCategories","ALLERGEN","BIOTECHNOLOGY","DISRUPTION_PHENOTYPE","TOXIC_DOSE","PHARMACEUTICAL","convertPathologyAndBiotech","INIT_MET","SIGNAL","TRANSIT","PROPEP","CHAIN","PEPTIDE","MOD_RES","LIPID","CARBOHYD","DISULFID","CROSSLNK","proteinProcessingComments","convertProteinProcessing","DEVELOPMENTAL_STAGE","TISSUE_SPECIFICITY","INDUCTION","convertExpression","commentCategories","SUBCELLULAR_LOCATION","CELLULAR_COMPONENT","TOPO_DOM","TRANSMEM","convertSubcellularLocation","SUBUNIT","convertInteraction","REGION","REPEAT","MOTIF","COMPBIAS","familyAndDomainsComments","convertFamilyAndDomains","EntryType","InactiveReasonType","HELIX","STRAND","convertStructure","structureData","structureInfo","method","Method","groupedStructureInfo","structures","convertExternalLinks","WEB_RESOURCE","uniProtKbConverter","dataCopy","proteinExistence","entryType","annotationScore","convertFunction","namesAndTaxonomyData","proteinNamesData","organismData","virusHosts","proteomesData","convertNamesAndTaxonomy","SubCellularLocation","convertSequence","getAllKeywords","allKeywords","UIModelAttribute","categ","keywordCategories","keywordsByCategories","categoryKeywords","ErrorHandler","browserHistory","LocationToPath","Location","PageNotFound","ServiceUnavailable","NameWithEvidence","ProteinNamesViewFlat","includeEvidence","fullName","shortNames","shortName","ProteinDescriptionView","alternativeNames","alternativeName","ECNumbersView","isCompact","ecNumber","ProteinNamesView","proteinNames","getInfoListForNames","contains","submissionNames","submission","biotechName","cdAntigenNames","innNames","highlightFirstItem","geneAlternativeNamesView","firstComma","altName","prev","curr","GeneNamesView","OrganismLineage","lineage","OrganismId","taxonId","OrganismView","termValue","scientificName","OrganismListView","hosts","infoListData","host","DoughnutChartSize","AnnotationScoreDoughnutChart","bin","score","size","medium","annotationScoreBin","Math","floor","min","percent","ReviewedUnreviewed","SWISSPROT","UniProtKBTitle","NamesAndTaxonomySection","PathologyAndBiotechSection","DiseaseInvolvementView","includeTitle","VariationView","ProteinProcessingSection","ExpressionSection","SubcellularLocationSection","SubcellularLocationView","SequenceSection","SequenceView","sequenceCaution","massSpectrometry","polymorphysm","rnaEditing","InteractionViewer","ProtvistaDatatable","InteractionSection","datatableContainer","useRef","interactionComment","current","interactions","entry1","interactantOne","uniProtkbAccession","chainId","entry2","interactantTwo","experiments","numberOfExperiments","intact","intActId","getInteractionColumns","FamilyAndDomainsSection","StructureSection","XrefViewNode","arrayStructureDatabases","nonPDBDatabases","otherDatabases","structureDatabases","nonPDBStructureDatabases","categoryOrder","a","b","indexOf","sectionContent","FunctionSection","SideBarLayout","sidebar","actionButtons","children","getCitationPubMedId","citationCrossReferences","pubMedXref","doiXref","getDoiXref","volume","firstPage","lastPage","publicationDate","doiId","AbsorptionView","approximate","max","note","KineticsView","michaelisConstants","km","constant","unit","substrate","BioPhysicoChemicalPropertiesView","absorption","kinetics","pHDependence","redoxPotential","temperatureDependence","CofactorView","cofactors","cofactorComment","cofactor","FUNCTION","CATALYTIC_ACTIVITY","toLocaleLowerCase","COFACTOR","MISCELLANEOUS","bioPhysicoChemicalProperties","ACTIVITY_REGULATION","goTerms","getRheaId","referenceId","isRheaReactionReference","ZoomModalContent","chebi","imgURL","imageRef","useState","setLoading","image","Image","src","onload","alt","display","RheaReactionVisualizer","rheaId","initialShow","show","setShow","zoomImageData","setZoomImageData","useModal","ModalBackdrop","Window","displayModal","setDisplayModal","Modal","addEventListener","detail","onClick","rheaid","zoom","showids","handleExitModal","physiologicalReactionDirectionToString","LeftToRight","RightToLeft","ReactionDirection","physiologicalReactions","directionType","localeCompare","reactionCrossReference","data-testid","CatalyticActivityView","firstRheaId","reaction","rheaReactionReference","reactionCrossReferences","FeaturesTableView","showEvidenceTagData","setShowEvidenceTagData","selectedEvidenceData","setSelectedEvidenceData","selectedReferences","setSelectedReferences","setTableData","GOTermsView","termDescription","GOView","aspect","terms","ProteomesId","ProteomesComponents","components","ProteomesView","proteome","DiseaseInvolvementEntry","disease","diseaseId","acronym","diseaseCrossReference","evidenceNodes","subcellData","subcellularLocations","subcellularLocation","topology","SequenceInfo","isoformSequence","lastUpdateDate","displayLoadSequenceButton","setData","isoformToFetch","setIsoformToFetch","apiUrls","entry","result","fetchIsoformData","onBlastClick","dataToDisplay","submitBlast","formatLargeNumber","molWeight","downloadUrl","sequenceFasta","IsoformInfo","isoformData","canonicalAccession","syn","varSeqs","alternativeSequence","to","originalSequence","alternativeSequences","isoformIds","isoformSequenceStatus","substring","SequenceCautionView","sequenceCautionType","MassSpectrometryView","numberView","Unit","DA","RNAEditingView","pos","position","IsoformView","isoformCountNode","notesNode","alternativeProducts","canonicalComponent","includeSequences","isoforms","events","isoformsNode","isoform","isoformComponent","sequenceInfoData","processing","dataset","threshold","matrix","blastFilter","gapped","alignments","redirect","landingPage","url2","createHiddenField","hiddenField","document","createElement","form","setAttribute","sequenceField","appendChild","body","submit","ProtvistaStructure","chain","Chains","Resolution","tokens","resolution","protvistaFeatureId","processData","links","rowClickEvent","sortedIds","firstId","pdb-id","selectedId","noScrollToRow","noDeselect","Flag","sequenceKeywords","CODING_SEQUENCE_DIVERSITY","sequenceFeatures","NON_STD","UNSURE","CONFLICT","NON_CONS","NON_TER","VAR_SEQ","sequenceData","flag","FRAGMENT","FRAGMENTS","FRAGMENTS_PRECURSOR","FRAGMENT_PRECURSOR","PRECURSOR","entryAudit","lastSequenceUpdateDate","sequenceVersion","ALTERNATIVE_PRODUCTS","SEQUENCE_CAUTION","massSpec","MASS_SPECTROMETRY","RNA_EDITING","varSeqsToAdd","sequenceIds","sequenceId","varSeqToAdd","varSeq","joined","newXrefs","GoAspect","MOLECULAR_FUNCTION","BIOLOGICAL_PROCESS","LIGAND","CA_BIND","ZN_FING","DNA_BIND","NP_BINDL","COILED","ACT_SITE","METAL","BINDING","SITE","BIOPHYSICOCHEMICAL_PROPERTIES","convertedSection","bpcProperties","bpcProperty","kineticParameters","phDependence","delete","term","goTermProperty","GoTerm","getNextUrlFromResponse","link","exec","scaleColors","consequences","likelyDisease","likelyBenign","uncertain","getFilteredVariants","variants","callbackFilter","variant","variantPos","filterConfig","options","colors","filterData","clinicalSignificances","test","predicted","polyphenScore","siftScore","nonDisease","UniProt","xrefNames","ClinVar","LSS","sourceType","predictionScale","scaleLinear","domain","range","colorConfig","variantWrapper","ProtvistaVariation","ProtvistaFilter","begin","change","wildType","consequence","child","consequenceType","sift","siftPrediction","polyphen","polyphenPrediction","formatedDescription","descriptionLine","somaticStatus","hasDisease","association","code","hasTable","variation","protvistaFilterRef","filters","protvistaVariationRef","transformData","for"],"mappings":"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","file":"default~entry~results.79a59f.js","sourcesContent":["enum EntrySection {\n  Function = 'Function',\n  FamilyAndDomains = 'Family & Domains',\n  Expression = 'Expression',\n  Interaction = 'Interaction',\n  // Miscellaneous = 'Miscellaneous',\n  NamesAndTaxonomy = 'Names & Taxonomy',\n  PathologyAndBioTech = 'Pathology & BioTech',\n  ProteinProcessing = 'Protein Processing',\n  Sequence = 'Sequence',\n  Structure = 'Structure',\n  SubCellularLocation = 'Subcellular Location',\n  ExternalLinks = 'External Links',\n}\n\nexport default EntrySection;\n","import { Evidence } from './modelTypes';\nimport {\n  Absorption,\n  KineticParameters,\n  CofactorComment,\n} from '../adapters/functionConverter';\nimport { FeatureData } from '../components/protein-data-views/FeaturesView';\nimport { Interactant } from '../adapters/interactionConverter';\n\nexport enum CommentType {\n  ACTIVITY_REGULATION = 'ACTIVITY REGULATION',\n  ALLERGEN = 'ALLERGEN',\n  ALTERNATIVE_PRODUCTS = 'ALTERNATIVE PRODUCTS',\n  BIOPHYSICOCHEMICAL_PROPERTIES = 'BIOPHYSICOCHEMICAL PROPERTIES',\n  BIOTECHNOLOGY = 'BIOTECHNOLOGY',\n  CATALYTIC_ACTIVITY = 'CATALYTIC ACTIVITY',\n  CAUTION = 'CAUTION',\n  COFACTOR = 'COFACTOR',\n  DEVELOPMENTAL_STAGE = 'DEVELOPMENTAL STAGE',\n  DISEASE = 'DISEASE',\n  DISRUPTION_PHENOTYPE = 'DISRUPTION PHENOTYPE',\n  DOMAIN = 'DOMAIN',\n  FUNCTION = 'FUNCTION',\n  INDUCTION = 'INDUCTION',\n  INTERACTION = 'INTERACTION',\n  MASS_SPECTROMETRY = 'MASS SPECTROMETRY',\n  MISCELLANEOUS = 'MISCELLANEOUS',\n  PATHWAY = 'PATHWAY',\n  PHARMACEUTICAL = 'PHARMACEUTICAL',\n  POLYMORPHISM = 'POLYMORPHISM',\n  PTM = 'PTM',\n  RNA_EDITING = 'RNA EDITING',\n  SEQUENCE_CAUTION = 'SEQUENCE CAUTION',\n  SIMILARITY = 'SIMILARITY',\n  SUBCELLULAR_LOCATION = 'SUBCELLULAR LOCATION',\n  SUBUNIT = 'SUBUNIT',\n  TISSUE_SPECIFICITY = 'TISSUE SPECIFICITY',\n  TOXIC_DOSE = 'TOXIC DOSE',\n  UNKNOWN = 'UNKNOWN',\n  WEB_RESOURCE = 'WEB RESOURCE',\n}\n\nexport type FreeTextType =\n  | CommentType.DISRUPTION_PHENOTYPE\n  | CommentType.DOMAIN\n  | CommentType.FUNCTION\n  | CommentType.INDUCTION\n  | CommentType.MISCELLANEOUS\n  | CommentType.PATHWAY\n  | CommentType.PTM\n  | CommentType.SIMILARITY\n  | CommentType.SUBUNIT\n  | CommentType.TISSUE_SPECIFICITY\n  | CommentType.POLYMORPHISM;\n\nexport type TextWithEvidence = {\n  value: string;\n  evidences?: Evidence[];\n  id: string;\n};\n\nexport type FreeTextComment = {\n  commentType: FreeTextType;\n  texts?: TextWithEvidence[];\n  molecule?: string;\n};\n\nexport type AbsorptionComment = {\n  commentType: CommentType.BIOPHYSICOCHEMICAL_PROPERTIES;\n  absorption?: Absorption;\n};\n\nexport type KineticsComment = {\n  commentType: CommentType.BIOPHYSICOCHEMICAL_PROPERTIES;\n  kineticParameters?: KineticParameters;\n};\n\nexport type pHDependenceComment = {\n  commentType: CommentType.BIOPHYSICOCHEMICAL_PROPERTIES;\n  phDependence: {\n    texts: TextWithEvidence[];\n  };\n};\n\nexport type RedoxPotentialComment = {\n  commentType: CommentType.BIOPHYSICOCHEMICAL_PROPERTIES;\n  redoxPotential: {\n    texts: TextWithEvidence[];\n  };\n};\n\nexport type TemperatureDependenceComment = {\n  commentType: CommentType.BIOPHYSICOCHEMICAL_PROPERTIES;\n  temperatureDependence: {\n    texts: TextWithEvidence[];\n  };\n};\n\nexport type CatalyticActivityComment = {\n  commentType: CommentType.CATALYTIC_ACTIVITY;\n  reaction?: {\n    name: string;\n    reactionCrossReferences?: { database: string; id: string }[];\n    ecNumber: string;\n    evidences?: Evidence[];\n  };\n  physiologicalReactions?: PhysiologicalReaction[];\n};\n\nexport enum PhysiologicalReactionDirection {\n  LeftToRight = 'left-to-right',\n  RightToLeft = 'right-to-left',\n}\n\nexport type PhysiologicalReaction = {\n  directionType: PhysiologicalReactionDirection;\n  reactionCrossReference: { database: string; id: string };\n  evidences: Evidence[];\n};\n\nexport type Xref = {\n  database?: string;\n  id?: string;\n  properties?: { [key: string]: string };\n  additionalIds?: string[];\n  isoformId?: string;\n  implicit?: true;\n};\n\nexport type DiseaseType = {\n  diseaseId?: string;\n  diseaseAccession?: string;\n  acronym?: string;\n  description?: string;\n  diseaseCrossReference?: Xref;\n  evidences?: Evidence[];\n};\n\nexport type DiseaseComment = {\n  commentType: CommentType.DISEASE;\n  disease?: DiseaseType;\n  note?: { texts?: { value?: string }[] };\n};\n\nexport enum InteractionType {\n  SELF = 'SELF',\n  XENO = 'XENO',\n  BINARY = 'BINARY',\n  // Are there others?\n}\n\nexport type Interaction = {\n  numberOfExperiments: number;\n  type: InteractionType;\n  interactantOne: Interactant;\n  interactantTwo: Interactant;\n};\n\nexport type InteractionComment = {\n  commentType: CommentType.INTERACTION;\n  interactions: Interaction[];\n};\n\nexport type Isoform = {\n  name: { value: string };\n  isoformSequenceStatus: string;\n  isoformIds: string[];\n  synonyms: { value: string }[];\n  note?: { texts: TextWithEvidence[] };\n  sequenceIds: string[];\n  varSeqs: FeatureData;\n};\n\nexport type AlternativeProductsComment = {\n  commentType: CommentType.ALTERNATIVE_PRODUCTS;\n  isoforms: Isoform[];\n  note?: { texts: TextWithEvidence[] };\n  events: string[];\n};\n\nexport type SequenceCautionComment = {\n  commentType: CommentType.SEQUENCE_CAUTION;\n  sequenceCautionType: string;\n  sequence: string;\n  note?: string;\n  evidences?: Evidence[];\n};\n\nexport type MassSpectrometryComment = {\n  commentType: CommentType.MASS_SPECTROMETRY;\n  molecule?: string;\n  method?: string;\n  note?: string;\n  molWeight: number;\n  molWeightError: number;\n  evidences: Evidence[];\n};\n\nexport type RNAEditingComment = {\n  commentType: CommentType.RNA_EDITING;\n  locationType?: string;\n  positions: { position: number; evidences: Evidence[] }[];\n  note?: { texts: TextWithEvidence[] };\n};\n\nexport type SubcellularLocationComment = {\n  commentType: CommentType.SUBCELLULAR_LOCATION;\n  molecule?: string;\n  note?: { texts: TextWithEvidence[] };\n  subcellularLocations?: {\n    location: TextWithEvidence;\n    topology?: TextWithEvidence;\n    orientation?: TextWithEvidence;\n  }[];\n};\n\nexport type WebResourceComment = {\n  commentType: CommentType.WEB_RESOURCE;\n  note?: string;\n  resourceName: string;\n  resourceUrl: string;\n};\n\ntype Comment =\n  | FreeTextComment\n  | CatalyticActivityComment\n  | DiseaseComment\n  | InteractionComment\n  | AlternativeProductsComment\n  | SequenceCautionComment\n  | SubcellularLocationComment\n  | MassSpectrometryComment\n  | RNAEditingComment\n  | AbsorptionComment\n  | KineticsComment\n  | CofactorComment\n  | pHDependenceComment\n  | RedoxPotentialComment\n  | TemperatureDependenceComment\n  | SubcellularLocationComment\n  | WebResourceComment;\n\nexport default Comment;\n","export type Evidence = {\n  evidenceCode: string; // TODO this needs to be an ECO instead of string\n  source?: string;\n  id?: string;\n};\n\nexport type ValueWithEvidence = {\n  value: string;\n  evidences: Evidence[];\n};\n\nexport enum PropertyKey {\n  AllergenName = 'AllergenName',\n  Chains = 'Chains',\n  Component = 'Component',\n  Description = 'Description',\n  Disease = 'Disease',\n  EntryName = 'EntryName',\n  ExpressionPatterns = 'ExpressionPatterns',\n  FamilyName = 'FamilyName',\n  Fingerprint = 'Fingerprint',\n  GeneDesignation = 'GeneDesignation',\n  GeneId = 'GeneId',\n  GeneName = 'GeneName',\n  GenericName = 'GenericName',\n  GoEvidenceType = 'GoEvidenceType',\n  GoTerm = 'GoTerm',\n  Interactions = 'Interactions',\n  MatchStatus = 'MatchStatus',\n  Method = 'Method',\n  MoleculeType = 'MoleculeType',\n  NucleotideSequenceId = 'NucleotideSequenceId',\n  OrganismId = 'OrganismId',\n  OrganismName = 'OrganismName',\n  PathwayName = 'PathwayName',\n  Project = 'Project',\n  ProteinId = 'ProteinId',\n  RectionId = 'RectionId',\n  Resolution = 'Resolution',\n  Status = 'Status',\n  ToxinName = 'ToxinName',\n  ToxonomicScope = 'ToxonomicScope',\n  Type = 'Type',\n}\n\nexport type Property = {\n  key?: PropertyKey;\n  value?: string;\n};\n","import React, { Fragment, FC } from 'react';\nimport { v1 } from 'uuid';\nimport idx from 'idx';\nimport { sortBy } from 'lodash-es';\nimport { InfoList, ExternalLink, ExpandableList } from 'franklin-sites';\nimport {\n  databaseCategoryToString,\n  databaseToDatabaseInfo,\n  viewProteinLinkDatabases,\n} from '../../config/database';\nimport {\n  XrefUIModel,\n  XrefsGoupedByDatabase,\n  partitionStructureDatabases,\n} from '../../utils/xrefUtils';\nimport { Xref } from '../../types/commentTypes';\nimport { PropertyKey } from '../../types/modelTypes';\nimport {\n  DatabaseInfoPoint,\n  AttributesItem,\n  DatabaseCategory,\n} from '../../types/databaseRefs';\nimport PDBView from './PDBView';\nimport EMBLXrefProperties from '../../config/emblXrefPropertiesData.json';\nimport externalUrls from '../../config/externalUrls';\n\nexport const processUrlTemplate = (\n  urlTemplate: string,\n  params: { [key: string]: string }\n) => {\n  let url = urlTemplate;\n  Object.entries(params).forEach(([param, value]) => {\n    url = url.replace(new RegExp(`%${param}`, 'g'), value);\n  });\n  return url;\n};\n\nexport const getDatabaseInfoAttribute = (\n  attributes: AttributesItem[],\n  name: string\n) => attributes.find(({ name: n }) => n === name);\n\nconst formatSuffixWithCount = (prefix: string, number: string) => {\n  const count = parseInt(number, 10);\n  if (count <= 0) {\n    return '';\n  }\n  return ` ${count} ${prefix}${count > 1 ? 's' : ''}`;\n};\n\nexport const getPropertyString = (key?: string, value?: string) => {\n  if (!value || value === '-') {\n    return '';\n  }\n  if (key === PropertyKey.MatchStatus) {\n    return formatSuffixWithCount('hit', value);\n  }\n  if (key === PropertyKey.Interactions) {\n    return formatSuffixWithCount('interactor', value);\n  }\n  return value;\n};\n\nexport const getPropertyLink = (\n  databaseInfo: DatabaseInfoPoint,\n  property: PropertyKey,\n  xref: Xref\n) => {\n  const { attributes } = databaseInfo;\n  if (!attributes) {\n    return null;\n  }\n  const attribute = getDatabaseInfoAttribute(attributes, property);\n  const { properties } = xref;\n  if (!properties) {\n    return null;\n  }\n  const id = properties[property];\n  if (!id || !attribute || !attribute.uriLink) {\n    return null;\n  }\n  const url = processUrlTemplate(attribute.uriLink, { [property]: id });\n  return (\n    <ExternalLink key={url} url={url}>\n      {id}\n    </ExternalLink>\n  );\n};\n\ntype XRefProps = {\n  database: string;\n  xref: Xref;\n  primaryAccession?: string;\n  crc64?: string;\n};\n\nconst EMBLXref: FC<{\n  databaseInfo: DatabaseInfoPoint;\n  params: { [key: string]: string };\n  id: string | undefined;\n  xref: Xref;\n  isoformNode?: JSX.Element;\n}> = ({ databaseInfo, params, id, xref, isoformNode }) => {\n  // M28638 (EMBL|GenBank|DDBJ)\n  const genBankInfo = databaseToDatabaseInfo.GenBank;\n  const ddbjInfo = databaseToDatabaseInfo.DDBJ;\n  const { properties, additionalIds } = xref;\n  if (!genBankInfo || !ddbjInfo) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'GenBank or DDBJ database information not found in drlineconiguration'\n    );\n  }\n  return (\n    <Fragment>\n      (\n      <ExternalLink url={processUrlTemplate(databaseInfo.uriLink, params)}>\n        EMBL\n      </ExternalLink>\n      {' | '}\n      <ExternalLink url={processUrlTemplate(genBankInfo.uriLink, params)}>\n        GenBank\n      </ExternalLink>\n      {' | '}\n      <ExternalLink url={processUrlTemplate(ddbjInfo.uriLink, params)}>\n        DDBJ\n      </ExternalLink>\n      {') '}\n      {id && <ExternalLink url={externalUrls.ENA(id)}>{id}</ExternalLink>}\n      {additionalIds &&\n        additionalIds.map(additionalId => (\n          <ExternalLink url={externalUrls.ENA(additionalId)} key={additionalId}>\n            {additionalId}\n          </ExternalLink>\n        ))}\n      {properties &&\n        properties.MoleculeType &&\n        `${\n          EMBLXrefProperties[\n            properties.MoleculeType as keyof typeof EMBLXrefProperties\n          ]\n        }: `}\n      {properties &&\n        properties.ProteinId &&\n        properties.ProteinId !== '-' &&\n        getPropertyLink(databaseInfo, PropertyKey.ProteinId, xref)}\n      {properties &&\n        properties.Status &&\n        EMBLXrefProperties[\n          properties.Status as keyof typeof EMBLXrefProperties\n        ]}\n      {isoformNode}\n    </Fragment>\n  );\n};\n\nexport const XRef: FC<XRefProps> = ({\n  database,\n  xref,\n  primaryAccession,\n  crc64,\n}): JSX.Element | null => {\n  const databaseInfo = databaseToDatabaseInfo[database];\n  const { properties, isoformId, id, database: databaseType } = xref;\n  const { uriLink, implicit } = databaseInfo;\n  if (!database || !primaryAccession) {\n    return null;\n  }\n  let propertiesNode;\n  if (properties && !implicit) {\n    propertiesNode = Object.keys(properties).map(key =>\n      [PropertyKey.ProteinId, PropertyKey.GeneId].includes(key as PropertyKey)\n        ? getPropertyLink(databaseInfo, key as PropertyKey, xref)\n        : getPropertyString(key, properties[key])\n    );\n  }\n\n  let isoformNode;\n  if (isoformId) {\n    isoformNode = (\n      <Fragment>\n        [<a href={`#${isoformId}`}>{isoformId}</a>]\n      </Fragment>\n    );\n  }\n\n  const params: { [key: string]: string } = {\n    primaryAccession,\n    ...properties,\n  };\n\n  if (id) {\n    params.id = id;\n  }\n  if (crc64) {\n    params.crc64 = crc64;\n  }\n\n  if (database === 'EMBL') {\n    return (\n      <EMBLXref\n        databaseInfo={databaseInfo}\n        params={params}\n        id={id}\n        xref={xref}\n        isoformNode={isoformNode}\n      />\n    );\n  }\n  let text;\n  if (implicit) {\n    text =\n      databaseType === 'SWISS-MODEL-Workspace'\n        ? 'Submit a new modelling project...'\n        : 'Search...';\n  } else {\n    text = id;\n  }\n\n  return (\n    <Fragment>\n      <ExternalLink url={processUrlTemplate(uriLink, params)}>\n        {text}\n      </ExternalLink>{' '}\n      {propertiesNode} {isoformNode}\n    </Fragment>\n  );\n};\n\nexport const DatabaseList: FC<{\n  xrefsGoupedByDatabase: XrefsGoupedByDatabase;\n  primaryAccession: string;\n  crc64?: string;\n}> = ({\n  xrefsGoupedByDatabase: { database, xrefs },\n  primaryAccession,\n  crc64,\n}) => {\n  // This step is needed as some databases (eg InterPro) have an additional link:\n  // \"View protein in InterPro\" at the top of the xref links.\n  let viewItem;\n  const viewLink = viewProteinLinkDatabases.get(database);\n  if (viewLink) {\n    viewItem = [\n      {\n        id: v1(),\n        content: (\n          <ExternalLink\n            key={v1()}\n            url={viewLink(primaryAccession)}\n          >{`View protein in ${database}`}</ExternalLink>\n        ),\n      },\n    ];\n  }\n  const xrefItems = xrefs.map((xref): { id: string; content: JSX.Element } => ({\n    id: v1(),\n    content: (\n      <XRef\n        database={database}\n        xref={xref}\n        primaryAccession={primaryAccession}\n        crc64={crc64}\n      />\n    ),\n  }));\n  return (\n    <ExpandableList descriptionString={`${database} links`}>\n      {viewItem ? viewItem.concat(xrefItems) : xrefItems}\n    </ExpandableList>\n  );\n};\n\ntype StructureXRefsGroupedByCategoryProps = {\n  databases: XrefsGoupedByDatabase[];\n  primaryAccession: string;\n  crc64?: string;\n};\n\nconst StructureXRefsGroupedByCategory: FC<StructureXRefsGroupedByCategoryProps> = ({\n  databases,\n  primaryAccession,\n  crc64,\n}): JSX.Element => {\n  const { PDBDatabase, otherStructureDatabases } = partitionStructureDatabases(\n    databases\n  );\n  let PDBViewNode;\n  if (PDBDatabase && PDBDatabase.xrefs.length) {\n    PDBViewNode = <PDBView xrefs={PDBDatabase.xrefs} noStructure />;\n  }\n  return (\n    <Fragment>\n      {PDBViewNode}\n      {otherStructureDatabases && otherStructureDatabases.length && (\n        <XRefsGroupedByCategory\n          databases={otherStructureDatabases}\n          primaryAccession={primaryAccession}\n          crc64={crc64}\n        />\n      )}\n    </Fragment>\n  );\n};\n\ntype XRefsGroupedByCategoryProps = {\n  databases: XrefsGoupedByDatabase[];\n  primaryAccession: string;\n  crc64?: string;\n};\n\nconst XRefsGroupedByCategory: FC<XRefsGroupedByCategoryProps> = ({\n  databases,\n  primaryAccession,\n  crc64,\n}): JSX.Element => {\n  const infoData = sortBy(databases, ({ database }) => [\n    idx(databaseToDatabaseInfo, o => o[database].implicit),\n    database,\n  ]).map((database): {\n    title: string;\n    content: JSX.Element;\n  } => {\n    const databaseInfo = databaseToDatabaseInfo[database.database];\n    return {\n      title: databaseInfo.displayName,\n      content: (\n        <DatabaseList\n          xrefsGoupedByDatabase={database}\n          primaryAccession={primaryAccession}\n          crc64={crc64}\n        />\n      ),\n    };\n  });\n  return <InfoList infoData={infoData} columns />;\n};\n\ntype XRefViewProps = {\n  xrefs: XrefUIModel[];\n  primaryAccession: string;\n  crc64?: string;\n};\n\nconst XRefView: FC<XRefViewProps> = ({\n  xrefs,\n  primaryAccession,\n  crc64,\n}): JSX.Element | null => {\n  if (!xrefs) {\n    return null;\n  }\n  const nodes = xrefs.map(\n    ({ databases, category }): JSX.Element => {\n      const xrefsNode =\n        category === DatabaseCategory.STRUCTURE ? (\n          <StructureXRefsGroupedByCategory\n            databases={databases}\n            primaryAccession={primaryAccession}\n            crc64={crc64}\n          />\n        ) : (\n          <XRefsGroupedByCategory\n            databases={databases}\n            primaryAccession={primaryAccession}\n            crc64={crc64}\n          />\n        );\n      let title;\n      if (category && databaseCategoryToString[category]) {\n        title = databaseCategoryToString[category];\n      }\n      return (\n        <Fragment key={v1()}>\n          <h3>{title}</h3>\n          {xrefsNode}\n        </Fragment>\n      );\n    }\n  );\n  return <Fragment>{nodes}</Fragment>;\n};\n\nexport default XRefView;\n","import { uniq } from 'lodash-es';\nimport UniProtKBEntryConfig from '../config/UniProtEntryConfig';\nimport { UniProtkbUIModel } from '../adapters/uniProtkbConverter';\nimport { GeneNamesData } from '../adapters/namesAndTaxonomyConverter';\nimport { Property, PropertyKey } from '../types/modelTypes';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const hasContent = (obj: any) => {\n  return Object.values(obj).some((val) => {\n    if (Array.isArray(val)) {\n      const valArray = val as any[];\n      return valArray.length > 0;\n    }\n    if (typeof val === 'object' && val) {\n      if (val instanceof Map) {\n        return Array.from(val.values()).some(\n          (value) => value && value.length > 0\n        );\n      }\n      return Object.values(val).length > 0;\n    }\n    return false;\n  });\n};\n\nexport const hasExternalLinks = (transformedData: UniProtkbUIModel) =>\n  UniProtKBEntryConfig.some(({ name }) => {\n    const data = transformedData[name];\n    return typeof data.xrefData && data.xrefData.length > 0;\n  });\n\nexport const flattenGeneNameData = (geneNamesData: GeneNamesData) => {\n  const geneNames: string[] = [];\n  geneNamesData.forEach(\n    ({ geneName, synonyms = [], orfNames = [], orderedLocusNames = [] }) => {\n      if (geneName) {\n        geneNames.push(geneName.value);\n      }\n      [synonyms, orfNames, orderedLocusNames].forEach((names) => {\n        names.forEach(({ value }) => {\n          geneNames.push(value);\n        });\n      });\n    }\n  );\n  return uniq(geneNames);\n};\n\nexport const transfromProperties = (properties: Property[]) => {\n  const o: { [key: string]: string } = {};\n  properties.forEach(({ key, value }) => {\n    if (key && value) {\n      o[key] = value;\n    }\n  });\n  return o;\n};\n\n// This function is useful because our API returns arrays of objects of shape: { key: x, value: y}\nexport const getPropertyValue = (\n  properties: Property[],\n  propertyKey: PropertyKey\n) => {\n  const found = properties.find(({ key }) => key === propertyKey);\n  return found ? found.value : null;\n};\n","import { Evidence } from '../types/modelTypes';\n\nexport enum ECO {\n  EXP = 269,\n  HTP = 6056,\n  IDA = 314,\n  HDA = 7005,\n  IPI = 353,\n  IMP = 315,\n  HMP = 7001,\n  IGI = 316,\n  HGI = 7003,\n  IEP = 270,\n  HEP = 7007,\n  ISS = 250,\n  ISO = 266,\n  ISA = 247,\n  ISM = 255,\n  IGC = 317,\n  IBA = 318,\n  IBD = 319,\n  IKR = 320,\n  IRD = 321,\n  RCA = 245,\n  TAS = 304,\n  NAS = 303,\n  IC = 305,\n  ND = 307,\n  IEA = 501,\n  MI = 312,\n  AI = 313,\n  AA = 256,\n  MIXM = 244,\n  MIXA = 213,\n  SGNM = 260,\n  SGNA = 259,\n}\n\nenum labels {\n  IMPORTED = 'Imported',\n  COMBINED = 'Combined sources',\n  INTERPRO = 'InterPro annotation',\n  SIMILARITY = 'By similarity',\n  CURATED = 'Curated',\n  PUBLICATION = 'publication',\n  AA = 'automatic annotation',\n  SEQ_ANA = 'Sequence analysis',\n}\n\nexport type EvidenceData = {\n  manual: boolean;\n  label: string;\n  description: string;\n  labelRender?: Function;\n};\n\nconst publicationCountRenderer = (evidences: Evidence[]) => {\n  const { length } = evidences;\n  return length > 0\n    ? `${length} ${labels.PUBLICATION}${length > 1 ? 's' : ''}`\n    : labels.CURATED;\n};\n\nconst rulesCountRenderer = (evidences: Evidence[]) => {\n  const { length } = evidences;\n  const isSAMPhobius = evidences.some(\n    evidence =>\n      typeof evidence.source !== 'undefined' &&\n      evidence.source === 'SAM' &&\n      evidence.id === 'Phobius'\n  );\n  if (isSAMPhobius) {\n    return labels.SEQ_ANA;\n  }\n  return `${length} ${labels.AA}${length > 1 ? 's' : ''}`;\n};\n\nexport const getEvidenceCodeData = (eco: string): EvidenceData | null => {\n  const num = Number(eco.split(':')[1]);\n  switch (num) {\n    case ECO.EXP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from experiment',\n        labelRender: publicationCountRenderer,\n      };\n    case ECO.HTP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from high throughput experiment',\n      };\n    case ECO.IDA:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from direct assay',\n      };\n    case ECO.HDA:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from high throughput direct assay',\n      };\n    case ECO.IPI:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from physical interaction',\n      };\n    case ECO.IMP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from mutant phenotype',\n      };\n    case ECO.HMP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from high throughput mutant phenotype',\n      };\n    case ECO.IGI:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from genetic interaction',\n      };\n    case ECO.HGI:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from high throughput genetic interaction',\n      };\n    case ECO.IEP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from expression pattern',\n      };\n    case ECO.HEP:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from high throughput expression pattern',\n      };\n    case ECO.ISS:\n      return {\n        manual: true,\n        label: 'Manual assertion inferred from sequence similarity',\n        description: 'Inferred from sequence or structural similarity',\n        labelRender: () => labels.SIMILARITY,\n      };\n    case ECO.ISO:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from sequence orthology',\n      };\n    case ECO.ISA:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from sequence alignment',\n      };\n    case ECO.ISM:\n      return {\n        manual: true,\n        label: 'Automatic assertion according to rules',\n        description: 'Inferred from sequence model',\n        labelRender: rulesCountRenderer,\n      };\n    case ECO.IGC:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from genomic context',\n      };\n    case ECO.IBA:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from biological aspect of ancestor',\n      };\n    case ECO.IBD:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from biological aspect of descendant',\n      };\n    case ECO.IKR:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from key residues',\n      };\n    case ECO.IRD:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from rapid divergence',\n      };\n    case ECO.RCA:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from reviewed computational analysis',\n      };\n    case ECO.TAS:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'Traceable author statement',\n      };\n    case ECO.NAS:\n      return {\n        manual: true,\n        label: 'Manual assertion based on opinion',\n        description: 'Non-traceable author statement',\n        labelRender: publicationCountRenderer,\n      };\n    case ECO.IC:\n      return {\n        manual: true,\n        label: 'Manual assertion inferred from experiment',\n        description: 'Inferred by curator',\n        labelRender: (evidences: Evidence[]) => {\n          return evidences.some(evidence => evidence.source)\n            ? publicationCountRenderer(evidences)\n            : 'Curated';\n        },\n      };\n    case ECO.ND:\n      return {\n        manual: true,\n        label: 'Manual assertion based on experiment',\n        description: 'No biological data available',\n      };\n    case ECO.IEA:\n      return {\n        manual: false,\n        label: 'Manual assertion based on experiment',\n        description: 'Inferred from electronic annotation',\n      };\n    case ECO.MI:\n      return {\n        manual: true,\n        label: 'Manual assertion inferred from database entries',\n        description: 'Manually imported',\n        labelRender: () => labels.IMPORTED,\n      };\n    case ECO.AI:\n      return {\n        manual: false,\n        label: 'Automatic assertion inferred from database entries',\n        description: 'Automatically imported',\n        labelRender: () => labels.IMPORTED,\n      };\n    case ECO.AA:\n      return {\n        manual: false,\n        label: 'Automatic assertion according to rules',\n        description: 'Automatically inferred from sequence model',\n        labelRender: rulesCountRenderer,\n      };\n    case ECO.MIXM:\n      return {\n        manual: true,\n        label:\n          'Manual assertion inferred from combination of experimental and computational evidence',\n        description: 'Combinatorial evidence used in manual assertion',\n        labelRender: () => labels.COMBINED,\n      };\n    case ECO.MIXA:\n      return {\n        manual: false,\n        label:\n          'Automatic assertion inferred from combination of experimental and computational evidence',\n        description: 'Combinatorial evidence used in automatic assertion',\n        labelRender: () => labels.COMBINED,\n      };\n    case ECO.SGNM:\n      return {\n        manual: true,\n        label: 'Manual assertion inferred from signature match',\n        description:\n          'Match to InterPro member signature evidence used in manual assertion',\n      };\n    case ECO.SGNA:\n      return {\n        manual: false,\n        label: 'Automatic assertion inferred from signature match',\n        description:\n          'Match to InterPro member signature evidence used in automatic assertion',\n        labelRender: () => labels.INTERPRO,\n      };\n    default:\n      return null;\n  }\n};\n","import React, { FC, Fragment } from 'react';\nimport { Publication, Loader, Message } from 'franklin-sites';\nimport useDataApi from '../../../shared/hooks/useDataApi';\nimport { getPublicationsURL } from '../../config/apiUrls';\nimport { MessageLevel } from '../../../messages/types/messagesTypes';\nimport { LiteratureAPI } from '../../types/literatureTypes';\nimport formatCitationData from '../../adapters/literatureConverter';\n\nconst UniProtKBEntryPublications: FC<{\n  pubmedIds: string[];\n}> = ({ pubmedIds }) => {\n  const url = getPublicationsURL(pubmedIds);\n  const { loading, data, status, error } = useDataApi(url);\n\n  if (error) {\n    return (\n      <Message level={MessageLevel.FAILURE}>\n        {status}: {error.message}\n      </Message>\n    );\n  }\n\n  if (loading || !data) {\n    return <Loader />;\n  }\n\n  const { results }: { results: LiteratureAPI[] } = data;\n  return (\n    <Fragment>\n      {results &&\n        results\n          .map(literatureItem => ({\n            ...literatureItem,\n            ...formatCitationData(literatureItem.citation),\n          }))\n          .map(({ citation, statistics, pubmedId, journalInfo }) => (\n            <Publication\n              title={citation.title}\n              authors={citation.authors}\n              key={`${citation.title}-${citation.citationType}-${citation.journal}`}\n              pubmedId={pubmedId}\n              statistics={statistics}\n              journalInfo={journalInfo}\n            />\n          ))}\n    </Fragment>\n  );\n};\n\nexport default UniProtKBEntryPublications;\n","import React, { FC, Fragment } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { groupBy } from 'lodash-es';\nimport { ExternalLink, EvidenceTag, EvidenceTagIcon } from 'franklin-sites';\nimport { html } from 'lit-html';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { getEvidenceCodeData, EvidenceData } from '../../config/evidenceCodes';\nimport { Evidence } from '../../types/modelTypes';\nimport UniProtKBEntryPublications from './UniProtKBEntryPublications';\nimport { processUrlTemplate } from './XRefView';\nimport evidenceUrls from '../../config/evidenceUrls';\n\nenum evidenceTagSourceTypes {\n  PUBMED = 'PubMed',\n  UNIPROT = 'UniProtKB',\n  PROSITE_PRORULE = 'PROSITE-ProRule',\n}\n\nexport const UniProtEvidenceTagContent: FC<{\n  evidenceData: EvidenceData;\n  evidences: Evidence[] | undefined;\n}> = ({ evidenceData, evidences }) => {\n  if (!evidences || evidences.length === 0) {\n    return null;\n  }\n  const groupedEvidences =\n    evidences && groupBy(evidences, (evidence: Evidence) => evidence.source);\n\n  const {\n    [evidenceTagSourceTypes.PUBMED]: publicationReferences,\n    ...groupedEvidencesWithoutPubs\n  } = groupedEvidences;\n\n  return (\n    <div>\n      <h5>{evidenceData.label}</h5>\n      {publicationReferences && (\n        <UniProtKBEntryPublications\n          pubmedIds={\n            publicationReferences\n              .map((reference: Evidence) => reference.id)\n              .filter((id?: string) => id) as string[]\n          }\n        />\n      )}\n      {Object.entries(groupedEvidencesWithoutPubs).map(\n        ([key, mappedEvidences]) => (\n          <Fragment key={key}>\n            {mappedEvidences.map(({ id }: Evidence) => {\n              if (!id) {\n                return null;\n              }\n              const urlPattern = evidenceUrls[key];\n              return urlPattern ? (\n                <ExternalLink\n                  url={processUrlTemplate(urlPattern, { value: id })}\n                  key={id}\n                >\n                  {id}\n                </ExternalLink>\n              ) : (\n                <Fragment key={id}>{id}</Fragment>\n              );\n            })}\n          </Fragment>\n        )\n      )}\n    </div>\n  );\n};\n\nconst UniProtKBEvidenceTag: FC<{ evidences: Evidence[] }> = ({ evidences }) => {\n  const evidenceObj = groupBy(\n    evidences,\n    (evidence: Evidence) => evidence.evidenceCode\n  );\n  const evidenceTags = Object.entries(evidenceObj).map(\n    ([evidenceCode, references]) => {\n      const evidenceData = getEvidenceCodeData(evidenceCode);\n      if (!evidenceData) {\n        return null;\n      }\n      return (\n        <EvidenceTag\n          label={\n            evidenceData.labelRender\n              ? evidenceData.labelRender(references)\n              : evidenceData.label\n          }\n          className={\n            evidenceData.manual\n              ? 'svg-colour-reviewed'\n              : 'svg-colour-unreviewed'\n          }\n          key={evidenceCode}\n        >\n          <UniProtEvidenceTagContent\n            evidenceData={evidenceData}\n            evidences={references}\n          />\n        </EvidenceTag>\n      );\n    }\n  );\n  return <Fragment>{evidenceTags}</Fragment>;\n};\n\nexport const UniProtProtvistaEvidenceTag = (\n  evidences: Evidence[],\n  callback: Function\n) => {\n  const size = 12;\n  const evidenceObj = groupBy(\n    evidences,\n    (evidence: Evidence) => evidence.evidenceCode\n  );\n  const evidenceTags = Object.entries(evidenceObj).map(\n    ([evidenceCode, references]) => {\n      if (!evidenceCode) {\n        return html``;\n      }\n      const evidenceData = getEvidenceCodeData(evidenceCode);\n      if (!evidenceData) {\n        // Unlike React, lit-html always expects an html template, not null.\n        return html``;\n      }\n      return html`\n        <span\n          class=${`evidence-tag ${\n            evidenceData.manual\n              ? 'svg-colour-reviewed'\n              : 'svg-colour-unreviewed'\n          }`}\n          @click=${() => callback(evidenceData, references)}\n        >\n          ${unsafeHTML(\n            ReactDOMServer.renderToStaticMarkup(\n              <EvidenceTagIcon width={size} height={size} />\n            )\n          )}\n          ${evidenceData.labelRender\n            ? evidenceData.labelRender(references)\n            : evidenceData.label}</span\n        >\n      `;\n    }\n  );\n  return evidenceTags;\n};\n\nexport default UniProtKBEvidenceTag;\n","const evidenceUrls: { [key: string]: string } = {\n  Araport: 'https://apps.araport.org/thalemine/portal.do?externalids=%value',\n  CGD: 'http://www.candidagenome.org/cgi-bin/locus.pl?dbid=%value',\n  EMBL: 'https://www.ebi.ac.uk/ena/data/view/%value',\n  EPD:\n    'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/proteomics_mapping/README',\n  Ensembl: 'https://www.ensembl.org/id/%value',\n  EnsemblBacteria: 'http://www.ensemblgenomes.org/id/%value',\n  EnsemblFungi: 'http://www.ensemblgenomes.org/id/%value',\n  EnsemblMetazoa: 'http://www.ensemblgenomes.org/id/%value',\n  EnsemblPlants: 'http://www.ensemblgenomes.org/id/%value',\n  EnsemblProtists: 'http://www.ensemblgenomes.org/id/%value',\n  FlyBase: 'http://flybase.org/reports/%value.html',\n  'HAMAP-Rule': 'https://www.uniprot.org/unirule/%value',\n  HGNC: 'https://www.genenames.org/cgi-bin/gene_symbol_report?hgnc_id=%value',\n  MGI: 'http://www.informatics.jax.org/marker/%value',\n  MaxQB:\n    'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/proteomics_mapping/README',\n  PDB: 'https://www.ebi.ac.uk/pdbe-srv/view/entry/%value',\n  PIR: 'http://pir.georgetown.edu/cgi-bin/nbrfget?uid=%value',\n  PIRNR: 'https://www.uniprot.org/unirule/%value',\n  PIRSR: 'https://www.uniprot.org/unirule/%value',\n  PROSITE: 'https://prosite.expasy.org/doc/%value',\n  'PROSITE-ProRule': 'https://prosite.expasy.org/unirule/%value',\n  PeptideAtlas:\n    'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/proteomics_mapping/README',\n  Pfam: 'http://pfam.xfam.org/family/%value',\n  PomBase: 'https://www.pombase.org/spombe/result/%value',\n  Proteomes: 'https://www.uniprot.org/proteomes/%value',\n  PubMed: 'https://www.uniprot.org/citations/%value',\n  RGD: 'http://rgd.mcw.edu/tools/genes/genes_view.cgi?id=%value',\n  RefSeq: 'https://www.ncbi.nlm.nih.gov/protein/%value',\n  RuleBase: 'https://www.uniprot.org/unirule/%value',\n  SAAS: 'https://www.uniprot.org/saas/%value',\n  SAM: 'https://www.uniprot.org/help/sam',\n  SGD: 'https://www.yeastgenome.org/locus/%value',\n  SMART: 'http://smart.embl.de/smart/do_annotation.pl?DOMAIN=%value',\n  UniRule: 'https://www.uniprot.org/unirule/%value',\n  VGNC:\n    'https://vertebrate.genenames.org/data/gene-symbol-report/#!/vgnc_id/%value',\n  VectorBase: 'https://www.vectorbase.org/id/%value',\n  WBParaSite: 'http://parasite.wormbase.org/id/%value',\n  WormBase: 'https://wormbase.org/species/c_elegans/cds/%value',\n  Xenbase:\n    'http://www.xenbase.org/gene/showgene.do?method=display&geneId=value',\n  ZFIN: 'http://zfin.org/cgi-bin/webdriver?MIval=aa-markerview.apg&OID=%value',\n  UniProtKB: 'https://www.uniprot.org/uniprot/%value',\n  Reference: '',\n  dictyBase: 'http://dictybase.org/gene/%value',\n  MIM: 'http://www.omim.org/entry/%value',\n  EcoGene: 'http://www.ecogene.org/geneInfo.php?eg_id=%value',\n  TubercuList: 'https://mycobrowser.epfl.ch/genes/%value',\n  'MobiDB-lite': 'https://www.uniprot.org/help/MobiDB-lite',\n  ProteomicsDB:\n    'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/proteomics_mapping/README',\n};\n\nexport default evidenceUrls;\n","import React, { Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport { FreeTextComment, TextWithEvidence } from '../../types/commentTypes';\n\ntype FreeTextProps = {\n  comments?: FreeTextComment[];\n  title?: string;\n};\n\nexport const TextView: React.FC<{ comments: TextWithEvidence[] }> = ({\n  comments,\n}) => (\n  <section className=\"text-block\" key={v1()}>\n    {comments.map(comment => (\n      <Fragment key={v1()}>\n        {comment.value}\n        {comment.evidences && (\n          <UniProtKBEvidenceTag evidences={comment.evidences} />\n        )}\n      </Fragment>\n    ))}\n  </section>\n);\n\nconst FreeTextView: React.FC<FreeTextProps> = ({ comments, title }) => {\n  if (!comments || comments.length <= 0) {\n    return null;\n  }\n  const freeTextData = comments.map(\n    item =>\n      item.texts && (\n        <Fragment key={v1()}>\n          {item.molecule && <h5>{item.molecule}</h5>}\n          <TextView comments={item.texts} />\n        </Fragment>\n      )\n  );\n\n  return (\n    <Fragment>\n      {title && <h3 style={{ textTransform: 'capitalize' }}>{title}</h3>}\n      {freeTextData}\n    </Fragment>\n  );\n};\n\nexport default FreeTextView;\n","import React, { Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport { InfoList } from 'franklin-sites';\nimport { Keyword, KeywordUIModel } from '../../utils/KeywordsUtil';\n\ntype KeywordListProps = {\n  keywords: Keyword[];\n  idOnly?: boolean;\n};\n\ntype KeywordItempProps = {\n  id?: string;\n  value?: string;\n};\n\nexport const KeywordItem: React.FC<KeywordItempProps> = ({ id, value }) => {\n  if (!id || !value) {\n    return null;\n  }\n  return <a href={`//www.uniprot.org/keywords/${id}`}>{` #${value}`}</a>;\n};\n\nexport const KeywordList: React.FC<KeywordListProps> = ({\n  keywords,\n  idOnly = false,\n}) => {\n  if (!keywords) {\n    return null;\n  }\n  const nodes = keywords.map((keyword, index) => {\n    const { id, name } = keyword;\n    if (!id || !name) {\n      return null;\n    }\n    return (\n      <Fragment key={v1()}>\n        <KeywordItem id={id} value={idOnly ? id : name} />\n        {index < keywords.length - 1 && ' '}\n      </Fragment>\n    );\n  });\n\n  return <Fragment>{nodes}</Fragment>;\n};\n\nconst KeywordView: React.FC<{ keywords: KeywordUIModel[] }> = ({\n  keywords,\n}) => {\n  if (!keywords || keywords.length <= 0) {\n    return null;\n  }\n  const infoData = keywords.map((keywordCategory) => ({\n    title: keywordCategory.category,\n    content: <KeywordList keywords={keywordCategory.keywords} />,\n  }));\n  if (infoData.length === 0) {\n    return null;\n  }\n  return (\n    <Fragment>\n      <h3>Keywords</h3>\n      <InfoList infoData={infoData} />\n    </Fragment>\n  );\n};\n\nexport default KeywordView;\n","enum FeatureType {\n  INIT_MET = 'initiator methionine',\n  SIGNAL = 'signal peptide',\n  PROPEP = 'propeptide',\n  TRANSIT = 'transit peptide',\n  CHAIN = 'chain',\n  PEPTIDE = 'peptide',\n  TOPO_DOM = 'topological domain',\n  TRANSMEM = 'transmembrane region',\n  INTRAMEM = 'intramembrane region',\n  DOMAIN = 'Other domain of interest',\n  REPEAT = 'repeat',\n  CA_BIND = 'calcium-binding region',\n  ZN_FING = 'zinc finger region',\n  DNA_BIND = 'DNA-binding region',\n  NP_BINDL = 'Nucleotide-binding region',\n  REGION = 'region of interest',\n  COILED = 'coiled-coil region',\n  MOTIF = 'short sequence motif',\n  COMPBIAS = 'compositionally biased region',\n  ACT_SITE = 'active site',\n  METAL = 'metal ion-binding site',\n  BINDING = 'Other binding site',\n  SITE = 'Other site of interest',\n  NON_STD = 'non-standard amino acid',\n  MOD_RES = 'Post-translationally modified residue',\n  LIPID = 'lipid moiety-binding region',\n  CARBOHYD = 'glycosylation site',\n  DISULFID = 'disulfide bond',\n  CROSSLNK = 'cross-link',\n  VAR_SEQ = 'splice variant',\n  VARIANT = 'Sequence variation',\n  MUTAGEN = 'mutagenesis site',\n  UNSURE = 'Uncertainty in sequence',\n  CONFLICT = 'sequence conflict',\n  NON_CONS = 'non-consecutive residues',\n  NON_TER = 'non-terminal residue',\n  HELIX = 'helix',\n  TURN = 'turn',\n  STRAND = 'strand',\n}\n\nexport default FeatureType;\n","import idx from 'idx';\nimport { getXrefsForSection, XrefUIModel } from '../utils/xrefUtils';\nimport Comment, { CommentType, FreeTextComment } from '../types/commentTypes';\nimport {\n  getKeywordsForCategories,\n  KeywordUIModel,\n} from '../utils/KeywordsUtil';\nimport { FeatureData } from '../components/protein-data-views/FeaturesView';\nimport EntrySection from '../types/entrySection';\nimport KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nexport type UIModel = {\n  commentsData: Map<CommentType, Comment[]>;\n  keywordData: KeywordUIModel[];\n  featuresData: FeatureData;\n  xrefData: XrefUIModel[];\n};\n\nexport const convertSection = (\n  data: UniProtkbAPIModel,\n  sectionComments?: CommentType[],\n  sectionKeywords?: KeywordCategory[],\n  sectionFeatures?: FeatureType[],\n  section?: EntrySection\n) => {\n  const convertedData: UIModel = {\n    commentsData: new Map(),\n    keywordData: [],\n    featuresData: [],\n    xrefData: [],\n  };\n\n  const {\n    comments,\n    keywords,\n    features,\n    uniProtKBCrossReferences,\n    genes,\n    organism,\n    uniProtkbId,\n  } = data;\n  if (sectionComments && comments) {\n    sectionComments.forEach(commentType => {\n      convertedData.commentsData.set(\n        commentType,\n        comments.filter(comment => comment.commentType === commentType)\n      );\n    });\n  }\n  if (sectionKeywords && keywords) {\n    convertedData.keywordData = getKeywordsForCategories(\n      keywords,\n      sectionKeywords\n    );\n  }\n  if (sectionFeatures && features) {\n    convertedData.featuresData = features.filter(feature => {\n      return sectionFeatures.includes(feature.type);\n    });\n  }\n  if (section && uniProtKBCrossReferences) {\n    const commonName = idx(organism, o => o.commonName);\n    const ecNumbers = idx(\n      data,\n      o => o.proteinDescription.recommendedName.ecNumbers\n    );\n    // These are needed because the implicit database GPCRDB depends on the existence of a similarity\n    // comment with the text \"Belongs to the G-protein coupled receptor\"'],\n    const similarityComments = convertedData.commentsData.get(\n      CommentType.SIMILARITY\n    ) as FreeTextComment[];\n    convertedData.xrefData = getXrefsForSection(\n      uniProtKBCrossReferences,\n      section,\n      genes,\n      commonName,\n      similarityComments,\n      uniProtkbId,\n      ecNumbers\n    );\n  }\n  return convertedData;\n};\n","import { useEffect, useReducer } from 'react';\nimport axios, { AxiosResponse, AxiosError } from 'axios';\n\nimport fetchData from '../utils/fetchData';\n\ntype State = {\n  loading: boolean;\n  data?: AxiosResponse['data'];\n  status?: AxiosResponse['status'];\n  statusText?: AxiosResponse['statusText'];\n  headers?: AxiosResponse['headers'];\n  error?: AxiosError;\n  redirectedTo?: string;\n};\n\nenum ActionType {\n  INIT = 'INIT',\n  SUCCESS = 'SUCCESS',\n  ERROR = 'ERROR',\n}\n\ntype Action =\n  | { type: ActionType.INIT }\n  | { type: ActionType.SUCCESS; response?: AxiosResponse; originalURL?: string }\n  | { type: ActionType.ERROR; error: AxiosError };\n\n// eslint-disable-next-line consistent-return\nconst reducer = (state: State, action: Action): State => {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case ActionType.INIT:\n      return {\n        loading: true,\n      };\n    case ActionType.SUCCESS:\n      // eslint-disable-next-line no-case-declarations\n      const newState: State = {\n        loading: false,\n        data: action.response && action.response.data,\n        status: action.response && action.response.status,\n        statusText: action.response && action.response.statusText,\n        headers: action.response && action.response.headers,\n      };\n      if (\n        action.response &&\n        action.response.request.responseURL &&\n        action.response.request.responseURL !== action.originalURL\n      ) {\n        newState.redirectedTo = action.response.request.responseURL;\n      } else if (\n        // Issue with casing in axios-mock-adapter?\n        action.response &&\n        action.response.request.responseUrl &&\n        action.response.request.responseUrl !== action.originalURL\n      ) {\n        newState.redirectedTo = action.response.request.responseUrl;\n      }\n      return newState;\n    case ActionType.ERROR:\n      return {\n        loading: false,\n        status: action.error.response && action.error.response.status,\n        statusText: action.error.response && action.error.response.statusText,\n        headers: action.error.response && action.error.response.headers,\n        error: action.error,\n      };\n  }\n};\n\nconst useDataApi = (url?: string): State => {\n  const [state, dispatch] = useReducer(reducer, { loading: !!url });\n\n  useEffect(() => {\n    // need this variabe to ensure state updates don't occur when cancelled/unmounted\n    // https://github.com/facebook/react/issues/14369#issuecomment-468267798\n    let didCancel = false;\n\n    // we don't require a URL, we just don't need data anymore\n    // assume succes with no data\n    if (!url) {\n      dispatch({ type: ActionType.SUCCESS });\n      return;\n    }\n\n    dispatch({ type: ActionType.INIT });\n\n    // variables to handle cancellation\n    const source = axios.CancelToken.source();\n\n    // actual request\n    fetchData(url, undefined, source.token).then(\n      // handle ok\n      (response: AxiosResponse) => {\n        if (didCancel) return;\n        dispatch({ type: ActionType.SUCCESS, response, originalURL: url });\n      },\n      // catch error\n      (error: AxiosError) => {\n        if (axios.isCancel(error) || didCancel) return;\n        dispatch({ type: ActionType.ERROR, error });\n      }\n    );\n\n    // handle unmounting of the hook\n    // eslint-disable-next-line consistent-return\n    return () => {\n      source.cancel();\n      didCancel = true;\n    };\n  }, [url]);\n\n  return state;\n};\n\nexport default useDataApi;\n","import React, { Fragment, useCallback } from 'react';\nimport { html, TemplateResult } from 'lit-html';\nimport ProtvistaTrack from 'protvista-track';\nimport ProtvistaManager from 'protvista-manager';\nimport ProtvistaSequence from 'protvista-sequence';\nimport ProtvistaNavigation from 'protvista-navigation';\nimport { loadWebComponent } from '../../../shared/utils/utils';\nimport { Evidence } from '../../types/modelTypes';\nimport FeatureType from '../../types/featureType';\nimport { UniProtProtvistaEvidenceTag } from './UniProtKBEvidenceTag';\nimport FeaturesTableView, { FeaturesTableCallback } from './FeaturesTableView';\nimport { Xref } from '../../types/commentTypes';\n\nenum LocationModifier {\n  EXACT = 'EXACT',\n  OUTSIDE = 'OUTSIDE',\n  UNSURE = 'UNSURE',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype FeatureLocation = {\n  value: number;\n  modifier: LocationModifier;\n};\n\nexport type FeatureData = {\n  type: FeatureType;\n  featureId?: string;\n  description?: string;\n  location: {\n    start: FeatureLocation;\n    end: FeatureLocation;\n    sequence?: string;\n  };\n  alternativeSequence?: {\n    originalSequence?: string;\n    alternativeSequences: string[];\n  };\n  evidences?: Evidence[];\n  featureCrossReference?: Xref;\n}[];\n\nexport type ProtvistaFeature = {\n  accession?: string;\n  type: string;\n  description: string;\n  evidences: Evidence[];\n  start: number;\n  end: number;\n  startModifier: LocationModifier;\n  endModifier: LocationModifier;\n};\n\ntype FeatureProps = {\n  sequence?: string;\n  features: FeatureData;\n};\n\n// TODO: looks like this could be merged with ProtvistaFeature?\nexport type ProcessedFeature = {\n  accession: string | undefined;\n  start: number;\n  end: number;\n  startModifier: LocationModifier;\n  endModifier: LocationModifier;\n  type: FeatureType;\n  description: string | undefined;\n  evidences: Evidence[] | undefined;\n};\n\nconst processData = (data: FeatureData): ProcessedFeature[] =>\n  data.map(\n    (feature): ProcessedFeature => ({\n      accession: feature.featureId,\n      start: feature.location.start.value,\n      end: feature.location.end.value,\n      startModifier: feature.location.start.modifier,\n      endModifier: feature.location.end.modifier,\n      type: feature.type,\n      description: feature.description,\n      evidences: feature.evidences,\n    })\n  );\n\nconst FeaturesView: React.FC<FeatureProps> = ({\n  sequence,\n  features,\n}): JSX.Element | null => {\n  loadWebComponent('protvista-track', ProtvistaTrack);\n  loadWebComponent('protvista-manager', ProtvistaManager);\n  loadWebComponent('protvista-sequence', ProtvistaSequence);\n  loadWebComponent('protvista-navigation', ProtvistaNavigation);\n\n  const processedData = processData(features);\n\n  const getColumnConfig = (evidenceTagCallback: FeaturesTableCallback) => ({\n    type: {\n      label: 'Type',\n      resolver: (d: ProtvistaFeature): string => d.type,\n    },\n    positions: {\n      label: 'Positions',\n      resolver: (d: ProtvistaFeature): string =>\n        `${d.startModifier === LocationModifier.UNKNOWN ? '?' : d.start}-${\n          d.endModifier === LocationModifier.UNKNOWN ? '?' : d.end\n        }`,\n    },\n    description: {\n      label: 'Description',\n      resolver: (d: ProtvistaFeature): TemplateResult =>\n        html`\n          ${d.description}\n          ${d.evidences &&\n          UniProtProtvistaEvidenceTag(d.evidences, evidenceTagCallback)}\n        `,\n    },\n    featureId: {\n      label: 'ID',\n      resolver: (d: ProtvistaFeature) => (d.accession ? d.accession : '-'),\n    },\n  });\n\n  const setTrackData = useCallback(\n    (node): void => {\n      if (node) {\n        // eslint-disable-next-line no-param-reassign\n        node.data = processedData;\n      }\n    },\n    [processedData]\n  );\n\n  if (processedData.length === 0) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <h3>Features</h3>\n      <protvista-manager attributes=\"highlight displaystart displayend\">\n        {sequence && (\n          <Fragment>\n            <protvista-navigation length={sequence.length} />\n            <protvista-track\n              ref={setTrackData}\n              length={sequence.length}\n              layout=\"non-overlapping\"\n            />\n            <protvista-sequence\n              sequence={sequence}\n              length={sequence.length}\n              height=\"20\"\n            />\n          </Fragment>\n        )}\n        <FeaturesTableView\n          data={processedData}\n          getColumnConfig={getColumnConfig}\n        />\n      </protvista-manager>\n    </Fragment>\n  );\n};\n\nexport default FeaturesView;\n","export enum KeywordCategory {\n  BIOLOGICAL_PROCESS = 'Biological process',\n  CELLULAR_COMPONENT = 'Cellular component',\n  CODING_SEQUENCE_DIVERSITY = 'Coding sequence diversity',\n  DEVELOPMENTAL_STAGE = 'Developmental stage',\n  DISEASE = 'Disease',\n  DOMAIN = 'Domain',\n  LIGAND = 'Ligand',\n  MOLECULAR_FUNCTION = 'Molecular function',\n  PTM = 'PTM',\n  TECHNICAL_TERM = 'Technical term',\n}\n\nexport default KeywordCategory;\n","import joinUrl from 'url-join';\n\nconst externalUrls = {\n  IntAct: '//www.ebi.ac.uk/intact/',\n  QuickGO: (id: string) => `//www.ebi.ac.uk/QuickGO/term/${id}`,\n  NCBI: (id: number | string) =>\n    `https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?lvl=0&id=${id}`,\n  ENA: (id: string) => `//www.ebi.ac.uk/ena/data/view/${id}`,\n  InterPro: (id: string) => `https://www.ebi.ac.uk/interpro/protein/${id}`,\n  Pfam: (id: string) => `http://pfam.xfam.org/protein/${id}`,\n  SMART: (id: string) => `https://smart.embl.de/smart/show_motifs.pl?ID=${id}`,\n  PROSITE: (id: string) =>\n    `https://prosite.expasy.org/cgi-bin/prosite/PSScan.cgi?seq=${id}&output=nice`,\n};\n\nexport const getIntActQueryForAccessionUrl = (accession: string) =>\n  joinUrl(\n    externalUrls.IntAct,\n    'query',\n    `(  idA:${accession} AND idB:${accession}  ) OR (  idA:${accession} AND idB:-  ) OR (  idA:- AND idB:${accession}  )`\n  );\n\nexport const getIntActQueryUrl = (\n  firstInteractor: string,\n  secondInteractor: string\n) =>\n  joinUrl(\n    externalUrls.IntAct,\n    'query',\n    `(${firstInteractor} AND ${secondInteractor})`\n  );\n\nexport default externalUrls;\n","import { flatten } from 'lodash-es';\nimport EntrySection from '../types/entrySection';\nimport {\n  DatabaseCategory,\n  DatabaseInfo,\n  DatabaseInfoPoint,\n} from '../types/databaseRefs';\nimport { Xref } from '../types/commentTypes';\n\nexport const getDatabaseInfoMaps = (databaseInfo: DatabaseInfo) => {\n  const databaseCategoryToNames = new Map<DatabaseCategory, string[]>();\n  const databaseNameToCategory = new Map<string, DatabaseCategory>();\n  const databaseToDatabaseInfo: {\n    [database: string]: DatabaseInfoPoint;\n  } = {};\n  const implicitDatabaseXRefs = new Map<string, Xref>();\n  databaseInfo.forEach((info) => {\n    const { name, category, implicit } = info as {\n      name: string;\n      category: DatabaseCategory;\n      implicit?: boolean;\n    };\n    if (implicit) {\n      implicitDatabaseXRefs.set(name, { database: name, implicit: true });\n    }\n    const databaseNames = databaseCategoryToNames.get(category);\n    databaseCategoryToNames.set(\n      category,\n      databaseNames ? [...databaseNames, name] : [name]\n    );\n    databaseNameToCategory.set(name, category);\n    databaseToDatabaseInfo[name] = info;\n  });\n  return {\n    databaseCategoryToNames,\n    databaseNameToCategory,\n    databaseToDatabaseInfo,\n    implicitDatabaseXRefs,\n  };\n};\n\nexport const selectDatabases = (\n  databaseCategoryToNames: Map<DatabaseCategory, string[]>\n) => ({\n  categories = [],\n  whitelist = [],\n  blacklist = [],\n}: {\n  categories?: string[];\n  whitelist?: string[];\n  blacklist?: string[];\n}) =>\n  [\n    ...flatten(\n      categories.map(\n        (category) =>\n          databaseCategoryToNames.get(category as DatabaseCategory) || []\n      )\n    ),\n    ...whitelist,\n  ].filter((db) => !blacklist.includes(db));\n\nexport const getEntrySectionToDatabaseCategoryOrder = (\n  entrySectionToDatabaseNames: Map<EntrySection, string[]>,\n  databaseNameToCategory: Map<string, DatabaseCategory>\n) => {\n  const entrySectionToDatabaseCategoryOrder = new Map<EntrySection, string[]>();\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [entrySection, databaseNames] of entrySectionToDatabaseNames) {\n    const uniqueCategories: DatabaseCategory[] = [];\n    // eslint-disable-next-line no-restricted-syntax\n    for (const databaseName of databaseNames) {\n      const databaseCategory = databaseNameToCategory.get(databaseName);\n      if (databaseCategory && !uniqueCategories.includes(databaseCategory)) {\n        uniqueCategories.push(databaseCategory);\n      }\n    }\n    entrySectionToDatabaseCategoryOrder.set(entrySection, uniqueCategories);\n  }\n  return entrySectionToDatabaseCategoryOrder;\n};\n","import EntrySection from '../types/entrySection';\nimport { DatabaseCategory, DatabaseInfo } from '../types/databaseRefs';\nimport {\n  getDatabaseInfoMaps,\n  selectDatabases,\n  getEntrySectionToDatabaseCategoryOrder,\n} from '../utils/database';\nimport databaseInfoJson from './databaseInfo.json';\nimport externalUrls from './externalUrls';\n\nconst databaseInfo: DatabaseInfo = databaseInfoJson;\n\nexport const databaseCategoryToString = {\n  [DatabaseCategory.CHEMISTRY]: 'Chemistry',\n  [DatabaseCategory.DOMAIN]: 'Family and domain databases',\n  [DatabaseCategory.EXPRESSION]: 'Gene expression databases',\n  [DatabaseCategory.FAMILY]: 'Protein family/group databases',\n  [DatabaseCategory.GEL]: '2D gel databases',\n  [DatabaseCategory.GENOME]: 'Genome annotation databases',\n  [DatabaseCategory.INTERACTION]: 'Protein-protein interaction databases',\n  [DatabaseCategory.ORGANISM]: 'Organism-specific databases',\n  [DatabaseCategory.OTHER]: 'Other',\n  [DatabaseCategory.PATHWAY]: 'Enzyme and pathway databases',\n  [DatabaseCategory.PHYLOGENOMIC]: 'Phylogenomic databases',\n  [DatabaseCategory.POLYMORPHISM]: 'Polymorphism and mutation databases',\n  [DatabaseCategory.PROTEOMIC]: 'Proteomic databases',\n  [DatabaseCategory.PROTOCOL]: 'Protocols and materials databases',\n  [DatabaseCategory.PTM]: 'PTM databases',\n  [DatabaseCategory.SEQUENCE]: 'Sequence databases',\n  [DatabaseCategory.STRUCTURE]: '3D structure databases',\n};\n\nexport const {\n  databaseCategoryToNames,\n  databaseNameToCategory,\n  databaseToDatabaseInfo,\n  implicitDatabaseXRefs,\n} = getDatabaseInfoMaps(databaseInfo);\n\nexport const PDBMirrors = ['PDB', 'RCSB-PDB', 'PDBj', 'PDBsum'];\n\nexport const PDBMirrorsInfo = PDBMirrors.map(\n  PDBMirror => databaseToDatabaseInfo[PDBMirror]\n);\n\nconst databaseSelector = selectDatabases(databaseCategoryToNames);\n\nexport const entrySectionToDatabaseNames = new Map<EntrySection, string[]>();\nentrySectionToDatabaseNames.set(\n  EntrySection.Expression,\n  databaseSelector({\n    categories: [DatabaseCategory.EXPRESSION],\n    whitelist: ['HPA'],\n  })\n);\nentrySectionToDatabaseNames.set(\n  EntrySection.FamilyAndDomains,\n  databaseSelector({\n    categories: [DatabaseCategory.PHYLOGENOMIC, DatabaseCategory.DOMAIN],\n    whitelist: [\n      'MobiDB', // Implicit\n      'ProtoNet', // Implicit\n      'GPCRDB', // Implicit\n    ],\n  })\n);\nentrySectionToDatabaseNames.set(\n  EntrySection.Function,\n  databaseSelector({\n    categories: [DatabaseCategory.PATHWAY, DatabaseCategory.FAMILY],\n    whitelist: ['SwissLipids'],\n  })\n);\nentrySectionToDatabaseNames.set(\n  EntrySection.Interaction,\n  databaseSelector({\n    categories: [DatabaseCategory.INTERACTION],\n    whitelist: ['BindingDB'],\n  })\n);\nentrySectionToDatabaseNames.set(EntrySection.NamesAndTaxonomy, [\n  'ArachnoServer',\n  'Araport',\n  'CGD',\n  'ConoServer',\n  'dictyBase',\n  'EcoGene',\n  'EuPathDB',\n  'FlyBase',\n  'Gramene',\n  'HGNC',\n  'LegioList',\n  'Leproma',\n  'MaizeGDB',\n  'MGI',\n  'MIM',\n  'neXtProt',\n  'PomBase',\n  'PseudoCAP',\n  'RGD',\n  'SGD',\n  'TAIR',\n  'TubercuList',\n  'VGNC',\n  'WormBase',\n  'Xenbase',\n  'ZFIN',\n]);\nentrySectionToDatabaseNames.set(EntrySection.PathologyAndBioTech, [\n  'DisGeNET',\n  'GeneReviews',\n  'MalaCards',\n  'MIM',\n  'OpenTargets',\n  'Orphanet',\n  'PharmGKB',\n  'ChEMBL',\n  'DrugBank',\n  'GuidetoPHARMACOLOGY',\n  'BioMuta',\n  'DMDM',\n  'Allergome',\n]);\nentrySectionToDatabaseNames.set(\n  EntrySection.ProteinProcessing,\n  databaseSelector({\n    categories: [\n      DatabaseCategory.PROTEOMIC,\n      DatabaseCategory.GEL,\n      DatabaseCategory.PTM,\n    ],\n    whitelist: ['PMAP-CutDB'],\n  })\n);\nentrySectionToDatabaseNames.set(\n  EntrySection.Sequence,\n  databaseSelector({\n    categories: [DatabaseCategory.SEQUENCE, DatabaseCategory.GENOME],\n  })\n);\nentrySectionToDatabaseNames.set(\n  EntrySection.Structure,\n  databaseSelector({\n    categories: [DatabaseCategory.STRUCTURE],\n    whitelist: [\n      'EvolutionaryTrace',\n      'ModBase', // Implicit\n    ],\n  })\n);\n\n// This is used to catch those that aren't listed in the page sections\nentrySectionToDatabaseNames.set(\n  EntrySection.ExternalLinks,\n  databaseSelector({\n    categories: [DatabaseCategory.OTHER, DatabaseCategory.PROTOCOL],\n    whitelist: [\n      'HUGE', // Implicit\n      'ROUGE', // Implicit\n      'GenAtlas', // Implicit\n      ...PDBMirrors,\n    ],\n  })\n);\n\nexport const getDatabaseNameToEntrySection = (\n  databaseName: string\n): EntrySection | undefined => {\n  let entrySection;\n  entrySectionToDatabaseNames.forEach((value, key) => {\n    if (value.includes(databaseName)) {\n      entrySection = key;\n    }\n  });\n  return entrySection;\n};\n\nexport const entrySectionToDatabaseCategoryOrder = getEntrySectionToDatabaseCategoryOrder(\n  entrySectionToDatabaseNames,\n  databaseNameToCategory\n);\n\nexport const getDatabaseInfoByName = (dbName: string) =>\n  databaseInfo.find(\n    dbInfo => dbInfo.name.toLowerCase() === dbName.toLowerCase()\n  );\n\n// If each of the keys are present then show the values\nexport const implicitDatabaseDRPresence: { [key: string]: string[] } = {\n  // these EMBL mirrors are taken care of in xrefview as they are displayed differently\n  // EMBL: ['GenBank', 'DDBJ'],\n  PDB: ['PDBe-KB'], // eg P05067\n  MIM: ['SOURCE_MIM'], // eg P05067\n  MGI: ['SOURCE_MGI'], // eg E9PXF8\n  HGNC: ['GenAtlas'], // eg Q9Y263\n};\n\n// If each of the keys are not present then show the value\nexport const implicitDatabaseDRAbsence: { [key: string]: string[] } = {\n  SMR: ['SWISS-MODEL-Workspace'], // eg P16646\n};\n\nexport const implicitDatabaseAlwaysInclude = [\n  'ModBase', // eg P05067\n  'MobiDB', // eg P05067\n  'ProtoNet', // eg P05067\n];\n\nexport const implicitDatabaseGenePatternOrganism = {\n  pattern: /KIAA\\d{4}/i,\n  organism: {\n    Human: 'HUGE', // eg Q96PV4\n    Mouse: 'ROUGE', // eg Q8CJ19\n  },\n};\n\nexport const implicitDatabaseSimilarityComment = {\n  GPCRDB: 'Belongs to the G-protein coupled receptor', // eg Q7RTX1\n};\n\nexport const implicitDatabasesEC = ['ENZYME']; // eg Q54WR4\n\nexport const viewProteinLinkDatabases = new Map([\n  ['InterPro', externalUrls.InterPro],\n  ['Pfam', externalUrls.Pfam],\n  ['SMART', externalUrls.SMART],\n  ['PROSITE', externalUrls.PROSITE],\n]);\n","import { groupBy } from 'lodash-es';\nimport {\n  databaseNameToCategory,\n  entrySectionToDatabaseNames,\n  entrySectionToDatabaseCategoryOrder,\n  implicitDatabaseXRefs,\n  implicitDatabaseDRPresence,\n  implicitDatabaseDRAbsence,\n  implicitDatabaseAlwaysInclude,\n  implicitDatabaseGenePatternOrganism,\n  implicitDatabaseSimilarityComment,\n  implicitDatabasesEC,\n  PDBMirrors,\n} from '../config/database';\nimport EntrySection from '../types/entrySection';\nimport { DatabaseCategory } from '../types/databaseRefs';\nimport { Xref, FreeTextComment } from '../types/commentTypes';\nimport { GeneNamesData } from '../adapters/namesAndTaxonomyConverter';\nimport { flattenGeneNameData } from './utils';\nimport { ValueWithEvidence } from '../types/modelTypes';\n\nexport type XrefsGoupedByDatabase = {\n  database: string;\n  xrefs: Xref[];\n};\n\nexport type XrefUIModel = {\n  category: DatabaseCategory;\n  databases: XrefsGoupedByDatabase[];\n};\n\nexport const getDRImplicitXrefs = (xrefs: Xref[], geneNames: string[]) => {\n  // Get DR line contingent-implicit xrefs\n  const implicitDatabaseDRPresenceCheck: { [key: string]: boolean } = {};\n  Object.keys(implicitDatabaseDRPresence).forEach((xref) => {\n    implicitDatabaseDRPresenceCheck[xref] = false;\n  });\n  const implicitDatabaseDRAbsenceCheck: { [key: string]: boolean } = {};\n  Object.keys(implicitDatabaseDRAbsence).forEach((xref) => {\n    implicitDatabaseDRAbsenceCheck[xref] = true;\n  });\n  xrefs.forEach((xref) => {\n    const { database: name } = xref;\n    if (!name) {\n      return;\n    }\n    if (name in implicitDatabaseDRPresenceCheck) {\n      implicitDatabaseDRPresenceCheck[name] = true;\n    }\n    if (name in implicitDatabaseDRAbsenceCheck) {\n      implicitDatabaseDRAbsenceCheck[name] = false;\n    }\n  });\n  const foundXrefs: Xref[] = [];\n  [\n    [implicitDatabaseDRPresenceCheck, implicitDatabaseDRPresence],\n    [implicitDatabaseDRAbsenceCheck, implicitDatabaseDRAbsence],\n  ].forEach(([check, ruleMap]) => {\n    Object.entries(check).forEach(([name, include]) => {\n      if (!include || !(name in ruleMap)) {\n        return;\n      }\n      const implicitNames = ruleMap[name] as string[];\n      if (implicitNames) {\n        implicitNames.forEach((implicitName) => {\n          const xref = implicitDatabaseXRefs.get(implicitName);\n          if (xref) {\n            let property = {};\n            if (geneNames.length) {\n              property = {\n                GeneName: geneNames[0],\n              };\n            }\n            foundXrefs.push({\n              ...xref,\n              properties: property,\n            });\n          }\n        });\n      }\n    });\n  });\n  return foundXrefs;\n};\n\nexport const getDatabaseSimilarityCommentImplicitXrefs = (\n  uniProtkbId: string | undefined,\n  similarityComments?: FreeTextComment[]\n) => {\n  // The implicit database GPCRDB should only be inluded if there exists a\n  // similarity comment with \"Belongs to the G-protein coupled receptor\"\n  const foundXrefs: Xref[] = [];\n  if (similarityComments && uniProtkbId) {\n    Object.entries(implicitDatabaseSimilarityComment).forEach(\n      ([implicitName, commentSubstring]) => {\n        const foundCommentSubstring = similarityComments.some(\n          ({ texts }) =>\n            texts && texts.some(({ value }) => value.includes(commentSubstring))\n        );\n        if (foundCommentSubstring) {\n          const xref = implicitDatabaseXRefs.get(implicitName);\n          if (xref) {\n            const property = {\n              uniProtkbId,\n            };\n            foundXrefs.push({\n              ...xref,\n              properties: property,\n            });\n          }\n        }\n      }\n    );\n  }\n  return foundXrefs;\n};\n\nexport const getGenePatternOrganismImplicitXrefs = (\n  geneNames: string[],\n  commonName?: string | null\n) => {\n  // Implicit databases which require depend on the a gene name pattern\n  // and orgnasim pattern\n  const foundXrefs: Xref[] = [];\n  const { pattern, organism } = implicitDatabaseGenePatternOrganism;\n  if (commonName && Object.keys(organism).includes(commonName)) {\n    geneNames\n      .filter((geneName: { match: (arg: RegExp) => void }) =>\n        geneName.match(pattern)\n      )\n      .forEach((gene: string) => {\n        if (commonName in organism) {\n          const name = organism[commonName as keyof typeof organism];\n          const xref = implicitDatabaseXRefs.get(name);\n          if (xref) {\n            const property = {\n              gene,\n            };\n            foundXrefs.push({\n              ...xref,\n              properties: property,\n            });\n          }\n        }\n      });\n  }\n  return foundXrefs;\n};\n\nexport const getECImplicitXrefs = (ecNumbers?: ValueWithEvidence[] | null) => {\n  // EC dependent implicit databases\n  const foundXrefs: Xref[] = [];\n  if (ecNumbers) {\n    implicitDatabasesEC.forEach((name) => {\n      const xref = implicitDatabaseXRefs.get(name);\n      if (xref) {\n        ecNumbers.forEach(({ value }) => {\n          const property = {\n            ec: value,\n          };\n          foundXrefs.push({\n            ...xref,\n            properties: property,\n          });\n        });\n      }\n    });\n  }\n  return foundXrefs;\n};\n\nexport const getUnconditionalImplicitXrefs = () => {\n  // Always include these implicit databases (ie they are unconditional)\n  const foundXrefs: Xref[] = [];\n  implicitDatabaseAlwaysInclude.forEach((name) => {\n    const xref = implicitDatabaseXRefs.get(name);\n    if (xref) {\n      foundXrefs.push(xref);\n    }\n  });\n  return foundXrefs;\n};\n\nexport const getJoinedXrefs = (xrefs: Xref[]) => {\n  /**\n   * Add the \"JOINED\" xrefs to the \"master\" xref which it\n   * shares its ProteinId with\n   */\n  if (!xrefs || xrefs.length === 0) {\n    return xrefs;\n  }\n  const { JOINED, NOT_JOINED } = groupBy(xrefs, (xref) =>\n    xref.properties && xref.properties.Status === 'JOINED'\n      ? 'JOINED'\n      : 'NOT_JOINED'\n  );\n  if (JOINED) {\n    return NOT_JOINED.map((xref) => {\n      const joinedXrefIds = JOINED.filter(\n        (joinedXref) =>\n          joinedXref.properties &&\n          xref.properties &&\n          joinedXref.properties.ProteinId === xref.properties.ProteinId &&\n          joinedXref.id\n      ).map((joinedXref) => joinedXref.id) as string[];\n      return {\n        ...xref,\n        additionalIds: joinedXrefIds,\n      };\n    });\n  }\n  return NOT_JOINED;\n};\n\nexport const getXrefsForSection = (\n  xrefs: Xref[],\n  section: EntrySection,\n  geneNamesData?: GeneNamesData,\n  commonName?: string | null,\n  similarityComments?: FreeTextComment[],\n  uniProtkbId?: string,\n  ecNumbers?: ValueWithEvidence[] | null\n): XrefUIModel[] => {\n  const databasesForSection = entrySectionToDatabaseNames.get(section);\n  if (!databasesForSection) {\n    return [];\n  }\n\n  const categoryToNameToXrefs = new Map<\n    DatabaseCategory,\n    { [name: string]: Xref[] }\n  >();\n  const geneNames = geneNamesData ? flattenGeneNameData(geneNamesData) : [];\n  // Combine all of the 'explicit' xrefs with all of the implicit xrefs\n  // which pass the conditions and add if they are part of the section\n  [\n    ...xrefs,\n    ...getUnconditionalImplicitXrefs(),\n    ...getDRImplicitXrefs(xrefs, geneNames),\n    ...getDatabaseSimilarityCommentImplicitXrefs(\n      uniProtkbId,\n      similarityComments\n    ),\n    ...getGenePatternOrganismImplicitXrefs(geneNames, commonName),\n    ...getECImplicitXrefs(ecNumbers),\n  ].forEach((xref) => {\n    const { database: name } = xref;\n    if (!name) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    if (!databasesForSection.includes(name)) {\n      return;\n    }\n    const category = databaseNameToCategory.get(name);\n    if (!category) {\n      return;\n    }\n    const nameToXrefs = categoryToNameToXrefs.get(category) || {};\n    if (!nameToXrefs[name]) {\n      nameToXrefs[name] = [];\n    }\n    nameToXrefs[name].push(xref);\n    categoryToNameToXrefs.set(category, nameToXrefs);\n  });\n\n  const databaseCategoryOrder = entrySectionToDatabaseCategoryOrder.get(\n    section\n  ) as DatabaseCategory[];\n  if (!databaseCategoryOrder) {\n    return [];\n  }\n  const xrefCategories: XrefUIModel[] = [];\n  databaseCategoryOrder.forEach((category) => {\n    const nameToXrefs = categoryToNameToXrefs.get(category);\n    if (!nameToXrefs) {\n      return;\n    }\n    xrefCategories.push({\n      category,\n      databases: Object.entries(nameToXrefs).map(([database, refs]) => ({\n        database,\n        xrefs: refs,\n      })),\n    });\n  });\n\n  return xrefCategories;\n};\n\nexport const partitionStructureDatabases = (\n  databases: XrefsGoupedByDatabase[]\n) => {\n  // This function returns the PDB databases and an array of non-PDB databases.\n  const { PDBDatabases, otherStructureDatabases } = groupBy(\n    databases,\n    ({ database }) =>\n      PDBMirrors.includes(database) ? 'PDBDatabases' : 'otherStructureDatabases'\n  );\n  // Though we have partitioned the xrefs into PDB* and non-PDB* we only need the\n  // information from the PDB xref entries (ie not PDBsum)\n  const PDBDatabase =\n    PDBDatabases && PDBDatabases.find(({ database }) => database === 'PDB');\n  return { PDBDatabase, otherStructureDatabases };\n};\n","import queryStringModule from 'query-string';\nimport { SortableColumn, Column } from '../types/columnTypes';\nimport {\n  SelectedFacet,\n  SortDirection,\n  ReceivedFieldData,\n} from '../types/resultsTypes';\n\nconst facetsAsArray = (facetString: string): SelectedFacet[] => {\n  return facetString.split(',').map(stringItem => {\n    const [name, value] = stringItem.split(':');\n    return {\n      name,\n      value,\n    };\n  });\n};\n\nexport const getParamsFromURL = (\n  url: string\n): {\n  query: string;\n  selectedFacets: SelectedFacet[];\n  sortColumn: SortableColumn;\n  sortDirection: SortDirection;\n} => {\n  const urlParams = queryStringModule.parse(url);\n  const { query, facets, sort, dir } = urlParams;\n\n  let selectedFacets: SelectedFacet[] = [];\n  if (facets && typeof facets === 'string') {\n    selectedFacets = facetsAsArray(facets);\n  }\n  const sortDirection = dir as keyof typeof SortDirection;\n\n  return {\n    query: query && typeof query === 'string' ? query : '',\n    selectedFacets,\n    sortColumn: sort as SortableColumn,\n    sortDirection: sortDirection && SortDirection[sortDirection],\n  };\n};\n\nexport const facetsAsString = (facets: SelectedFacet[]): string => {\n  if (!facets || facets.length <= 0) {\n    return '';\n  }\n  return facets.reduce(\n    (accumulator, facet, i) =>\n      `${accumulator}${i > 0 ? ',' : ''}${facet.name}:${facet.value}`,\n    '&facets='\n  );\n};\n\nexport const getLocationObjForParams = (\n  pathname: string,\n  query: string,\n  selectedFacets: SelectedFacet[],\n  sortColumn?: string,\n  sortDirection?: SortDirection\n) => ({\n  pathname,\n  search: [\n    `query=${query}${facetsAsString(selectedFacets)}`,\n    `${sortColumn ? `&sort=${sortColumn}` : ''}`,\n    `${sortDirection ? `&dir=${sortDirection}` : ''}`,\n  ].join(''),\n});\n\nexport const getSortableColumnToSortColumn = (\n  resultFields: ReceivedFieldData\n) => {\n  const sortableColumnToSortColumn = new Map<Column, string>();\n  resultFields.forEach(({ fields }) => {\n    fields.forEach(({ name, sortField }) => {\n      if (sortField) sortableColumnToSortColumn.set(name, sortField);\n    });\n  });\n  return sortableColumnToSortColumn;\n};\n","import { CommentType } from '../types/commentTypes';\nimport KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport { convertSection } from './sectionConverter';\nimport EntrySection from '../types/entrySection';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nconst keywordsCategories = [KeywordCategory.DISEASE];\n\nconst featuresCategories = [FeatureType.MUTAGEN];\n\nconst commentsCategories = [\n  CommentType.DISEASE,\n  CommentType.ALLERGEN,\n  CommentType.BIOTECHNOLOGY,\n  CommentType.DISRUPTION_PHENOTYPE,\n  CommentType.TOXIC_DOSE,\n  CommentType.PHARMACEUTICAL,\n];\n\nconst convertPathologyAndBiotech = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    commentsCategories,\n    keywordsCategories,\n    featuresCategories,\n    EntrySection.PathologyAndBioTech\n  );\n};\n\nexport default convertPathologyAndBiotech;\n","import FeatureType from '../types/featureType';\nimport KeywordCategory from '../types/keywordCategory';\nimport EntrySection from '../types/entrySection';\nimport { CommentType } from '../types/commentTypes';\nimport { convertSection } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nconst keywordsCategories = [KeywordCategory.PTM];\n\nconst featuresCategories = [\n  FeatureType.INIT_MET,\n  FeatureType.SIGNAL,\n  FeatureType.TRANSIT,\n  FeatureType.PROPEP,\n  FeatureType.CHAIN,\n  FeatureType.PEPTIDE,\n  FeatureType.MOD_RES,\n  FeatureType.LIPID,\n  FeatureType.CARBOHYD,\n  FeatureType.DISULFID,\n  FeatureType.CROSSLNK,\n];\n\nconst proteinProcessingComments = [CommentType.PTM];\n\nconst convertProteinProcessing = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    proteinProcessingComments,\n    keywordsCategories,\n    featuresCategories,\n    EntrySection.ProteinProcessing\n  );\n};\n\nexport default convertProteinProcessing;\n","import { CommentType } from '../types/commentTypes';\nimport KeywordCategory from '../types/keywordCategory';\nimport EntrySection from '../types/entrySection';\nimport { convertSection } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nconst keywordsCategories = [KeywordCategory.DEVELOPMENTAL_STAGE];\n\nconst commentsCategories = [\n  CommentType.TISSUE_SPECIFICITY,\n  CommentType.DEVELOPMENTAL_STAGE,\n  CommentType.INDUCTION,\n];\n\nconst convertExpression = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    commentsCategories,\n    keywordsCategories,\n    undefined,\n    EntrySection.Expression\n  );\n};\n\nexport default convertExpression;\n","import KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport { convertSection } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\nimport { CommentType } from '../types/commentTypes';\n\nconst commentCategories = [CommentType.SUBCELLULAR_LOCATION];\n\nconst keywordsCategories = [KeywordCategory.CELLULAR_COMPONENT];\n\nconst featuresCategories = [FeatureType.TOPO_DOM, FeatureType.TRANSMEM];\n\nconst convertSubcellularLocation = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    commentCategories,\n    keywordsCategories,\n    featuresCategories,\n    undefined\n  );\n};\n\nexport default convertSubcellularLocation;\n","import { CommentType } from '../types/commentTypes';\nimport EntrySection from '../types/entrySection';\nimport { convertSection } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nconst commentsCategories = [CommentType.INTERACTION, CommentType.SUBUNIT];\n\nexport type Interactant = {\n  uniProtkbAccession: string;\n  geneName: string;\n  chainId: string;\n  intActId: string;\n};\n\nexport const convertInteraction = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    commentsCategories,\n    undefined,\n    undefined,\n    EntrySection.Interaction\n  );\n};\n\nexport default convertInteraction;\n","import KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport EntrySection from '../types/entrySection';\nimport { CommentType } from '../types/commentTypes';\nimport { convertSection } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nconst keywordsCategories = [KeywordCategory.DOMAIN];\n\nconst featuresCategories = [\n  FeatureType.DOMAIN,\n  FeatureType.REGION,\n  FeatureType.REPEAT,\n  FeatureType.MOTIF,\n  FeatureType.COMPBIAS,\n];\n\nconst familyAndDomainsComments = [CommentType.DOMAIN, CommentType.SIMILARITY];\n\nconst convertFamilyAndDomains = (data: UniProtkbAPIModel) => {\n  return convertSection(\n    data,\n    familyAndDomainsComments,\n    keywordsCategories,\n    featuresCategories,\n    EntrySection.FamilyAndDomains\n  );\n};\n\nexport default convertFamilyAndDomains;\n","import { groupBy } from 'lodash-es';\nimport FeatureType from '../types/featureType';\nimport { convertSection, UIModel } from './sectionConverter';\nimport EntrySection from '../types/entrySection';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\nimport { Xref } from '../types/commentTypes';\n\ntype GroupedStructureInfo = { [key: string]: Xref[] };\n\nexport type StructureUIModel = {\n  structures?: GroupedStructureInfo;\n} & UIModel;\n\nconst featuresCategories = [FeatureType.HELIX, FeatureType.STRAND];\n\nconst convertStructure = (data: UniProtkbAPIModel) => {\n  const structureData: StructureUIModel = convertSection(\n    data,\n    undefined,\n    undefined,\n    featuresCategories,\n    EntrySection.Structure\n  );\n  // Extract xrefs to PDB\n  if (data.uniProtKBCrossReferences) {\n    const structureInfo = data.uniProtKBCrossReferences\n      .filter((ref) => ref.database === 'PDB')\n      .map((item) => {\n        const method = item.properties && item.properties.Method;\n        return { ...item, method };\n      });\n    const groupedStructureInfo = groupBy(\n      structureInfo,\n      (item: { method: string }) => item.method\n    );\n    structureData.structures = groupedStructureInfo as GroupedStructureInfo;\n  }\n  return structureData;\n};\n\nexport default convertStructure;\n","import EntrySection from '../types/entrySection';\nimport convertFunction from './functionConverter';\nimport { FeatureData } from '../components/protein-data-views/FeaturesView';\nimport convertPathologyAndBiotech from './pathologyAndBiotechConverter';\nimport {\n  convertNamesAndTaxonomy,\n  NamesAndTaxonomyUIModel,\n  ProteinNamesData,\n  GeneNamesData,\n  OrganismData,\n  LineageData,\n} from './namesAndTaxonomyConverter';\nimport convertProteinProcessing from './proteinProcessingConverter';\nimport convertExpression from './expressionConverter';\nimport convertSubcellularLocation from './subcellularLocationConverter';\nimport {\n  convertSequence,\n  SequenceUIModel,\n  EntryAudit,\n} from './sequenceConverter';\nimport { SequenceData } from '../components/protein-data-views/SequenceView';\nimport { Keyword } from '../utils/KeywordsUtil';\nimport convertInteraction from './interactionConverter';\nimport convertFamilyAndDomains from './familyAndDomainsConverter';\nimport { UIModel } from './sectionConverter';\nimport convertStructure from './structureConverter';\nimport convertExternalLinks from './externalLinksConverter';\nimport Comment, { Xref } from '../types/commentTypes';\nimport { transfromProperties } from '../utils/utils';\nimport { Property } from '../types/modelTypes';\nimport { Reference } from '../types/literatureTypes';\n\nexport enum EntryType {\n  SWISSPROT = 'UniProtKB reviewed (Swiss-Prot)',\n  TREMBL = 'UniProtKB unreviewed (TrEMBL)',\n  INACTIVE = 'Inactive',\n}\n\nexport type UniProtkbAPIModel = {\n  proteinDescription?: ProteinNamesData;\n  genes?: GeneNamesData;\n  organism?: OrganismData;\n  virusHosts?: OrganismData[];\n  primaryAccession: string;\n  uniProtkbId: string;\n  proteinExistence: string;\n  entryType: EntryType;\n  comments?: Comment[];\n  keywords?: Keyword[];\n  features?: FeatureData;\n  uniProtKBCrossReferences?: Xref[];\n  sequence: SequenceData;\n  annotationScore: number;\n  entryAudit?: EntryAudit;\n  references?: Reference[];\n  lineages?: LineageData[];\n};\n\nexport type UniProtkbUIModel = {\n  primaryAccession: string;\n  uniProtkbId: string;\n  proteinExistence: string;\n  entryType: EntryType;\n  annotationScore: number;\n  [EntrySection.Function]: UIModel;\n  [EntrySection.NamesAndTaxonomy]: NamesAndTaxonomyUIModel;\n  [EntrySection.SubCellularLocation]: UIModel;\n  [EntrySection.PathologyAndBioTech]: UIModel;\n  [EntrySection.ProteinProcessing]: UIModel;\n  [EntrySection.Expression]: UIModel;\n  [EntrySection.Sequence]: SequenceUIModel;\n  [EntrySection.Interaction]: UIModel;\n  [EntrySection.Structure]: UIModel;\n  [EntrySection.FamilyAndDomains]: UIModel;\n  [EntrySection.ExternalLinks]: UIModel;\n  references?: Reference[];\n};\n\nexport enum InactiveReasonType {\n  MERGED = 'MERGED', // We will never see this as this is followed by a 303 redirect\n  DEMERGED = 'DEMERGED',\n  DELETED = 'DELETED',\n}\n\nexport type InactiveEntryReason = {\n  inactiveReasonType: InactiveReasonType;\n  mergeDemergeTo: string[] | [];\n};\n\nexport type UniProtkbInactiveEntryModel = {\n  annotationScore: number;\n  entryType: EntryType.INACTIVE;\n  inactiveReason: InactiveEntryReason;\n  primaryAccession: string;\n  uniProtkbId: string;\n};\n\nexport const convertXrefProperties = (xrefs: Xref[]) =>\n  xrefs.map(xref => ({\n    ...xref,\n    properties: xref.properties\n      ? transfromProperties((xref.properties as unknown) as Property[])\n      : {},\n  }));\n\nconst uniProtKbConverter = (data: UniProtkbAPIModel): UniProtkbUIModel => {\n  const dataCopy = { ...data };\n\n  if (dataCopy.uniProtKBCrossReferences) {\n    dataCopy.uniProtKBCrossReferences = convertXrefProperties(\n      dataCopy.uniProtKBCrossReferences\n    );\n  }\n\n  return {\n    primaryAccession: dataCopy.primaryAccession,\n    uniProtkbId: dataCopy.uniProtkbId,\n    proteinExistence: dataCopy.proteinExistence,\n    entryType: dataCopy.entryType,\n    annotationScore: dataCopy.annotationScore,\n    [EntrySection.Function]: convertFunction(dataCopy),\n    [EntrySection.NamesAndTaxonomy]: convertNamesAndTaxonomy(dataCopy),\n    [EntrySection.SubCellularLocation]: convertSubcellularLocation(dataCopy),\n    [EntrySection.PathologyAndBioTech]: convertPathologyAndBiotech(dataCopy),\n    [EntrySection.ProteinProcessing]: convertProteinProcessing(dataCopy),\n    [EntrySection.Expression]: convertExpression(dataCopy),\n    [EntrySection.Interaction]: convertInteraction(dataCopy),\n    [EntrySection.Structure]: convertStructure(dataCopy),\n    [EntrySection.Sequence]: convertSequence(dataCopy),\n    [EntrySection.FamilyAndDomains]: convertFamilyAndDomains(dataCopy),\n    [EntrySection.ExternalLinks]: convertExternalLinks(dataCopy),\n    references: dataCopy.references || [],\n  };\n};\n\nexport default uniProtKbConverter;\n\n// TODO this needs to be removed once added\n// entrySectionToKeywordCategories.set(EntrySection.Miscellaneous, [\n//   KeywordCategory.TECHNICAL_TERM,\n// ]);\n","import idx from 'idx';\nimport { UIModel } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\nimport { CommentType } from '../types/commentTypes';\nimport { getXrefsForSection } from '../utils/xrefUtils';\nimport EntrySection from '../types/entrySection';\n\nconst convertExternalLinks = (data: UniProtkbAPIModel) => {\n  const convertedData: UIModel = {\n    commentsData: new Map(),\n    keywordData: [],\n    featuresData: [],\n    xrefData: [],\n  };\n  const { comments, uniProtKBCrossReferences, genes, organism } = data;\n\n  if (comments) {\n    convertedData.commentsData.set(\n      CommentType.WEB_RESOURCE,\n      comments.filter(\n        comment => comment.commentType === CommentType.WEB_RESOURCE\n      )\n    );\n  }\n  if (uniProtKBCrossReferences) {\n    const commonName = idx(organism, o => o.commonName);\n    convertedData.xrefData = getXrefsForSection(\n      uniProtKBCrossReferences,\n      EntrySection.ExternalLinks,\n      genes,\n      commonName\n    );\n  }\n\n  return convertedData;\n};\nexport default convertExternalLinks;\n","import { ValueWithEvidence, Evidence } from '../types/modelTypes';\nimport { Flag } from './sequenceConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\nimport { Xref } from '../types/commentTypes';\nimport { convertSection, UIModel } from './sectionConverter';\nimport EntrySection from '../types/entrySection';\n\nexport type ProteinNames = {\n  fullName: ValueWithEvidence;\n  shortNames?: ValueWithEvidence[];\n  ecNumbers?: ValueWithEvidence[];\n};\n\nexport type ProteinDescription = {\n  recommendedName?: ProteinNames;\n  submissionNames?: ProteinNames[];\n  alternativeNames?: ProteinNames[];\n  allergenName?: ValueWithEvidence;\n  biotechName?: ValueWithEvidence;\n  cdAntigenNames?: ValueWithEvidence;\n  innNames?: ValueWithEvidence;\n  flag?: Flag;\n};\n\nexport type ProteinNamesData = ProteinDescription & {\n  includes?: ProteinDescription[];\n  contains?: ProteinDescription[];\n};\n\nexport type GeneNamesData = {\n  geneName?: ValueWithEvidence;\n  synonyms?: ValueWithEvidence[];\n  orfNames?: ValueWithEvidence[];\n  orderedLocusNames?: ValueWithEvidence[];\n}[];\n\nexport type OrganismData = {\n  scientificName: string;\n  commonName?: string;\n  synonyms?: string[];\n  taxonId: number;\n  evidences?: Evidence[];\n  lineage: string[];\n};\n\nexport type LineageData = {\n  scientificName: string;\n  commonName?: string;\n  synonyms?: string[];\n  taxonId: number;\n  rank?: string;\n  hidden?: boolean;\n};\n\nexport type NamesAndTaxonomyUIModel = {\n  proteinNamesData?: ProteinNamesData;\n  geneNamesData?: GeneNamesData;\n  organismData?: OrganismData;\n  proteomesData?: Xref[];\n  virusHosts?: OrganismData[];\n} & UIModel;\n\nexport const convertNamesAndTaxonomy = (data: UniProtkbAPIModel) => {\n  const namesAndTaxonomyData: NamesAndTaxonomyUIModel = convertSection(\n    data,\n    undefined,\n    undefined,\n    undefined,\n    EntrySection.NamesAndTaxonomy\n  );\n\n  if (data.proteinDescription) {\n    namesAndTaxonomyData.proteinNamesData = data.proteinDescription;\n  }\n  if (data.genes) {\n    namesAndTaxonomyData.geneNamesData = data.genes;\n  }\n  if (data.organism) {\n    namesAndTaxonomyData.organismData = data.organism;\n  }\n  if (data.virusHosts) {\n    namesAndTaxonomyData.virusHosts = data.virusHosts;\n  }\n  if (data.uniProtKBCrossReferences) {\n    namesAndTaxonomyData.proteomesData = data.uniProtKBCrossReferences.filter(\n      (db) => db.database === 'Proteomes'\n    );\n  }\n\n  return namesAndTaxonomyData;\n};\n","import { flatten } from 'lodash-es';\nimport KeywordCategory from '../types/keywordCategory';\nimport { UniProtkbUIModel } from '../adapters/uniProtkbConverter';\nimport { UIModel } from '../adapters/sectionConverter';\n\nexport type Keyword = {\n  id?: string;\n  name?: string;\n  category?: KeywordCategory;\n};\n\nexport type KeywordUIModel = {\n  category: KeywordCategory;\n  keywords: Keyword[];\n};\n\nexport const getAllKeywords = (data: UniProtkbUIModel) => {\n  const allKeywords: Keyword[] = [];\n  Object.values(data).forEach((attributes) => {\n    const UIModelAttribute = attributes as UIModel;\n    if (UIModelAttribute && UIModelAttribute.keywordData) {\n      const keywordData = flatten(\n        UIModelAttribute.keywordData.map((categ) => categ.keywords)\n      );\n      allKeywords.push(...keywordData);\n    }\n  });\n  return allKeywords;\n};\n\nexport const getKeywordsForCategories = (\n  keywords: Keyword[],\n  keywordCategories: KeywordCategory[]\n): KeywordUIModel[] => {\n  if (!keywords || !keywordCategories) {\n    return [];\n  }\n  const keywordsByCategories = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for (const category of keywordCategories) {\n    const categoryKeywords = keywords.filter(\n      (keyword) => keyword.category === category\n    );\n    if (categoryKeywords && categoryKeywords.length > 0) {\n      keywordsByCategories.push({\n        category,\n        keywords: categoryKeywords,\n      });\n    }\n  }\n  return keywordsByCategories;\n};\n","import { FC } from 'react';\nimport { LocationToPath, Location } from '../../../app/config/urls';\nimport browserHistory from '../../utils/browserHistory';\n\nconst ErrorHandler: FC<{ status?: number }> = ({ status }) => {\n  // TODO instead of doing redirects, this should return the components\n  // so that the url is unchanged\n  switch (status) {\n    case 400:\n    case 404:\n      browserHistory.push(LocationToPath[Location.PageNotFound]);\n      break;\n    case 500:\n    case 503:\n      browserHistory.push(LocationToPath[Location.ServiceUnavailable]);\n      break;\n\n    default:\n      // TODO this could be improved, maybe automatic retries or\n      // showing a popup message with a timer saying retrying in n seconds\n      browserHistory.push(LocationToPath[Location.ServiceUnavailable]);\n      break;\n  }\n  return null;\n};\n\nexport default ErrorHandler;\n","import React, { Fragment, FC } from 'react';\nimport { InfoList, ExpandableList } from 'franklin-sites';\nimport { v1 } from 'uuid';\nimport {\n  ProteinNames,\n  ProteinNamesData,\n  ProteinDescription,\n} from '../../adapters/namesAndTaxonomyConverter';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport { ValueWithEvidence } from '../../types/modelTypes';\n\nexport const NameWithEvidence: React.FC<{ data: ValueWithEvidence }> = ({\n  data,\n}): JSX.Element => (\n  <Fragment>\n    {data.value}\n    {data.evidences && (\n      <Fragment>\n        {' '}\n        <UniProtKBEvidenceTag evidences={data.evidences} />\n      </Fragment>\n    )}\n  </Fragment>\n);\n\nconst ProteinNamesViewFlat: React.FC<{\n  names?: ProteinNames;\n  includeEvidence?: boolean;\n}> = ({ names, includeEvidence = false }): JSX.Element | null => {\n  if (!names) {\n    return null;\n  }\n  return (\n    <Fragment>\n      {includeEvidence ? (\n        <NameWithEvidence data={names.fullName} />\n      ) : (\n        `${names.fullName.value}`\n      )}\n      {names.shortNames && (\n        <Fragment>\n          {' ('}\n          {names.shortNames.map(\n            (shortName, index): JSX.Element => (\n              <Fragment key={v1()}>\n                {index > 0 && '; '}\n                {includeEvidence ? (\n                  <NameWithEvidence data={shortName} />\n                ) : (\n                  `${shortName.value}`\n                )}\n              </Fragment>\n            )\n          )}\n          {') '}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst ProteinDescriptionView: React.FC<{\n  proteinDescription?: ProteinDescription;\n}> = ({ proteinDescription }): JSX.Element | null => {\n  if (!proteinDescription) {\n    return null;\n  }\n  return (\n    <Fragment>\n      <ProteinNamesViewFlat names={proteinDescription.recommendedName} />\n      {proteinDescription.alternativeNames && (\n        <Fragment>\n          {' '}\n          <strong>Alternative names: </strong>\n          {proteinDescription.alternativeNames.map(\n            (alternativeName): JSX.Element => (\n              <ProteinNamesViewFlat\n                names={alternativeName}\n                key={alternativeName.fullName.value}\n              />\n            )\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport const ECNumbersView: FC<{\n  ecNumbers: ValueWithEvidence[];\n  isCompact?: boolean;\n}> = ({ ecNumbers, isCompact = false }) => (\n  <Fragment>\n    {ecNumbers.map(\n      (ecNumber): JSX.Element =>\n        isCompact ? (\n          <Fragment key={v1()}>{ecNumber.value}</Fragment>\n        ) : (\n          <NameWithEvidence data={ecNumber} key={v1()} />\n        )\n    )}\n  </Fragment>\n);\n\nconst getInfoListForNames = (\n  name: ProteinNames,\n  isCompact: boolean\n): { title: string; content: JSX.Element }[] => {\n  const infoData = [];\n\n  if (name.fullName) {\n    infoData.push({\n      title: 'Recommended name',\n      content: isCompact ? (\n        <Fragment>{name.fullName.value}</Fragment>\n      ) : (\n        <NameWithEvidence data={name.fullName} />\n      ),\n    });\n  }\n  if (name.ecNumbers) {\n    infoData.push({\n      title: 'EC number',\n      content: (\n        <ECNumbersView ecNumbers={name.ecNumbers} isCompact={isCompact} />\n      ),\n    });\n  }\n  if (name.shortNames) {\n    infoData.push({\n      title: 'Short names',\n      content: (\n        <Fragment>\n          {name.shortNames.map(\n            (shortName, i): JSX.Element => (\n              <Fragment key={v1()}>\n                {i > 0 && '; '}\n                {isCompact ? (\n                  shortName.value\n                ) : (\n                  <NameWithEvidence data={shortName} />\n                )}\n              </Fragment>\n            )\n          )}\n        </Fragment>\n      ),\n    });\n  }\n  return infoData;\n};\n\ntype ListElement = {\n  id: string;\n  content: JSX.Element;\n};\n\nconst ProteinNamesView: React.FC<{\n  proteinNames?: ProteinNamesData;\n  isCompact?: boolean;\n}> = ({ proteinNames, isCompact = false }): JSX.Element | null => {\n  if (!proteinNames) {\n    return null;\n  }\n  let infoData: { title: string; content: JSX.Element }[] = [];\n  if (proteinNames.recommendedName) {\n    infoData = getInfoListForNames(proteinNames.recommendedName, isCompact);\n  }\n  if (proteinNames.alternativeNames) {\n    infoData.push({\n      title: 'Alternative names',\n      content: (\n        <ExpandableList descriptionString=\"alternative names\">\n          {proteinNames.alternativeNames.map(\n            (alternativeName): ListElement => ({\n              id: v1(),\n              content: (\n                <ProteinNamesViewFlat\n                  names={alternativeName}\n                  includeEvidence={!isCompact}\n                />\n              ),\n            })\n          )}\n        </ExpandableList>\n      ),\n    });\n  }\n  if (proteinNames.contains) {\n    infoData.push({\n      title: `Cleaved into ${proteinNames.contains.length} chains`,\n      content: (\n        <ExpandableList descriptionString=\"chains\">\n          {proteinNames.contains.map(\n            (contains): ListElement => ({\n              id: v1(),\n              content: <ProteinDescriptionView proteinDescription={contains} />,\n            })\n          )}\n        </ExpandableList>\n      ),\n    });\n  }\n  if (proteinNames.submissionNames) {\n    infoData.push({\n      title: 'Submission names',\n      content: (\n        <ExpandableList descriptionString=\"submission names\">\n          {proteinNames.submissionNames.map(\n            (submission): ListElement => ({\n              id: v1(),\n              content: (\n                <ProteinNamesViewFlat\n                  names={submission}\n                  includeEvidence={!isCompact}\n                />\n              ),\n            })\n          )}\n        </ExpandableList>\n      ),\n    });\n  }\n  if (proteinNames.biotechName) {\n    infoData.push({\n      title: 'Biotech name',\n      content: isCompact ? (\n        <Fragment>{proteinNames.biotechName.value}</Fragment>\n      ) : (\n        <NameWithEvidence data={proteinNames.biotechName} />\n      ),\n    });\n  }\n\n  if (proteinNames.cdAntigenNames) {\n    infoData.push({\n      title: 'CD Antigen Name',\n      content: isCompact ? (\n        <Fragment>{proteinNames.cdAntigenNames.value}</Fragment>\n      ) : (\n        <NameWithEvidence data={proteinNames.cdAntigenNames} />\n      ),\n    });\n  }\n\n  if (proteinNames.innNames) {\n    infoData.push({\n      title: 'INN Name',\n      content: isCompact ? (\n        <Fragment>{proteinNames.innNames.value}</Fragment>\n      ) : (\n        <NameWithEvidence data={proteinNames.innNames} />\n      ),\n    });\n  }\n\n  return (\n    <InfoList\n      infoData={infoData}\n      isCompact={isCompact}\n      highlightFirstItem={isCompact}\n    />\n  );\n};\n\nexport default ProteinNamesView;\n","export enum DatabaseCategory {\n  CHEMISTRY = 'CHEMISTRY',\n  DOMAIN = 'FMD',\n  EXPRESSION = 'GEP',\n  FAMILY = 'PFAM',\n  GEL = '2DG',\n  GENOME = 'GMA',\n  INTERACTION = 'PPI',\n  ORGANISM = 'ORG',\n  OTHER = 'OTHER',\n  PATHWAY = 'EAP',\n  PHYLOGENOMIC = 'PLG',\n  POLYMORPHISM = 'PMD',\n  PROTEOMIC = 'PROTEOMIC',\n  PROTOCOL = 'PAM',\n  PTM = 'PTM',\n  SEQUENCE = 'SEQ',\n  STRUCTURE = '3DS',\n}\n\nexport type AttributesItem = {\n  name: string;\n  xmlTag: string;\n  uriLink?: string;\n};\n\nexport type DatabaseInfoPoint = {\n  name: string;\n  displayName: string;\n  category: string;\n  uriLink: string;\n  attributes?: AttributesItem[];\n  implicit?: boolean;\n};\n\nexport type DatabaseInfo = DatabaseInfoPoint[];\n","import React, { Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport { InfoList } from 'franklin-sites';\nimport { GeneNamesData } from '../../adapters/namesAndTaxonomyConverter';\nimport { NameWithEvidence } from './ProteinNamesView';\nimport { ValueWithEvidence } from '../../types/modelTypes';\n\nexport const geneAlternativeNamesView = (\n  alternativeNames: ValueWithEvidence[],\n  firstComma = true\n) => {\n  return (\n    <Fragment>\n      {firstComma && ', '}\n      {alternativeNames\n        .map<React.ReactNode>(altName => (\n          <NameWithEvidence data={altName} key={altName.value} />\n        ))\n        .reduce((prev, curr) => [prev, ', ', curr])}\n    </Fragment>\n  );\n};\n\nconst GeneNamesView: React.FC<{\n  geneNamesData: GeneNamesData;\n  isCompact?: boolean;\n}> = ({ geneNamesData, isCompact = false }) => (\n  <Fragment>\n    {geneNamesData.map(geneNames => {\n      const infoData = [\n        {\n          title: 'Name',\n          content: geneNames.geneName && (\n            <Fragment>\n              <NameWithEvidence data={geneNames.geneName} />\n            </Fragment>\n          ),\n        },\n      ];\n      if (geneNames.synonyms) {\n        infoData.push({\n          title: 'Synonyms',\n          content: (\n            <Fragment>\n              {geneAlternativeNamesView(geneNames.synonyms, false)}\n            </Fragment>\n          ),\n        });\n      }\n      if (geneNames.orfNames) {\n        infoData.push({\n          title: 'ORF names',\n          content: (\n            <Fragment>\n              {geneAlternativeNamesView(geneNames.orfNames, false)}\n            </Fragment>\n          ),\n        });\n      }\n      if (geneNames.orderedLocusNames) {\n        infoData.push({\n          title: 'Ordered locus names',\n          content: (\n            <Fragment>\n              {geneAlternativeNamesView(geneNames.orderedLocusNames, false)}\n            </Fragment>\n          ),\n        });\n      }\n      return (\n        <InfoList\n          infoData={infoData}\n          key={geneNames.geneName ? geneNames.geneName.value : v1()}\n          isCompact={isCompact}\n          highlightFirstItem={isCompact}\n        />\n      );\n    })}\n  </Fragment>\n);\n\nexport default GeneNamesView;\n","import React, { Fragment } from 'react';\nimport { InfoList, ExternalLink } from 'franklin-sites';\nimport { OrganismData } from '../../adapters/namesAndTaxonomyConverter';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport externalUrls from '../../config/externalUrls';\n\ntype OrganismDataProps = {\n  data: OrganismData;\n};\n\nexport const OrganismLineage: React.FC<{ lineage: string[] }> = ({\n  lineage,\n}) => <Fragment>{lineage.join(' > ')}</Fragment>;\n\nexport const OrganismId: React.FC<{ taxonId: number | undefined }> = ({\n  taxonId,\n}) => {\n  if (!taxonId) {\n    return null;\n  }\n  return (\n    <ExternalLink url={externalUrls.NCBI(taxonId)}>{taxonId}</ExternalLink>\n  );\n};\n\nconst OrganismView: React.FC<OrganismDataProps> = ({\n  data,\n}): JSX.Element | null => {\n  if (!data) {\n    return null;\n  }\n\n  const termValue = `${data.scientificName}${\n    data.commonName ? ` (${data.commonName})` : ''\n  } ${data.synonyms && data.synonyms.length > 0 ? ` (${data.synonyms})` : ''}`;\n\n  return (\n    <ExternalLink url={externalUrls.NCBI(data.taxonId)}>\n      {termValue}\n    </ExternalLink>\n  );\n};\n\nexport const OrganismListView: React.FC<{\n  data?: OrganismData;\n  hosts?: OrganismData[];\n}> = ({ data, hosts }): JSX.Element | null => {\n  if (!data) {\n    return null;\n  }\n  const infoListData: { title: string; content: JSX.Element | string }[] = [];\n  if (data.scientificName) {\n    infoListData.push({\n      title: 'Organism',\n      content: (\n        <Fragment>\n          {data.taxonId && (\n            <ExternalLink url={externalUrls.NCBI(data.taxonId)}>\n              {`${data.scientificName} (${data.commonName})`}\n            </ExternalLink>\n          )}\n          {data.evidences && data.evidences.length && (\n            <UniProtKBEvidenceTag evidences={data.evidences} />\n          )}\n        </Fragment>\n      ),\n    });\n  }\n  if (data.taxonId) {\n    infoListData.push({\n      title: 'Taxonomic identifier',\n      content: <OrganismId taxonId={data.taxonId} />,\n    });\n  }\n  if (data.lineage) {\n    infoListData.push({\n      title: 'Taxonomic lineage',\n      content: <OrganismLineage lineage={data.lineage} />,\n    });\n  }\n  if (hosts) {\n    infoListData.push({\n      title: 'Virus hosts',\n      content: (\n        <Fragment>\n          {hosts.map((host) => (\n            <p key={host.taxonId}>\n              <OrganismView data={host} />\n            </p>\n          ))}\n        </Fragment>\n      ),\n    });\n  }\n  return <InfoList infoData={infoListData} />;\n};\n\nexport default OrganismView;\n","import React, { FC } from 'react';\nimport { DoughnutChart } from 'franklin-sites';\n\nexport const annotationScoreToBin = (annotationScore: number) => {\n  /*\n    0-19  | bin 1\n    20-39 | bin 2\n    40-59 | bin 3\n    60-79 | bin 4\n    >=80  | bin 5\n  */\n  const bin = Math.floor(annotationScore / 20) + 1;\n  return Math.min(bin, 5);\n};\n\nexport enum DoughnutChartSize {\n  small = 'small',\n  medium = 'medium',\n  large = 'large',\n}\n\ntype AnnotationScoreDoughnutChartProps = {\n  score: number;\n  size?: DoughnutChartSize;\n};\n\nconst AnnotationScoreDoughnutChart: FC<AnnotationScoreDoughnutChartProps> = ({\n  score,\n  size = DoughnutChartSize.medium,\n}) => {\n  const annotationScoreBin = annotationScoreToBin(score);\n  return (\n    <span title=\"Annotation Score\">\n      <DoughnutChart percent={annotationScoreBin * 20} size={size}>\n        {`${annotationScoreBin}/5`}\n      </DoughnutChart>\n    </span>\n  );\n};\n\nexport default AnnotationScoreDoughnutChart;\n","import React, { FC } from 'react';\nimport { SwissProtIcon, TremblIcon } from 'franklin-sites';\nimport { EntryType } from '../../adapters/uniProtkbConverter';\nimport './styles/uniprotkb-title.scss';\n\nexport const ReviewedUnreviewed: FC<{ entryType: EntryType }> = ({\n  entryType,\n}) =>\n  entryType === EntryType.SWISSPROT ? (\n    <span className=\"uniprot-title__status icon--reviewed\">\n      <SwissProtIcon />\n    </span>\n  ) : (\n    <span className=\"uniprot-title__status icon--unreviewed\">\n      <TremblIcon />\n    </span>\n  );\n\nconst UniProtKBTitle: FC<{\n  primaryAccession: string;\n  entryType: EntryType;\n  uniProtkbId: string;\n}> = ({ primaryAccession, entryType, uniProtkbId }) => (\n  <span className=\"uniprot-title\">\n    <ReviewedUnreviewed entryType={entryType} />\n    {primaryAccession}\n    {` · ${uniProtkbId}`}\n  </span>\n);\n\nexport default UniProtKBTitle;\n","import React, { FC, Fragment } from 'react';\nimport { Card } from 'franklin-sites';\nimport ProteinNamesView from '../protein-data-views/ProteinNamesView';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport { NamesAndTaxonomyUIModel } from '../../adapters/namesAndTaxonomyConverter';\nimport GeneNamesView from '../protein-data-views/GeneNamesView';\nimport { OrganismListView } from '../protein-data-views/OrganismView';\nimport ProteomesListView from '../protein-data-views/ProteomesView';\nimport XRefView from '../protein-data-views/XRefView';\n\nconst NamesAndTaxonomySection: FC<{\n  data: NamesAndTaxonomyUIModel;\n  primaryAccession: string;\n}> = ({ data, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.NamesAndTaxonomy}>\n      <Card title={EntrySection.NamesAndTaxonomy}>\n        <h3>Protein names</h3>\n        <ProteinNamesView proteinNames={data.proteinNamesData} />\n        {data.geneNamesData && (\n          <Fragment>\n            <h3>Gene names</h3>\n            <GeneNamesView geneNamesData={data.geneNamesData} />\n          </Fragment>\n        )}\n        <h3>Organism names</h3>\n        <OrganismListView data={data.organismData} hosts={data.virusHosts} />\n        <h3>Proteome</h3>\n        <ProteomesListView data={data.proteomesData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default NamesAndTaxonomySection;\n","import React, { FC } from 'react';\nimport { Card } from 'franklin-sites';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport DiseaseInvolvementView from '../protein-data-views/DiseaseInvolvementView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport EntrySection from '../../types/entrySection';\nimport { hasContent } from '../../utils/utils';\nimport { UIModel } from '../../adapters/sectionConverter';\nimport {\n  CommentType,\n  DiseaseComment,\n  FreeTextComment,\n} from '../../types/commentTypes';\nimport XRefView from '../protein-data-views/XRefView';\nimport VariationView from '../protein-data-views/VariationView';\nimport FreeTextView from '../protein-data-views/FreeTextView';\n\nconst PathologyAndBiotechSection: FC<{\n  data: UIModel;\n  primaryAccession: string;\n  sequence: string;\n}> = ({ data, primaryAccession, sequence }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.PathologyAndBioTech}>\n      <Card title={EntrySection.PathologyAndBioTech}>\n        <DiseaseInvolvementView\n          comments={\n            data.commentsData.get(CommentType.DISEASE) as DiseaseComment[]\n          }\n          primaryAccession={primaryAccession}\n          includeTitle\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.ALLERGEN) as FreeTextComment[]\n          }\n          title={CommentType.ALLERGEN.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.BIOTECHNOLOGY\n            ) as FreeTextComment[]\n          }\n          title={CommentType.BIOTECHNOLOGY.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.DISRUPTION_PHENOTYPE\n            ) as FreeTextComment[]\n          }\n          title={CommentType.DISRUPTION_PHENOTYPE.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.PHARMACEUTICAL\n            ) as FreeTextComment[]\n          }\n          title={CommentType.PHARMACEUTICAL.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.TOXIC_DOSE) as FreeTextComment[]\n          }\n          title={CommentType.TOXIC_DOSE.toLowerCase()}\n        />\n        <FeaturesView features={data.featuresData} sequence={sequence} />\n        <VariationView primaryAccession={primaryAccession} title=\"Variants\" />\n        <KeywordView keywords={data.keywordData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default PathologyAndBiotechSection;\n","import React, { FC } from 'react';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport XRefView from '../protein-data-views/XRefView';\nimport FreeTextView from '../protein-data-views/FreeTextView';\nimport { CommentType, FreeTextComment } from '../../types/commentTypes';\nimport { UIModel } from '../../adapters/sectionConverter';\n\nconst ProteinProcessingSection: FC<{\n  data: UIModel;\n  primaryAccession: string;\n  sequence: string;\n}> = ({ data, sequence, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  const { featuresData, keywordData, xrefData, commentsData } = data;\n  return (\n    <div id={EntrySection.ProteinProcessing}>\n      <Card title={EntrySection.ProteinProcessing}>\n        <FeaturesView features={featuresData} sequence={sequence} />\n        <FreeTextView\n          comments={commentsData.get(CommentType.PTM) as FreeTextComment[]}\n          title={CommentType.PTM.toLowerCase()}\n        />\n        <KeywordView keywords={keywordData} />\n        <XRefView xrefs={xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default ProteinProcessingSection;\n","import React, { FC } from 'react';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport FreeTextView from '../protein-data-views/FreeTextView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport XRefView from '../protein-data-views/XRefView';\nimport { UIModel } from '../../adapters/sectionConverter';\nimport { CommentType, FreeTextComment } from '../../types/commentTypes';\n\nconst ExpressionSection: FC<{\n  data: UIModel;\n  primaryAccession: string;\n}> = ({ data, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.Expression}>\n      <Card title={EntrySection.Expression}>\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.TISSUE_SPECIFICITY\n            ) as FreeTextComment[]\n          }\n          title={CommentType.TISSUE_SPECIFICITY.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.INDUCTION) as FreeTextComment[]\n          }\n          title={CommentType.INDUCTION.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.DEVELOPMENTAL_STAGE\n            ) as FreeTextComment[]\n          }\n          title={CommentType.DEVELOPMENTAL_STAGE.toLowerCase()}\n        />\n        <KeywordView keywords={data.keywordData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default ExpressionSection;\n","import React, { FC } from 'react';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport { UIModel } from '../../adapters/sectionConverter';\nimport SubcellularLocationView from '../protein-data-views/SubcellularLocationView';\nimport {\n  SubcellularLocationComment,\n  CommentType,\n} from '../../types/commentTypes';\n\nconst SubcellularLocationSection: FC<{\n  data: UIModel;\n  sequence: string;\n}> = ({ data, sequence }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.SubCellularLocation}>\n      <Card title={EntrySection.SubCellularLocation}>\n        <SubcellularLocationView\n          comments={\n            data.commentsData.get(\n              CommentType.SUBCELLULAR_LOCATION\n            ) as SubcellularLocationComment[]\n          }\n        />\n        <FeaturesView features={data.featuresData} sequence={sequence} />\n        <KeywordView keywords={data.keywordData} />\n      </Card>\n    </div>\n  );\n};\n\nexport default SubcellularLocationSection;\n","import React, { FC, Fragment } from 'react';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport XRefView from '../protein-data-views/XRefView';\nimport SequenceView, {\n  SequenceCautionView,\n  MassSpectrometryView,\n  RNAEditingView,\n} from '../protein-data-views/SequenceView';\nimport { SequenceUIModel } from '../../adapters/sequenceConverter';\nimport FreeTextView from '../protein-data-views/FreeTextView';\n\nconst SequenceSection: FC<{\n  data: SequenceUIModel;\n  primaryAccession: string;\n}> = ({ data, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.Sequence}>\n      <Card title={EntrySection.Sequence}>\n        <SequenceView data={data} accession={primaryAccession} />\n        <FeaturesView\n          features={data.featuresData}\n          sequence={data.sequence.value}\n        />\n        {data.sequenceCaution && data.sequenceCaution.length > 0 && (\n          <Fragment>\n            <h3>Sequence caution</h3>\n            <SequenceCautionView data={data.sequenceCaution} />\n          </Fragment>\n        )}\n        {data.massSpectrometry && data.massSpectrometry.length > 0 && (\n          <Fragment>\n            <h3>Mass Spectrometry</h3>\n            <MassSpectrometryView data={data.massSpectrometry} />\n          </Fragment>\n        )}\n        {data.polymorphysm && data.polymorphysm.length > 0 && (\n          <Fragment>\n            <h3>Polymorphysm</h3>\n            <FreeTextView comments={data.polymorphysm} />\n          </Fragment>\n        )}\n        {data.rnaEditing && data.rnaEditing.length > 0 && (\n          <Fragment>\n            <h3>RNA Editing</h3>\n            <RNAEditingView data={data.rnaEditing} />\n          </Fragment>\n        )}\n        <KeywordView keywords={data.keywordData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default SequenceSection;\n","import React, { FC, useRef, useEffect } from 'react';\nimport { Card } from 'franklin-sites';\nimport { html, TemplateResult } from 'lit-html';\nimport ProtvistaDatatable from 'protvista-datatable';\nimport InteractionViewer from 'interaction-viewer';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport FreeTextView from '../protein-data-views/FreeTextView';\nimport XRefView from '../protein-data-views/XRefView';\nimport {\n  CommentType,\n  FreeTextComment,\n  InteractionComment,\n  Interaction,\n} from '../../types/commentTypes';\nimport { UIModel } from '../../adapters/sectionConverter';\nimport { loadWebComponent } from '../../../shared/utils/utils';\nimport {\n  getIntActQueryUrl,\n  getIntActQueryForAccessionUrl,\n} from '../../config/externalUrls';\n\nloadWebComponent('interaction-viewer', InteractionViewer);\nloadWebComponent('protvista-datatable', ProtvistaDatatable);\n\nconst getInteractionColumns = (primaryAccession: string) => ({\n  title: {\n    label: 'Type',\n    resolver: (d: Interaction) => d.type,\n  },\n  entry1: {\n    label: 'Entry 1',\n    resolver: (d: Interaction) =>\n      html`\n        <a href=\"/uniprotkb/${d.interactantOne.uniProtkbAccession}\"\n          >${d.interactantOne.uniProtkbAccession}</a\n        >\n        ${d.interactantOne.geneName} ${d.interactantOne.chainId}\n      `,\n  },\n  entry2: {\n    label: 'Entry 2',\n    resolver: (d: Interaction) =>\n      html`\n        <a\n          href=\"//www.uniprot.org/uniprot/${d.interactantTwo\n            .uniProtkbAccession}\"\n          >${d.interactantTwo.uniProtkbAccession}</a\n        >\n        ${d.interactantTwo.geneName} ${d.interactantTwo.chainId}\n      `,\n  },\n  experiments: {\n    label: 'Number of experiments',\n    resolver: (d: Interaction) => d.numberOfExperiments,\n  },\n  intact: {\n    label: 'Intact',\n    resolver: (d: Interaction) =>\n      html`\n        <a\n          href=${d.interactantOne.uniProtkbAccession\n            ? getIntActQueryUrl(\n                d.interactantOne.intActId,\n                d.interactantTwo.intActId\n              )\n            : getIntActQueryForAccessionUrl(primaryAccession)}\n          target=\"_blank\"\n          >${d.interactantOne.intActId}, ${d.interactantTwo.intActId}</a\n        >\n      `,\n  },\n  // NOTES SEEM TO BE MISSING FROM THE RESPONSE\n  // notes: {\n  //   label: 'Notes',\n  //   resolver: (d:Interaction) => d.\n  // }\n});\n\ninterface HTMLInteractionDatatable extends HTMLElement {\n  data?: Interaction[];\n  columns?: {\n    [name: string]: {\n      label: string;\n      resolver: (\n        d: Interaction\n      ) => string | number | TemplateResult | TemplateResult[];\n    };\n  };\n}\n\nconst InteractionSection: FC<{\n  data: UIModel;\n  primaryAccession: string;\n}> = ({ data, primaryAccession }): JSX.Element | null => {\n  const datatableContainer = useRef<HTMLInteractionDatatable>(null);\n  useEffect(() => {\n    const interactionComment = data.commentsData.get(\n      CommentType.INTERACTION\n    ) as InteractionComment[];\n    if (\n      datatableContainer &&\n      datatableContainer.current &&\n      interactionComment &&\n      interactionComment[0]\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      datatableContainer.current.data = interactionComment[0].interactions;\n      // eslint-disable-next-line no-param-reassign\n      datatableContainer.current.columns = getInteractionColumns(\n        primaryAccession\n      );\n    }\n  });\n\n  if (!hasContent(data)) {\n    return null;\n  }\n  const comments = data.commentsData.get(\n    CommentType.SUBUNIT\n  ) as FreeTextComment[];\n\n  return (\n    <div id={EntrySection.Interaction}>\n      <Card title={EntrySection.Interaction}>\n        {comments && (\n          <FreeTextView\n            comments={comments}\n            title={CommentType.SUBUNIT.toLowerCase()}\n          />\n        )}\n        <interaction-viewer accession={primaryAccession} />\n        <protvista-datatable ref={datatableContainer} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default InteractionSection;\n","import React, { FC } from 'react';\nimport { Card } from 'franklin-sites';\nimport FreeTextView from '../protein-data-views/FreeTextView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport XRefView from '../protein-data-views/XRefView';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport EntrySection from '../../types/entrySection';\nimport { hasContent } from '../../utils/utils';\nimport { CommentType, FreeTextComment } from '../../types/commentTypes';\nimport { UIModel } from '../../adapters/sectionConverter';\n\nconst FamilyAndDomainsSection: FC<{\n  data: UIModel;\n  sequence: string;\n  primaryAccession: string;\n}> = ({ data, sequence, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.FamilyAndDomains}>\n      <Card title={EntrySection.FamilyAndDomains}>\n        <FeaturesView features={data.featuresData} sequence={sequence} />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.DOMAIN) as FreeTextComment[]\n          }\n          title={CommentType.DOMAIN.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.SIMILARITY) as FreeTextComment[]\n          }\n          title={CommentType.SIMILARITY.toLowerCase()}\n        />\n        <KeywordView keywords={data.keywordData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default FamilyAndDomainsSection;\n","import React, { FC } from 'react';\nimport { groupBy } from 'lodash-es';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport EntrySection from '../../types/entrySection';\nimport { UIModel } from '../../adapters/sectionConverter';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport XRefView from '../protein-data-views/XRefView';\nimport PDBView from '../protein-data-views/PDBView';\nimport {\n  partitionStructureDatabases,\n  XrefUIModel,\n} from '../../utils/xrefUtils';\nimport { DatabaseCategory } from '../../types/databaseRefs';\nimport { entrySectionToDatabaseCategoryOrder } from '../../config/database';\n\nconst StructureSection: FC<{\n  data: UIModel;\n  primaryAccession: string;\n  sequence: string;\n  crc64?: string;\n}> = ({ data, primaryAccession, sequence, crc64 }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  const { arrayStructureDatabases, otherDatabases } = groupBy(\n    data.xrefData,\n    ({ category }) =>\n      category === DatabaseCategory.STRUCTURE\n        ? 'arrayStructureDatabases'\n        : 'otherDatabases'\n  );\n\n  // Need to save these as we want to display them in the xrefs section\n  const nonPDBDatabases = otherDatabases || [];\n\n  let PDBViewNode;\n  const structureDatabases =\n    arrayStructureDatabases &&\n    arrayStructureDatabases.length === 1 &&\n    arrayStructureDatabases[0];\n  if (structureDatabases) {\n    const {\n      PDBDatabase,\n      otherStructureDatabases,\n    } = partitionStructureDatabases(structureDatabases.databases);\n    if (PDBDatabase && PDBDatabase.xrefs.length) {\n      PDBViewNode = (\n        <PDBView\n          xrefs={PDBDatabase.xrefs}\n          primaryAccession={primaryAccession}\n        />\n      );\n    }\n    const nonPDBStructureDatabases: XrefUIModel = {\n      category: DatabaseCategory.STRUCTURE,\n      databases: otherStructureDatabases,\n    };\n    nonPDBDatabases.push(nonPDBStructureDatabases);\n  }\n\n  let XrefViewNode;\n  if (nonPDBDatabases && nonPDBDatabases.length) {\n    // The non-PDB databases need to be re-ordered accordingly\n    const categoryOrder = entrySectionToDatabaseCategoryOrder.get(\n      EntrySection.Structure\n    );\n    if (categoryOrder) {\n      XrefViewNode = (\n        <XRefView\n          xrefs={nonPDBDatabases.sort(\n            (a, b) =>\n              categoryOrder.indexOf(a.category) -\n              categoryOrder.indexOf(b.category)\n          )}\n          primaryAccession={primaryAccession}\n          crc64={crc64}\n        />\n      );\n    }\n  }\n\n  return (\n    <div id={EntrySection.Structure}>\n      <Card title={EntrySection.Structure}>\n        {PDBViewNode}\n        <FeaturesView features={data.featuresData} sequence={sequence} />\n        {XrefViewNode}\n      </Card>\n    </div>\n  );\n};\n\nexport default StructureSection;\n","import React from 'react';\nimport idx from 'idx';\nimport FunctionSection from '../components/entry/FunctionSection';\nimport NamesAndTaxonomySection from '../components/entry/NamesAndTaxonomySection';\nimport PathologyAndBiotechSection from '../components/entry/PathologyAndBiotechSection';\nimport ProteinProcessingSection from '../components/entry/ProteinProcessingSection';\nimport ExpressionSection from '../components/entry/ExpressionSection';\nimport SubcellularLocationSection from '../components/entry/SubcellularLocationSection';\nimport SequenceSection from '../components/entry/SequenceSection';\nimport InteractionSection from '../components/entry/InteractionSection';\nimport FamilyAndDomainsSection from '../components/entry/FamilyAndDomainsSection';\nimport StructureSection from '../components/entry/StructureSection';\nimport { UniProtkbUIModel } from '../adapters/uniProtkbConverter';\nimport { FunctionUIModel } from '../adapters/functionConverter';\nimport EntrySection from '../types/entrySection';\n\nconst UniProtKBEntryConfig: {\n  name: EntrySection;\n  sectionContent: (entryData: UniProtkbUIModel) => JSX.Element;\n}[] = [\n  {\n    name: EntrySection.Function,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <FunctionSection\n        data={data[EntrySection.Function] as FunctionUIModel}\n        primaryAccession={data.primaryAccession}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        key={EntrySection.Function}\n      />\n    ),\n  },\n  {\n    name: EntrySection.NamesAndTaxonomy,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <NamesAndTaxonomySection\n        data={data[EntrySection.NamesAndTaxonomy]}\n        primaryAccession={data.primaryAccession}\n        key={EntrySection.NamesAndTaxonomy}\n      />\n    ),\n  },\n  {\n    name: EntrySection.SubCellularLocation,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <SubcellularLocationSection\n        data={data[EntrySection.SubCellularLocation]}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        key={EntrySection.SubCellularLocation}\n      />\n    ),\n  },\n  {\n    name: EntrySection.PathologyAndBioTech,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <PathologyAndBiotechSection\n        data={data[EntrySection.PathologyAndBioTech]}\n        primaryAccession={data.primaryAccession}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        key={EntrySection.PathologyAndBioTech}\n      />\n    ),\n  },\n  {\n    name: EntrySection.ProteinProcessing,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <ProteinProcessingSection\n        data={data[EntrySection.ProteinProcessing]}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        primaryAccession={data.primaryAccession}\n        key={EntrySection.ProteinProcessing}\n      />\n    ),\n  },\n  {\n    name: EntrySection.Expression,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <ExpressionSection\n        data={data[EntrySection.Expression]}\n        primaryAccession={data.primaryAccession}\n        key={EntrySection.FamilyAndDomains}\n      />\n    ),\n  },\n  {\n    name: EntrySection.Interaction,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <InteractionSection\n        data={data[EntrySection.Interaction]}\n        primaryAccession={data.primaryAccession}\n        key={EntrySection.Interaction}\n      />\n    ),\n  },\n  {\n    name: EntrySection.Structure,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <StructureSection\n        data={data[EntrySection.Structure]}\n        primaryAccession={data.primaryAccession}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        key={EntrySection.Structure}\n        crc64={\n          idx(data, o => o[EntrySection.Sequence].sequence.crc64) || undefined\n        }\n      />\n    ),\n  },\n  {\n    name: EntrySection.FamilyAndDomains,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <FamilyAndDomainsSection\n        data={data[EntrySection.FamilyAndDomains]}\n        primaryAccession={data.primaryAccession}\n        sequence={data[EntrySection.Sequence].sequence.value}\n        key={EntrySection.Expression}\n      />\n    ),\n  },\n  {\n    name: EntrySection.Sequence,\n    sectionContent: (data: UniProtkbUIModel): JSX.Element => (\n      <SequenceSection\n        data={data[EntrySection.Sequence]}\n        primaryAccession={data.primaryAccession}\n        key={EntrySection.Sequence}\n      />\n    ),\n  },\n];\n\nexport default UniProtKBEntryConfig;\n","import React, { Fragment } from 'react';\nimport BaseLayout from './BaseLayout';\nimport './styles/side-bar-layout.scss';\n\ntype SideBarLayoutProps = {\n  title?: JSX.Element;\n  sidebar: JSX.Element;\n  children: JSX.Element;\n  actionButtons: JSX.Element;\n  invert?: boolean;\n};\n\nconst SideBarLayout: React.FC<SideBarLayoutProps> = ({\n  title,\n  sidebar,\n  actionButtons,\n  children,\n}) => (\n  <section className=\"sidebar-layout\">\n    <BaseLayout>\n      <Fragment>\n        {title && <section className=\"base-layout__title\">{title}</section>}\n        {actionButtons && (\n          <section className=\"base-layout__action-buttons\">\n            {actionButtons}\n          </section>\n        )}\n        <section className=\"base-layout__sidebar\">{sidebar}</section>\n        <section className=\"base-layout__content\">{children}</section>\n      </Fragment>\n    </BaseLayout>\n  </section>\n);\n\nexport default SideBarLayout;\n","import { Citation } from '../types/literatureTypes';\n\nexport const getCitationPubMedId = (citation: Citation) =>\n  citation.citationCrossReferences &&\n  citation.citationCrossReferences.find((xref) => xref.database === 'PubMed');\n\nexport const getDoiXref = (citation: Citation) =>\n  citation.citationCrossReferences &&\n  citation.citationCrossReferences.find((xref) => xref.database === 'DOI');\n\nconst formatCitationData = (citation: Citation) => {\n  const pubMedXref = getCitationPubMedId(citation);\n\n  const doiXref = getDoiXref(citation);\n\n  const pubmedId = pubMedXref && pubMedXref.id;\n\n  const journalInfo = {\n    journal: citation.journal,\n    volume: citation.volume,\n    firstPage: citation.firstPage,\n    lastPage: citation.lastPage,\n    publicationDate: citation.publicationDate,\n    doiId: doiXref && doiXref.id,\n  };\n  return { pubmedId, journalInfo };\n};\n\nexport default formatCitationData;\n","import React, { FC, Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport { Card } from 'franklin-sites';\nimport { hasContent } from '../../utils/utils';\nimport FreeTextView, { TextView } from '../protein-data-views/FreeTextView';\nimport CatalyticActivityView from '../protein-data-views/CatalyticActivityView';\nimport KeywordView from '../protein-data-views/KeywordView';\nimport XRefView from '../protein-data-views/XRefView';\nimport FeaturesView from '../protein-data-views/FeaturesView';\nimport EntrySection from '../../types/entrySection';\nimport {\n  CommentType,\n  CatalyticActivityComment,\n  FreeTextComment,\n} from '../../types/commentTypes';\n// import GoRibbon from './GoRibbon';\nimport UniProtKBEvidenceTag from '../protein-data-views/UniProtKBEvidenceTag';\nimport {\n  FunctionUIModel,\n  BioPhysicoChemicalProperties,\n  Absorption,\n  KineticParameters,\n  CofactorComment,\n} from '../../adapters/functionConverter';\nimport GOView from '../protein-data-views/GOView';\n\nexport const AbsorptionView: FC<{ data: Absorption }> = ({ data }) => {\n  return (\n    <Fragment>\n      <section className=\"text-block\">\n        {`Abs(max) = ${data.approximate && '~'}${data.max}nm`}\n      </section>\n      <section className=\"text-block\">\n        {data.note && <TextView comments={data.note.texts} />}\n        {data.evidences && <UniProtKBEvidenceTag evidences={data.evidences} />}\n      </section>\n    </Fragment>\n  );\n};\n\nexport const KineticsView: FC<{ data: KineticParameters }> = ({ data }) => {\n  return (\n    <Fragment>\n      <section className=\"text-block\">\n        {data.michaelisConstants && (\n          <ul className=\"no-bullet\">\n            {data.michaelisConstants.map((km) => (\n              <li key={km.constant}>\n                K<sub>M</sub>\n                {`=${km.constant}${km.unit} for ${km.substrate} `}\n                <UniProtKBEvidenceTag evidences={km.evidences} />\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section className=\"text-block\">\n        {data.note && <TextView comments={data.note.texts} />}\n      </section>\n    </Fragment>\n  );\n};\n\nconst BioPhysicoChemicalPropertiesView: FC<{\n  data: BioPhysicoChemicalProperties;\n}> = ({ data }) => {\n  if (!data) {\n    return null;\n  }\n  return (\n    <Fragment>\n      {data.absorption && (\n        <Fragment>\n          <h3>Absorption</h3>\n          <AbsorptionView data={data.absorption} />\n        </Fragment>\n      )}\n      {data.kinetics && (\n        <Fragment>\n          <h3>Kinetics</h3>\n          <KineticsView data={data.kinetics} />\n        </Fragment>\n      )}\n      {data.pHDependence && (\n        <Fragment>\n          <h3>pH Dependence</h3>\n          <TextView comments={data.pHDependence} />\n        </Fragment>\n      )}\n      {data.redoxPotential && (\n        <Fragment>\n          <h3>Redox Potential</h3>\n          <TextView comments={data.redoxPotential} />\n        </Fragment>\n      )}\n      {data.temperatureDependence && (\n        <Fragment>\n          <h3>Temperature Dependence</h3>\n          <TextView comments={data.temperatureDependence} />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport const CofactorView: FC<{\n  cofactors?: CofactorComment[];\n  title?: string;\n}> = ({ cofactors, title }) => {\n  if (!cofactors || !cofactors.length) {\n    return null;\n  }\n  return (\n    <Fragment>\n      {title && <h3>{title}</h3>}\n      {cofactors.map((cofactorComment) => (\n        <section className=\"text-block\" key={v1()}>\n          {cofactorComment.cofactors &&\n            cofactorComment.cofactors.map((cofactor) => (\n              <span key={cofactor.name}>\n                {cofactor.name}{' '}\n                {cofactor.evidences && (\n                  <UniProtKBEvidenceTag evidences={cofactor.evidences} />\n                )}\n              </span>\n            ))}\n          {cofactorComment.note && (\n            <TextView comments={cofactorComment.note.texts} />\n          )}\n        </section>\n      ))}\n    </Fragment>\n  );\n};\n\nconst FunctionSection: FC<{\n  data: FunctionUIModel;\n  sequence: string;\n  primaryAccession: string;\n}> = ({ data, sequence, primaryAccession }): JSX.Element | null => {\n  if (!hasContent(data)) {\n    return null;\n  }\n  return (\n    <div id={EntrySection.Function}>\n      <Card title={EntrySection.Function}>\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.FUNCTION) as FreeTextComment[]\n          }\n        />\n        <CatalyticActivityView\n          comments={\n            data.commentsData.get(\n              CommentType.CATALYTIC_ACTIVITY\n            ) as CatalyticActivityComment[]\n          }\n          title={CommentType.CATALYTIC_ACTIVITY.toLocaleLowerCase()}\n        />\n        <CofactorView\n          cofactors={\n            data.commentsData.get(CommentType.COFACTOR) as CofactorComment[]\n          }\n          title={CommentType.COFACTOR.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.PATHWAY) as FreeTextComment[]\n          }\n          title={CommentType.PATHWAY.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.MISCELLANEOUS\n            ) as FreeTextComment[]\n          }\n          title={CommentType.MISCELLANEOUS.toLowerCase()}\n        />\n        <BioPhysicoChemicalPropertiesView\n          data={data.bioPhysicoChemicalProperties}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(CommentType.PATHWAY) as FreeTextComment[]\n          }\n          title={CommentType.PATHWAY.toLowerCase()}\n        />\n        <FreeTextView\n          comments={\n            data.commentsData.get(\n              CommentType.ACTIVITY_REGULATION\n            ) as FreeTextComment[]\n          }\n          title={CommentType.ACTIVITY_REGULATION.toLowerCase()}\n        />\n        <FeaturesView features={data.featuresData} sequence={sequence} />\n        {/* <GoRibbon primaryAccession={primaryAccession} /> */}\n        {data.goTerms && <GOView data={data.goTerms} />}\n        <KeywordView keywords={data.keywordData} />\n        <XRefView xrefs={data.xrefData} primaryAccession={primaryAccession} />\n      </Card>\n    </div>\n  );\n};\n\nexport default FunctionSection;\n","import React, { Fragment, useState, useCallback, useRef } from 'react';\nimport '@swissprot/rhea-reaction-visualizer';\nimport { useModal, ModalBackdrop, Window, Loader } from 'franklin-sites';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport {\n  CatalyticActivityComment,\n  PhysiologicalReactionDirection,\n  PhysiologicalReaction,\n} from '../../types/commentTypes';\nimport './styles/catalytic-activity-view.scss';\n\n// example accession to view this component: P31937\n\nexport const getRheaId = (referenceId: string) => {\n  const re = /^RHEA:(\\d+)$/i;\n  const match = referenceId.match(re);\n  return match && parseInt(match[1], 10);\n};\n\nexport const isRheaReactionReference = ({\n  database,\n  id,\n}: {\n  database: string;\n  id: string;\n}) => database === 'Rhea' && !!getRheaId(id);\n\nexport const ZoomModalContent: React.FC<ChebiImageData> = ({\n  chebi,\n  imgURL,\n}) => {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [loading, setLoading] = useState(true);\n  const image = new Image();\n  image.src = imgURL;\n  image.onload = () => {\n    if (imageRef && imageRef.current) {\n      imageRef.current.src = image.src;\n      setLoading(false);\n    }\n  };\n  return (\n    <div className=\"zoom-image-container\">\n      <img\n        ref={imageRef}\n        alt={chebi}\n        style={{ display: loading ? 'none' : 'block' }}\n      />\n      {loading && <Loader />}\n    </div>\n  );\n};\n\ntype RheaReactionVisualizerProps = {\n  rheaId: number;\n  show: boolean;\n};\n\ntype ChebiImageData = {\n  chebi: string;\n  imgURL: string;\n} | null;\n\nexport const RheaReactionVisualizer: React.FC<RheaReactionVisualizerProps> = ({\n  rheaId,\n  show: initialShow,\n}) => {\n  const [show, setShow] = useState(initialShow);\n  const [zoomImageData, setZoomImageData] = useState<ChebiImageData>();\n  const { displayModal, setDisplayModal, Modal } = useModal(\n    ModalBackdrop,\n    Window\n  );\n  const callback = useCallback(\n    (node): void => {\n      if (node) {\n        node.addEventListener(\n          'zoomClicked',\n          ({ detail }: { detail: ChebiImageData }) => {\n            setZoomImageData(detail);\n            setDisplayModal(true);\n          }\n        );\n      }\n    },\n    [setDisplayModal]\n  );\n\n  return (\n    <Fragment>\n      <button\n        type=\"button\"\n        className=\"button tertiary rhea-reaction-visualizer__button\"\n        onClick={() => setShow(!show)}\n      >\n        {`${show ? 'Hide' : 'View'} Rhea reaction`}\n      </button>\n      {show && (\n        <Fragment>\n          <div className=\"rhea-reaction-visualizer__component\">\n            <rhea-reaction rheaid={rheaId} zoom showids ref={callback} />\n          </div>\n          {displayModal && zoomImageData && zoomImageData.imgURL && (\n            <Modal\n              handleExitModal={() => setDisplayModal(false)}\n              height=\"30vh\"\n              width=\"30vw\"\n            >\n              <ZoomModalContent\n                chebi={zoomImageData.chebi}\n                imgURL={zoomImageData.imgURL}\n              />\n            </Modal>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport const physiologicalReactionDirectionToString = new Map<\n  PhysiologicalReactionDirection,\n  string\n>([\n  [PhysiologicalReactionDirection.LeftToRight, 'forward'],\n  [PhysiologicalReactionDirection.RightToLeft, 'backward'],\n]);\n\nexport type ReactionDirectionProps = {\n  physiologicalReactions: PhysiologicalReaction[];\n};\n\nexport const ReactionDirection: React.FC<ReactionDirectionProps> = ({\n  physiologicalReactions,\n}) => {\n  /*\n  Possible output:\n    1. This reaction proceeds in the backward direction <Evidence>\n    2. This reaction proceeds in the forward direction <Evidence>\n    3. This reaction proceeds in the forward <Evidence> and the backward <Evidence> directions.\n  */\n  if (!physiologicalReactions || physiologicalReactions.length === 0) {\n    return null;\n  }\n  if (physiologicalReactions.length > 2) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'More than two physiological reactions encountered when rendering catalytic activity'\n    );\n    return null;\n  }\n  return (\n    <Fragment>\n      {`This reaction proceeds in `}\n      {physiologicalReactions\n        // Ensure that left-to-right/forward comes before right-to-left/backward\n        .sort((a, b) => a.directionType.localeCompare(b.directionType))\n        .map(({ reactionCrossReference, directionType, evidences }, index) => (\n          <Fragment key={reactionCrossReference.id}>\n            {index > 0 && ' and '}\n            {`the `}\n            <span data-testid=\"direction-text\">\n              {physiologicalReactionDirectionToString.get(directionType)}\n            </span>\n            {physiologicalReactions.length === 1 && ' direction '}\n            <UniProtKBEvidenceTag evidences={evidences} />\n            {physiologicalReactions.length === 2 &&\n              index === 1 &&\n              ' directions '}\n          </Fragment>\n        ))}\n    </Fragment>\n  );\n};\n\ntype CatalyticActivityProps = {\n  comments?: CatalyticActivityComment[];\n  title?: string;\n};\n\nconst CatalyticActivityView: React.FC<CatalyticActivityProps> = ({\n  comments,\n  title,\n}) => {\n  if (!comments || comments.length <= 0) {\n    return null;\n  }\n  let firstRheaId: number | null = null;\n  return (\n    <Fragment>\n      {title && <h3>{title}</h3>}\n      {comments.map(({ reaction, physiologicalReactions }) => {\n        if (!reaction) {\n          return null;\n        }\n        // Using only the first rhea reaction reference because FW has assured us that\n        // there will be either 0 or 1 types of this reference (ie never > 1)\n\n        const rheaReactionReference =\n          reaction.reactionCrossReferences &&\n          reaction.reactionCrossReferences.find(isRheaReactionReference);\n        const rheaId =\n          rheaReactionReference && getRheaId(rheaReactionReference.id);\n        if (rheaId && !firstRheaId) {\n          firstRheaId = rheaId;\n        }\n        return (\n          <span className=\"text-block\" key={reaction.ecNumber}>\n            <strong>{reaction.ecNumber}</strong>\n            {/* Need a link to search for EC in UniProtKB:\n             https://www.ebi.ac.uk/panda/jira/browse/TRM-23597 */}\n            {` ${reaction.name}`}\n            {reaction.evidences && (\n              <UniProtKBEvidenceTag evidences={reaction.evidences} />\n            )}\n            {physiologicalReactions && physiologicalReactions.length && (\n              <ReactionDirection\n                physiologicalReactions={physiologicalReactions}\n              />\n            )}\n            {!!rheaId && (\n              <RheaReactionVisualizer\n                rheaId={rheaId}\n                show={rheaId === firstRheaId}\n              />\n            )}\n          </span>\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default CatalyticActivityView;\n","import React, { Fragment, useCallback, useState, FC } from 'react';\nimport { TemplateResult } from 'lit-html';\nimport ProtvistaDatatable from 'protvista-datatable';\nimport { UniProtEvidenceTagContent } from './UniProtKBEvidenceTag';\nimport { loadWebComponent } from '../../../shared/utils/utils';\nimport { ProtvistaFeature, ProcessedFeature } from './FeaturesView';\nimport { ProtvistaVariant } from './VariationView';\nimport { EvidenceData } from '../../config/evidenceCodes';\nimport { Evidence } from '../../types/modelTypes';\n\nloadWebComponent('protvista-datatable', ProtvistaDatatable);\n\ntype FeatureColumns = {\n  [name: string]: {\n    label: string;\n    resolver: (\n      d: ProtvistaFeature & ProtvistaVariant\n    ) => string | number | TemplateResult | TemplateResult[];\n  };\n};\n\nexport type FeaturesTableCallback = (\n  evidenceData: EvidenceData,\n  references: Evidence[] | undefined\n) => void;\n\nconst FeaturesTableView: FC<{\n  data: ProcessedFeature[] | ProtvistaVariant[];\n  getColumnConfig: (\n    callback: (\n      evidenceData: EvidenceData,\n      references: Evidence[] | undefined\n    ) => void\n  ) => FeatureColumns;\n}> = ({ data, getColumnConfig }) => {\n  const [showEvidenceTagData, setShowEvidenceTagData] = useState(false);\n  const [selectedEvidenceData, setSelectedEvidenceData] = useState<\n    EvidenceData\n  >();\n  const [selectedReferences, setSelectedReferences] = useState<Evidence[]>();\n\n  const evidenceTagCallback: FeaturesTableCallback = (\n    evidenceData,\n    references\n  ) => {\n    setSelectedEvidenceData(evidenceData);\n    setSelectedReferences(references);\n    setShowEvidenceTagData(true);\n  };\n\n  const setTableData = useCallback(\n    (node): void => {\n      if (node) {\n        // eslint-disable-next-line no-param-reassign\n        node.data = data;\n        // eslint-disable-next-line no-param-reassign\n        node.columns = getColumnConfig(evidenceTagCallback);\n      }\n    },\n    [data, getColumnConfig]\n  );\n\n  return (\n    <Fragment>\n      <protvista-datatable ref={setTableData} />\n      <div\n        className={`evidence-tag-content ${showEvidenceTagData &&\n          'evidence-tag-content--visible'}`}\n      >\n        {selectedEvidenceData && selectedReferences && (\n          <UniProtEvidenceTagContent\n            evidenceData={selectedEvidenceData}\n            evidences={selectedReferences}\n          />\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default FeaturesTableView;\n","import React, { Fragment } from 'react';\nimport { ExpandableList } from 'franklin-sites';\nimport { GoTerm, GroupedGoTerms } from '../../adapters/functionConverter';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport externalUrls from '../../config/externalUrls';\n\nexport const GOTermsView: React.FC<{ data: GoTerm[] }> = ({ data }) => (\n  <section className=\"text-block\">\n    <ExpandableList descriptionString=\"terms\">\n      {data\n        .filter(({ id }) => id)\n        .map(\n          ({ id, evidences, termDescription }) =>\n            id && {\n              id,\n              content: (\n                <Fragment>\n                  <a href={externalUrls.QuickGO(id)}>{termDescription}</a>\n                  {/* TODO: currently not displaying the GoEvidenceType property\n        which will have to be displayed like an evidence tag */}\n                  {evidences && <UniProtKBEvidenceTag evidences={evidences} />}\n                </Fragment>\n              ),\n            }\n        )}\n    </ExpandableList>\n  </section>\n);\n\nconst GOView: React.FC<{ data: GroupedGoTerms }> = ({ data }) => (\n  <Fragment>\n    {Array.from(data.entries()).map(([aspect, terms]) => (\n      <section className=\"text-block\" key={aspect}>\n        <h4>{aspect}</h4>\n        {terms && <GOTermsView data={terms} />}\n      </section>\n    ))}\n  </Fragment>\n);\n\nexport default GOView;\n","import React, { Fragment } from 'react';\nimport { InfoList } from 'franklin-sites';\nimport { Xref } from '../../types/commentTypes';\n\nconst ProteomesId: React.FC<{ id?: string }> = ({ id }) => (\n  <Fragment>\n    {id}\n    {/* <a href={`//www.uniprot.org/proteomes/${id}`}>\n    {id}\n  </a> */}\n  </Fragment>\n);\n\nconst ProteomesComponents: React.FC<{\n  components?: { [key: string]: string };\n}> = ({ components }) => (\n  <Fragment>{components && Object.values(components).join(', ')}</Fragment>\n);\n\nconst ProteomesView: React.FC<{ data?: Xref[]; isCompact?: boolean }> = ({\n  data,\n  isCompact = false,\n}) => {\n  if (!data) {\n    return null;\n  }\n  return (\n    <Fragment>\n      {data.map((proteome) => (\n        <InfoList\n          key={proteome.id}\n          isCompact={isCompact}\n          infoData={[\n            {\n              title: 'Identifier',\n              content: <ProteomesId id={proteome.id} />,\n            },\n            {\n              title: 'Component',\n              content: <ProteomesComponents components={proteome.properties} />,\n            },\n          ]}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default ProteomesView;\n","import React, { Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport { InfoList, ExpandableList } from 'franklin-sites';\nimport { DiseaseComment } from '../../types/commentTypes';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport { databaseToDatabaseInfo } from '../../config/database';\nimport { XRef } from './XRefView';\n\ntype DiseaseInvolvementEntryProps = {\n  comment: DiseaseComment[][0];\n  accession: string;\n};\n\ntype DiseaseInvolvementProps = {\n  comments?: DiseaseComment[];\n  primaryAccession: string;\n  includeTitle?: boolean;\n};\n\nexport const DiseaseInvolvementEntry: React.FC<DiseaseInvolvementEntryProps> = ({\n  comment,\n  accession,\n}) => {\n  const { disease, note } = comment;\n  if (!disease) {\n    return null;\n  }\n  const {\n    diseaseId,\n    acronym = '',\n    evidences,\n    description,\n    diseaseCrossReference,\n  } = disease;\n  if (!diseaseId) {\n    return null;\n  }\n  const infoData = [];\n\n  const evidenceNodes = evidences && (\n    <UniProtKBEvidenceTag evidences={evidences} />\n  );\n\n  if (note) {\n    const { texts } = note;\n    if (texts) {\n      infoData.push({\n        title: 'Note',\n        content: (\n          <ExpandableList descriptionString=\"notes\">\n            {texts.map(text => ({\n              id: v1(),\n              content: text.value,\n            }))}\n          </ExpandableList>\n        ),\n      });\n    }\n  }\n\n  if (description) {\n    infoData.push({\n      title: 'Description',\n      content: description,\n    });\n  }\n\n  if (diseaseCrossReference) {\n    const { database, id } = diseaseCrossReference;\n    if (database && id && databaseToDatabaseInfo[database]) {\n      infoData.push({\n        title: 'See also',\n        content: (\n          <XRef\n            database={database}\n            xref={diseaseCrossReference}\n            primaryAccession={accession}\n          />\n        ),\n      });\n    }\n  }\n  return (\n    <Fragment>\n      <h3>{`${diseaseId} ${acronym && `(${acronym})`}`}</h3>\n      <span className=\"text-block\">{evidenceNodes}</span>\n      <InfoList infoData={infoData} />\n    </Fragment>\n  );\n};\n\nexport const DiseaseInvolvementView: React.FC<DiseaseInvolvementProps> = ({\n  comments,\n  primaryAccession: accession,\n  includeTitle = false,\n}) => {\n  if (!comments || comments.length <= 0) {\n    return null;\n  }\n  const nodes = comments.map(comment => (\n    <DiseaseInvolvementEntry\n      key={v1()}\n      comment={comment}\n      accession={accession}\n    />\n  ));\n  return (\n    <Fragment>\n      {includeTitle && <h3>Involvement in disease</h3>}\n      {nodes}\n    </Fragment>\n  );\n};\n\nexport default DiseaseInvolvementView;\n","import React, { FC, Fragment } from 'react';\nimport { v1 } from 'uuid';\nimport { SubcellularLocationComment } from '../../types/commentTypes';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport { TextView } from './FreeTextView';\n\nconst SubcellularLocationView: FC<{\n  comments?: SubcellularLocationComment[];\n}> = ({ comments }) => {\n  if (!comments || !comments.length) {\n    return null;\n  }\n  return (\n    <Fragment>\n      {comments.map(\n        subcellData =>\n          subcellData.subcellularLocations && (\n            <section\n              className=\"text-block\"\n              key={subcellData.molecule ? subcellData.molecule : v1()}\n            >\n              <h3>{subcellData.molecule}</h3>\n              {subcellData.subcellularLocations.map(subcellularLocation => (\n                <div\n                  key={`${\n                    subcellularLocation.location.value\n                  }${subcellularLocation.topology &&\n                    subcellularLocation.topology.value}`}\n                >\n                  <strong>{subcellularLocation.location.value}</strong>{' '}\n                  {subcellularLocation.location.evidences && (\n                    <UniProtKBEvidenceTag\n                      evidences={subcellularLocation.location.evidences}\n                    />\n                  )}\n                  {subcellularLocation.topology && (\n                    <Fragment>\n                      {`: ${subcellularLocation.topology.value} `}\n                      {subcellularLocation.topology.evidences && (\n                        <UniProtKBEvidenceTag\n                          evidences={subcellularLocation.topology.evidences}\n                        />\n                      )}\n                    </Fragment>\n                  )}\n                </div>\n              ))}\n              {subcellData.note && (\n                <TextView comments={subcellData.note.texts} />\n              )}\n            </section>\n          )\n      )}\n    </Fragment>\n  );\n};\n\nexport default SubcellularLocationView;\n","import React, { Fragment, useState, useEffect, useCallback } from 'react';\nimport { InfoList, Sequence, ExternalLink } from 'franklin-sites';\nimport idx from 'idx';\nimport { Link } from 'react-router-dom';\nimport {\n  Isoform,\n  SequenceCautionComment,\n  MassSpectrometryComment,\n  RNAEditingComment,\n  AlternativeProductsComment,\n} from '../../types/commentTypes';\nimport apiUrls from '../../config/apiUrls';\nimport fetchData from '../../../shared/utils/fetchData';\nimport { formatLargeNumber } from '../../../shared/utils/utils';\nimport { SequenceUIModel } from '../../adapters/sequenceConverter';\nimport UniProtKBEvidenceTag from './UniProtKBEvidenceTag';\nimport numberView, { Unit } from './NumberView';\nimport externalUrls from '../../config/externalUrls';\nimport submitBlast from '../../../blast_website/BlastUtils';\n\nexport type SequenceData = {\n  value: string;\n  length: number;\n  molWeight: number;\n  crc64: string;\n};\n\ntype SequenceViewProps = {\n  accession: string;\n  data: SequenceUIModel;\n};\n\nexport const SequenceInfo: React.FC<{\n  isoformId: string;\n  isoformSequence?: SequenceData;\n  lastUpdateDate?: string | null;\n  displayLoadSequenceButton?: boolean;\n}> = ({\n  isoformId,\n  isoformSequence,\n  lastUpdateDate,\n  displayLoadSequenceButton = true,\n}) => {\n  const [data, setData] = useState(null);\n  const [isoformToFetch, setIsoformToFetch] = useState('');\n\n  useEffect(() => {\n    if (!isoformToFetch) {\n      return;\n    }\n    const fetchIsoformData = async () => {\n      const result = await fetchData(`${apiUrls.entry(isoformToFetch)}`);\n      setData(result.data.sequence);\n    };\n\n    fetchIsoformData();\n  }, [isoformToFetch]);\n\n  const onBlastClick = useCallback(() => {\n    const dataToDisplay = data || isoformSequence;\n    if (dataToDisplay && dataToDisplay.value) {\n      submitBlast(dataToDisplay.value);\n    }\n  }, [isoformSequence, data]);\n\n  const dataToDisplay = data || isoformSequence;\n\n  if (!dataToDisplay && displayLoadSequenceButton) {\n    return (\n      <button\n        type=\"button\"\n        className=\"button secondary\"\n        onClick={() => setIsoformToFetch(isoformId)}\n      >\n        Load sequence\n      </button>\n    );\n  }\n\n  if (!dataToDisplay) {\n    return null;\n  }\n\n  const infoData = [\n    {\n      title: 'Length',\n      content: dataToDisplay.length,\n    },\n    {\n      title: 'Mass (Da)',\n      content: formatLargeNumber(dataToDisplay.molWeight),\n    },\n    {\n      title: 'Last updated',\n      content: lastUpdateDate,\n    },\n    {\n      title: 'Checksum',\n      content: dataToDisplay.crc64,\n    },\n  ];\n\n  return (\n    <Fragment>\n      {dataToDisplay && <InfoList infoData={infoData} />}\n      <Sequence\n        sequence={dataToDisplay.value}\n        accession={isoformId}\n        downloadUrl={apiUrls.sequenceFasta(isoformId)}\n        // These callbacks have been commented out as neither BLAST\n        // nor the basket have been implemented\n        onBlastClick={onBlastClick}\n        // onAddToBasketClick={() => {}}\n      />\n    </Fragment>\n  );\n};\n\nexport const IsoformInfo: React.FC<{\n  isoformData: Isoform;\n  canonicalAccession: string;\n}> = ({ isoformData, canonicalAccession }) => {\n  const infoListData = [\n    {\n      title: 'Name',\n      content: isoformData.name.value,\n    },\n    {\n      title: 'Synonyms',\n      content: (idx(isoformData, (o) => o.synonyms) || [])\n        .map((syn) => syn.value)\n        .join(', '),\n    },\n    {\n      title: 'Differences from canonical',\n      content: isoformData.varSeqs && !!isoformData.varSeqs.length && (\n        <ul className=\"no-bullet\">\n          {isoformData.varSeqs.map(\n            ({ location, alternativeSequence, evidences }) => (\n              <li key={`${location.start.value}-${location.end.value}`}>\n                <Link\n                  to={`/blast/accession/${canonicalAccession}/positions/${location.start.value}-${location.end.value}`}\n                >{`${location.start.value}-${location.end.value}: `}</Link>\n                {alternativeSequence && alternativeSequence.originalSequence\n                  ? `${alternativeSequence.originalSequence}  → ${\n                      alternativeSequence.alternativeSequences &&\n                      alternativeSequence.alternativeSequences.join(', ')\n                    }`\n                  : 'Missing'}\n                {evidences && <UniProtKBEvidenceTag evidences={evidences} />}\n              </li>\n            )\n          )}\n        </ul>\n      ),\n    },\n    {\n      title: 'Note',\n      content:\n        isoformData.note &&\n        isoformData.note.texts.map((note) => note.value).join(', '),\n    },\n  ];\n  // TODO isoformData.sequenceIds is used to get the features for\n  // splice variants - they need to be somehow displayed\n  const name = isoformData.isoformIds.join(', ');\n  return (\n    <Fragment key={isoformData.isoformIds.join('')}>\n      <hr />\n      <h3 id={name}>{name}</h3>\n      {isoformData.isoformSequenceStatus === 'Displayed' && (\n        <p>\n          {'This isoform has been chosen as the '}\n          <strong>canonical</strong>\n          {' sequence. All positional information in '}\n          {'this entry refers to it. This is also the sequence '}\n          that appears in the downloadable versions of the entry.\n        </p>\n      )}\n      {isoformData.isoformSequenceStatus === 'External' && (\n        <section>\n          <p>\n            The sequence of this isoform can be found in the external entry\n            linked below. Isoforms of the same protein are often annotated in\n            two different entries if their sequences differ significantly.{' '}\n          </p>\n          {/* TODO: this is hacky and temporary until we sort out\n          external isoforms */}\n          <Link\n            className=\"button secondary\"\n            to={`/uniprotkb/${isoformData.isoformIds[0].substring(\n              0,\n              isoformData.isoformIds[0].length - 2\n            )}`}\n          >\n            View isoform\n          </Link>\n        </section>\n      )}\n      <InfoList infoData={infoListData} />\n    </Fragment>\n  );\n};\n\nexport const SequenceCautionView: React.FC<{\n  data: SequenceCautionComment[];\n}> = ({ data }) => {\n  return (\n    <Fragment>\n      {data.map(({ sequence, sequenceCautionType, note, evidences }) => (\n        <section\n          className=\"text-block\"\n          key={`${sequenceCautionType}-${sequence}`}\n        >\n          {`The sequence `}\n          <ExternalLink url={externalUrls.ENA(sequence)}>\n            {sequence}\n          </ExternalLink>\n          {` differs from that shown. Reason: ${sequenceCautionType} `}\n          {note}\n          {evidences && <UniProtKBEvidenceTag evidences={evidences} />}\n        </section>\n      ))}\n    </Fragment>\n  );\n};\n\nexport const MassSpectrometryView: React.FC<{\n  data: MassSpectrometryComment[];\n}> = ({ data }) => (\n  <Fragment>\n    {data.map((item) => (\n      <section className=\"text-block\" key={`${item.molWeight}${item.method}`}>\n        {item.molecule && <h3>{item.molecule}</h3>}\n        {`Molecular mass is ${numberView({\n          value: item.molWeight,\n          unit: Unit.DA,\n        })}. `}\n        {item.method && `Determined by ${item.method}. `}\n        {item.note}\n        <UniProtKBEvidenceTag evidences={item.evidences} />\n      </section>\n    ))}\n  </Fragment>\n);\n\nexport const RNAEditingView: React.FC<{ data: RNAEditingComment[] }> = ({\n  data,\n}) => (\n  <Fragment>\n    {data.map((item) => (\n      <section\n        className=\"text-block\"\n        key={`${\n          item.positions && item.positions.map((pos) => pos.position).join('')\n        }`}\n      >\n        {item.positions && (\n          <div>\n            {'Edited at positions '}\n            {item.positions.map((position) => (\n              <span key={position.position}>\n                {position.position}{' '}\n                <UniProtKBEvidenceTag evidences={position.evidences} />\n              </span>\n            ))}\n          </div>\n        )}\n        {item.note && (\n          <div>\n            {item.note.texts.map((text) => (\n              <span key={text.value}>\n                {text.value}{' '}\n                {text.evidences && (\n                  <UniProtKBEvidenceTag evidences={text.evidences} />\n                )}\n              </span>\n            ))}\n          </div>\n        )}\n      </section>\n    ))}\n  </Fragment>\n);\n\nexport const IsoformView: React.FC<{\n  alternativeProducts: AlternativeProductsComment;\n  canonicalComponent?: JSX.Element;\n  includeSequences?: boolean;\n  canonicalAccession: string;\n}> = ({\n  alternativeProducts,\n  canonicalComponent,\n  includeSequences = true,\n  canonicalAccession,\n}) => {\n  let isoformCountNode;\n  const { isoforms, events } = alternativeProducts;\n  if (isoforms && events) {\n    isoformCountNode = (\n      <p>\n        {`This entry describes `}\n        <strong>{isoforms.length}</strong>\n        {` isoforms produced by `}\n        <strong>{events.join(' & ')}</strong>.\n      </p>\n    );\n  }\n\n  let notesNode;\n  const texts = idx(alternativeProducts, (o) => o.note.texts);\n  if (texts) {\n    notesNode = <p>{texts.map((text) => text.value).join(' ')}</p>;\n  }\n\n  let isoformsNode;\n  if (isoforms) {\n    isoformsNode = isoforms.map((isoform) => {\n      const isoformComponent = (\n        <SequenceInfo\n          isoformId={isoform.isoformIds[0]}\n          displayLoadSequenceButton={\n            isoform.isoformSequenceStatus !== 'External'\n          }\n        />\n      );\n      return (\n        <Fragment key={isoform.isoformIds.join('')}>\n          <IsoformInfo\n            isoformData={isoform}\n            canonicalAccession={canonicalAccession}\n          />\n          {includeSequences && isoform.isoformSequenceStatus !== 'External' && (\n            <Fragment>\n              {canonicalComponent &&\n              isoform.isoformSequenceStatus === 'Displayed'\n                ? canonicalComponent\n                : isoformComponent}\n            </Fragment>\n          )}\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Fragment>\n      {isoformCountNode}\n      {notesNode}\n      {isoformsNode}\n    </Fragment>\n  );\n};\n\nconst SequenceView: React.FC<SequenceViewProps> = ({ accession, data }) => {\n  const sequenceInfoData = [\n    {\n      title: 'Sequence status',\n      content: data.status,\n    },\n    {\n      title: 'Sequence processing',\n      content: data.processing,\n    },\n  ];\n\n  // Every entry should have a sequence\n  if (!data.sequence) {\n    return null;\n  }\n\n  const canonicalComponent = (\n    <SequenceInfo\n      isoformId={accession}\n      isoformSequence={data.sequence}\n      lastUpdateDate={data.lastUpdateDate}\n    />\n  );\n\n  if (!data.alternativeProducts && data.sequence) {\n    return canonicalComponent;\n  }\n\n  if (!data.alternativeProducts) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <InfoList infoData={sequenceInfoData} />\n      <IsoformView\n        alternativeProducts={data.alternativeProducts}\n        canonicalComponent={canonicalComponent}\n        canonicalAccession={accession}\n      />\n    </Fragment>\n  );\n};\n\nexport default SequenceView;\n","import { formatLargeNumber } from '../../../shared/utils/utils';\n\nexport enum Unit {\n  DA = 'Da',\n  AA = 'AA',\n}\n\nconst numberView = ({ value, unit }: { value?: number; unit?: Unit }): string =>\n  typeof value !== 'undefined'\n    ? `${formatLargeNumber(value)}${unit ? ` ${unit}` : ''}`\n    : '';\n\nexport default numberView;\n","const params: { [key: string]: string } = {\n  dataset: 'uniprotkb_refprotswissprot',\n  threshold: '10',\n  matrix: '',\n  blastFilter: 'false',\n  gapped: 'true',\n  alignments: '250',\n  redirect: 'yes',\n  landingPage: 'no',\n  url2: '',\n};\n\nconst createHiddenField = (key: string, value: string) => {\n  const hiddenField = document.createElement('input');\n  hiddenField.type = 'hidden';\n  hiddenField.name = key;\n  hiddenField.value = value;\n  return hiddenField;\n};\n\nconst submitBlast = (sequence: string) => {\n  const form = document.createElement('form');\n  form.method = 'post';\n  form.action = '//www.uniprot.org/blast/';\n  form.setAttribute('target', '_blank');\n\n  const sequenceField = createHiddenField('blastQuery', sequence);\n  form.appendChild(sequenceField);\n\n  Object.keys(params).forEach((key) => {\n    const hiddenField = createHiddenField(key, params[key]);\n    form.appendChild(hiddenField);\n  });\n\n  document.body.appendChild(form);\n  form.submit();\n};\n\nexport default submitBlast;\n","import React, { useCallback, FC } from 'react';\nimport ProtvistaManager from 'protvista-manager';\nimport ProtvistaDatatable from 'protvista-datatable';\nimport ProtvistaStructure from 'protvista-structure';\nimport { TemplateResult, html } from 'lit-html';\nimport { loadWebComponent } from '../../../shared/utils/utils';\nimport { PDBMirrorsInfo } from '../../config/database';\nimport { processUrlTemplate } from './XRefView';\nimport { Xref } from '../../types/commentTypes';\nimport 'litemol/dist/css/LiteMol-plugin.css';\n\nloadWebComponent('protvista-manager', ProtvistaManager);\nloadWebComponent('protvista-datatable', ProtvistaDatatable);\nloadWebComponent('protvista-structure', ProtvistaStructure);\n\nconst processData = (xrefs: Xref[]) =>\n  xrefs.map(({ id, properties }) => {\n    if (!properties) {\n      return null;\n    }\n    const { Chains, Resolution, Method } = properties;\n    let chain;\n    let positions;\n    if (Chains) {\n      const tokens = Chains.split('=');\n      if (tokens.length === 2) {\n        [chain, positions] = tokens;\n      }\n    }\n    return {\n      id,\n      method: Method,\n      resolution: !Resolution || Resolution === '-' ? null : Resolution,\n      chain,\n      positions,\n      protvistaFeatureId: id,\n    };\n  });\n\nexport type ProtvistaPDB = {\n  id: string;\n  method: string;\n  resolution: string;\n  positions: string;\n  chain: string;\n};\n\nconst getColumnConfig = () => ({\n  type: {\n    label: 'PDB Entry',\n    resolver: ({ id }: ProtvistaPDB): string => id,\n  },\n  method: {\n    label: 'Method',\n    resolver: ({ method }: ProtvistaPDB): string => method,\n  },\n  resolution: {\n    label: 'Resolution',\n    resolver: ({ resolution }: ProtvistaPDB): string =>\n      resolution && resolution.replace('A', 'Å'),\n  },\n  chain: {\n    label: 'Chain',\n    resolver: ({ chain }: ProtvistaPDB): string => chain,\n  },\n  positions: {\n    label: 'Positions',\n    resolver: ({ positions }: ProtvistaPDB): string => positions,\n  },\n  links: {\n    label: 'Links',\n    resolver: ({ id }: ProtvistaPDB): TemplateResult =>\n      html`\n        ${PDBMirrorsInfo.map(\n          ({ displayName, uriLink }) =>\n            html`\n              <a href=\"${processUrlTemplate(uriLink, { id })}\"\n                >${displayName}</a\n              >\n            `\n        ).reduce(\n          (prev, curr) =>\n            html`\n              ${prev} · ${curr}\n            `\n        )}\n      `,\n  },\n});\n\nconst PDBView: FC<{\n  xrefs: Xref[];\n  noStructure?: boolean;\n  primaryAccession?: string;\n}> = ({ xrefs, noStructure = false, primaryAccession }) => {\n  const data = processData(xrefs);\n  const setTableData = useCallback(\n    (node): void => {\n      if (node) {\n        // eslint-disable-next-line no-param-reassign\n        node.data = data;\n        // eslint-disable-next-line no-param-reassign\n        node.columns = getColumnConfig();\n        // eslint-disable-next-line no-param-reassign\n        node.rowClickEvent = ({ id }: { id: string }) => ({ 'pdb-id': id });\n      }\n    },\n    [data]\n  );\n\n  if (noStructure) {\n    return <protvista-datatable ref={setTableData} />;\n  }\n\n  const sortedIds = xrefs.map(({ id }) => id).sort();\n  const firstId = sortedIds && sortedIds.length ? sortedIds[0] : '';\n  return (\n    <protvista-manager attributes=\"pdb-id\">\n      <protvista-structure pdb-id={firstId} accession={primaryAccession} />\n      <protvista-datatable\n        ref={setTableData}\n        selectedId={firstId}\n        noScrollToRow\n        noDeselect\n      />\n    </protvista-manager>\n  );\n};\n\nexport default PDBView;\n","import { FeatureData } from '../components/protein-data-views/FeaturesView';\nimport {\n  getKeywordsForCategories,\n  KeywordUIModel,\n} from '../utils/KeywordsUtil';\nimport KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport {\n  getXrefsForSection,\n  XrefUIModel,\n  getJoinedXrefs,\n} from '../utils/xrefUtils';\nimport EntrySection from '../types/entrySection';\nimport { SequenceData } from '../components/protein-data-views/SequenceView';\nimport {\n  CommentType,\n  AlternativeProductsComment,\n  SequenceCautionComment,\n  MassSpectrometryComment,\n  FreeTextComment,\n  RNAEditingComment,\n} from '../types/commentTypes';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\n\nexport enum Flag {\n  PRECURSOR = 'Precursor',\n  FRAGMENT = 'Fragment',\n  FRAGMENTS = 'Fragments',\n  FRAGMENT_PRECURSOR = 'Fragment,Precursor',\n  FRAGMENTS_PRECURSOR = 'Fragments,Precursor',\n}\n\nexport type EntryAudit = {\n  firstPublicDate: string;\n  lastAnnotationUpdateDate: string;\n  lastSequenceUpdateDate: string;\n  entryVersion: number;\n  sequenceVersion: number;\n};\n\nexport type SequenceUIModel = {\n  sequence: SequenceData;\n  flag?: Flag;\n  status?: string;\n  processing?: string;\n  keywordData: KeywordUIModel[];\n  alternativeProducts?: AlternativeProductsComment;\n  sequenceCaution?: SequenceCautionComment[];\n  massSpectrometry?: MassSpectrometryComment[];\n  polymorphysm?: FreeTextComment[];\n  rnaEditing?: RNAEditingComment[];\n  featuresData: FeatureData;\n  xrefData: XrefUIModel[];\n  lastUpdateDate?: string;\n  entryAudit?: EntryAudit;\n  molWeight?: number;\n};\n\nconst sequenceKeywords = [KeywordCategory.CODING_SEQUENCE_DIVERSITY];\n\nconst sequenceFeatures = [\n  FeatureType.COMPBIAS,\n  FeatureType.NON_STD,\n  FeatureType.UNSURE,\n  FeatureType.CONFLICT,\n  FeatureType.NON_CONS,\n  FeatureType.NON_TER,\n  FeatureType.VAR_SEQ,\n];\n\nexport const convertSequence = (data: UniProtkbAPIModel) => {\n  const sequenceData: SequenceUIModel = {\n    sequence: data.sequence,\n    keywordData: [],\n    featuresData: [],\n    xrefData: [],\n  };\n\n  if (data.sequence) {\n    sequenceData.molWeight = data.sequence.molWeight;\n  }\n\n  // Deal with flags\n  if (data.proteinDescription && data.proteinDescription.flag) {\n    sequenceData.flag = data.proteinDescription.flag;\n\n    sequenceData.status = [\n      Flag.FRAGMENT,\n      Flag.FRAGMENTS,\n      Flag.FRAGMENTS_PRECURSOR,\n      Flag.FRAGMENT_PRECURSOR,\n    ].includes(data.proteinDescription.flag)\n      ? data.proteinDescription.flag\n      : 'Complete';\n\n    sequenceData.processing = [\n      Flag.PRECURSOR,\n      Flag.FRAGMENTS_PRECURSOR,\n      Flag.FRAGMENT_PRECURSOR,\n    ].includes(data.proteinDescription.flag)\n      ? 'The displayed sequence is further processed into a mature form.'\n      : undefined;\n  }\n\n  // Add the last update\n  if (data.entryAudit) {\n    sequenceData.lastUpdateDate = `${data.entryAudit.lastSequenceUpdateDate} v${data.entryAudit.sequenceVersion}`;\n    sequenceData.entryAudit = data.entryAudit;\n  }\n\n  // Trembl entries only have a canonical sequence\n  if (data.comments) {\n    const alternativeProducts = data.comments.find(\n      comment => comment.commentType === CommentType.ALTERNATIVE_PRODUCTS\n    );\n    sequenceData.alternativeProducts = alternativeProducts as AlternativeProductsComment;\n    const sequenceCaution = data.comments.filter(\n      comment => comment.commentType === CommentType.SEQUENCE_CAUTION\n    );\n    sequenceData.sequenceCaution = sequenceCaution as SequenceCautionComment[];\n    const massSpec = data.comments.filter(\n      comment => comment.commentType === CommentType.MASS_SPECTROMETRY\n    );\n    sequenceData.massSpectrometry = massSpec as MassSpectrometryComment[];\n    const polymorphysm = data.comments.filter(\n      comment => comment.commentType === CommentType.POLYMORPHISM\n    );\n    sequenceData.polymorphysm = polymorphysm as FreeTextComment[];\n    const rnaEditing = data.comments.filter(\n      comment => comment.commentType === CommentType.RNA_EDITING\n    );\n    sequenceData.rnaEditing = rnaEditing as RNAEditingComment[];\n  }\n\n  if (data.keywords) {\n    const categoryKeywords = getKeywordsForCategories(\n      data.keywords,\n      sequenceKeywords\n    );\n    if (categoryKeywords && Object.keys(categoryKeywords).length > 0) {\n      sequenceData.keywordData = categoryKeywords;\n    }\n  }\n  if (data.features) {\n    const features = data.features.filter(feature => {\n      return sequenceFeatures.includes(feature.type);\n    });\n    sequenceData.featuresData = features;\n    // Add VAR_SEQ to corresponding isoforms\n    if (features && sequenceData.alternativeProducts) {\n      const varSeqs = features.filter(\n        feature => feature.type === FeatureType.VAR_SEQ\n      );\n      sequenceData.alternativeProducts.isoforms = sequenceData.alternativeProducts.isoforms.map(\n        isoform => {\n          const varSeqsToAdd: FeatureData = [];\n          if (isoform.sequenceIds && varSeqs.length !== 0) {\n            isoform.sequenceIds.forEach(sequenceId => {\n              const varSeqToAdd = varSeqs.find(\n                varSeq => varSeq.featureId === sequenceId\n              );\n              if (varSeqToAdd) {\n                varSeqsToAdd.push(varSeqToAdd);\n              }\n            });\n          }\n          return { ...isoform, varSeqs: varSeqsToAdd };\n        }\n      );\n    }\n  }\n  if (data.uniProtKBCrossReferences) {\n    // Some EMBL xrefs need to be merged\n    const joined = getJoinedXrefs(\n      data.uniProtKBCrossReferences.filter(xref => xref.database === 'EMBL')\n    );\n    const newXrefs = [\n      ...data.uniProtKBCrossReferences.filter(xref => xref.database !== 'EMBL'),\n      ...joined,\n    ];\n    const xrefs = getXrefsForSection(\n      newXrefs,\n      EntrySection.Sequence,\n      data.genes\n    );\n    if (xrefs && typeof xrefs !== 'undefined') {\n      sequenceData.xrefData = xrefs;\n    }\n  }\n  return sequenceData;\n};\n","import { groupBy } from 'lodash-es';\nimport {\n  CommentType,\n  AbsorptionComment,\n  KineticsComment,\n  pHDependenceComment,\n  RedoxPotentialComment,\n  TemperatureDependenceComment,\n  TextWithEvidence,\n  Xref,\n} from '../types/commentTypes';\nimport KeywordCategory from '../types/keywordCategory';\nimport FeatureType from '../types/featureType';\nimport EntrySection from '../types/entrySection';\nimport { convertSection, UIModel } from './sectionConverter';\nimport { UniProtkbAPIModel } from './uniProtkbConverter';\nimport { Evidence } from '../types/modelTypes';\n\nexport type Absorption = {\n  max: number;\n  approximate: boolean;\n  note?: {\n    texts: TextWithEvidence[];\n  };\n  evidences?: Evidence[];\n};\n\nexport type KineticParameters = {\n  michaelisConstants?: {\n    constant: number;\n    unit: string;\n    substrate: string;\n    evidences: Evidence[];\n  }[];\n  note: {\n    texts: TextWithEvidence[];\n  };\n};\n\nexport type CofactorComment = {\n  commentType: CommentType.COFACTOR;\n  cofactors?: {\n    name: string;\n    evidences?: Evidence[];\n    cofactorCrossReference?: Xref;\n  }[];\n  note: {\n    texts: TextWithEvidence[];\n  };\n};\n\nexport type BioPhysicoChemicalProperties = {\n  absorption?: Absorption;\n  kinetics?: KineticParameters;\n  pHDependence?: TextWithEvidence[];\n  redoxPotential?: TextWithEvidence[];\n  temperatureDependence?: TextWithEvidence[];\n};\n\nexport enum GoAspect {\n  P = 'Biological Process',\n  F = 'Molecular Function',\n  C = 'Cellular Component',\n}\n\nexport type GoTerm = {\n  aspect?: GoAspect;\n  termDescription?: string;\n  evidences?: Evidence[];\n} & Xref;\n\nexport type GroupedGoTerms = Map<GoAspect, GoTerm[]>;\n\nexport type FunctionUIModel = {\n  bioPhysicoChemicalProperties: BioPhysicoChemicalProperties;\n  goTerms?: GroupedGoTerms;\n} & UIModel;\n\nconst keywordsCategories = [\n  KeywordCategory.MOLECULAR_FUNCTION,\n  KeywordCategory.BIOLOGICAL_PROCESS,\n  KeywordCategory.LIGAND,\n];\n\nconst featuresCategories = [\n  FeatureType.DOMAIN,\n  FeatureType.REPEAT,\n  FeatureType.CA_BIND,\n  FeatureType.ZN_FING,\n  FeatureType.DNA_BIND,\n  FeatureType.NP_BINDL,\n  FeatureType.REGION,\n  FeatureType.COILED,\n  FeatureType.MOTIF,\n  FeatureType.ACT_SITE,\n  FeatureType.METAL,\n  FeatureType.BINDING,\n  FeatureType.SITE,\n];\n\nconst commentsCategories = [\n  CommentType.FUNCTION,\n  CommentType.CATALYTIC_ACTIVITY,\n  CommentType.COFACTOR,\n  CommentType.ACTIVITY_REGULATION,\n  CommentType.BIOPHYSICOCHEMICAL_PROPERTIES,\n  CommentType.PATHWAY,\n  CommentType.MISCELLANEOUS,\n];\n\nconst convertFunction = (data: UniProtkbAPIModel) => {\n  const convertedSection = convertSection(\n    data,\n    commentsCategories,\n    keywordsCategories,\n    featuresCategories,\n    EntrySection.Function\n  ) as FunctionUIModel;\n  const bpcProperties = convertedSection.commentsData.get(\n    CommentType.BIOPHYSICOCHEMICAL_PROPERTIES\n  );\n  convertedSection.bioPhysicoChemicalProperties = {};\n  if (bpcProperties) {\n    bpcProperties.forEach((bpcProperty) => {\n      if ((bpcProperty as AbsorptionComment).absorption) {\n        convertedSection.bioPhysicoChemicalProperties.absorption = (bpcProperty as AbsorptionComment).absorption;\n      }\n      if ((bpcProperty as KineticsComment).kineticParameters) {\n        convertedSection.bioPhysicoChemicalProperties.kinetics = (bpcProperty as KineticsComment).kineticParameters;\n      }\n      if ((bpcProperty as pHDependenceComment).phDependence) {\n        convertedSection.bioPhysicoChemicalProperties.pHDependence = (bpcProperty as pHDependenceComment).phDependence.texts;\n      }\n      if ((bpcProperty as RedoxPotentialComment).redoxPotential) {\n        convertedSection.bioPhysicoChemicalProperties.redoxPotential = (bpcProperty as RedoxPotentialComment).redoxPotential.texts;\n      }\n      if ((bpcProperty as TemperatureDependenceComment).temperatureDependence) {\n        convertedSection.bioPhysicoChemicalProperties.temperatureDependence = (bpcProperty as TemperatureDependenceComment).temperatureDependence.texts;\n      }\n    });\n  }\n  convertedSection.commentsData.delete(\n    CommentType.BIOPHYSICOCHEMICAL_PROPERTIES\n  );\n\n  if (data.uniProtKBCrossReferences) {\n    const goTerms = (data.uniProtKBCrossReferences.filter(\n      (xref) => xref.database === 'GO' && xref.properties\n    ) as GoTerm[]).map((term) => {\n      const goTermProperty = term.properties && term.properties.GoTerm;\n      const aspect = goTermProperty && goTermProperty.substring(0, 1);\n      const termDescription = goTermProperty && goTermProperty.substring(2);\n      return {\n        ...term,\n        aspect: GoAspect[aspect as keyof typeof GoAspect],\n        termDescription,\n      };\n    });\n    convertedSection.goTerms = new Map(\n      Object.entries(groupBy(goTerms, (term: GoTerm) => term.aspect))\n    ) as GroupedGoTerms;\n  }\n  return convertedSection;\n};\n\nexport default convertFunction;\n","const getNextUrlFromResponse = (\n  link: string | null | undefined\n): string | undefined => {\n  if (!link) {\n    return;\n  }\n  const re = /<([0-9a-zA-Z$\\-_.+!*'(),?/:=&%]+)>; rel=\"next\"/;\n  const match = re.exec(link);\n  if (match && match[1]) {\n    // eslint-disable-next-line consistent-return\n    return match[1];\n  }\n};\n\nexport default getNextUrlFromResponse;\n","import { scaleLinear } from 'd3-scale';\nimport { TransformedProtvistaVariant } from '../components/protein-data-views/VariationView';\n\ntype VariationVariants = { variants: TransformedProtvistaVariant[] }[];\n\nconst scaleColors = {\n  UPDiseaseColor: '#990000',\n  UPNonDiseaseColor: '#99cc00',\n  deleteriousColor: '#002594',\n  benignColor: '#8FE3FF',\n  othersColor: '#009e73',\n  defaultColour: '#9f9f9f',\n};\n\nconst consequences = {\n  likelyDisease: /disease|pathogenic\\b|risk factor/i,\n  likelyBenign: /benign/i,\n  uncertain: /uncertain|conflicting|unclassified/i,\n};\n\nexport const getFilteredVariants = (\n  variants: VariationVariants,\n  callbackFilter: (variant: TransformedProtvistaVariant) => void\n) =>\n  variants.map(variant => {\n    const matchingVariants = variant.variants.filter(variantPos =>\n      callbackFilter(variantPos)\n    );\n    return {\n      variants: matchingVariants,\n    };\n  });\n\nconst filterConfig = {\n  disease: {\n    name: 'disease',\n    type: {\n      name: 'consequence',\n      text: 'Filter Consequence',\n    },\n    options: {\n      labels: ['Likely disease'],\n      colors: [scaleColors.UPDiseaseColor],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          variantPos.clinicalSignificances &&\n          consequences.likelyDisease.test(variantPos.clinicalSignificances)\n      ),\n  },\n  predicted: {\n    name: 'predicted',\n    type: {\n      name: 'consequence',\n      text: 'Filter Consequence',\n    },\n    options: {\n      labels: ['Predicted deleterious', 'Predicted benign'],\n      colors: [scaleColors.deleteriousColor, scaleColors.benignColor],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          typeof variantPos.polyphenScore !== 'undefined' ||\n          typeof variantPos.siftScore !== 'undefined'\n      ),\n  },\n  nonDisease: {\n    name: 'nonDisease',\n    type: {\n      name: 'consequence',\n      text: 'Filter Consequence',\n    },\n    options: {\n      labels: ['Likely benign'],\n      colors: [scaleColors.UPNonDiseaseColor],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          variantPos.clinicalSignificances &&\n          consequences.likelyBenign.test(variantPos.clinicalSignificances)\n      ),\n  },\n  uncertain: {\n    name: 'uncertain',\n    type: {\n      name: 'consequence',\n      text: 'Filter Consequence',\n    },\n    options: {\n      labels: ['Uncertain'],\n      colors: [scaleColors.othersColor],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          (typeof variantPos.clinicalSignificances === 'undefined' &&\n            typeof variantPos.polyphenScore === 'undefined' &&\n            typeof variantPos.siftScore === 'undefined') ||\n          (variantPos.clinicalSignificances &&\n            consequences.uncertain.test(variantPos.clinicalSignificances))\n      ),\n  },\n  UniProt: {\n    name: 'UniProt',\n    type: {\n      name: 'provenance',\n      text: 'Filter Provenance',\n    },\n    options: {\n      labels: ['UniProt reviewed'],\n      colors: [scaleColors.defaultColour],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          variantPos.xrefNames &&\n          (variantPos.xrefNames.includes('uniprot') ||\n            variantPos.xrefNames.includes('UniProt'))\n      ),\n  },\n  ClinVar: {\n    name: 'ClinVar',\n    type: {\n      name: 'provenance',\n      text: 'Filter Provenance',\n    },\n    options: {\n      labels: ['ClinVar reviewed'],\n      colors: [scaleColors.defaultColour],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          variantPos.xrefNames &&\n          (variantPos.xrefNames.includes('ClinVar') ||\n            variantPos.xrefNames.includes('clinvar'))\n      ),\n  },\n  LSS: {\n    name: 'LSS',\n    type: {\n      name: 'provenance',\n      text: 'Filter Provenance',\n    },\n    options: {\n      labels: ['Large scale studies'],\n      colors: [scaleColors.defaultColour],\n    },\n    filterData: (variants: VariationVariants) =>\n      getFilteredVariants(\n        variants,\n        (variantPos: TransformedProtvistaVariant) =>\n          variantPos.sourceType === 'large_scale_study' ||\n          variantPos.sourceType === 'mixed'\n      ),\n  },\n};\n\nconst predictionScale = scaleLinear<string>()\n  .domain([0, 1])\n  .range([scaleColors.deleteriousColor, scaleColors.benignColor]);\n\nexport const calculatePredictionScoreAvg = (\n  siftScore?: number,\n  polyphenScore?: number\n) =>\n  ((siftScore || 0) + (1 - (polyphenScore || 1))) /\n  (polyphenScore && siftScore ? 2 : 1);\n\nexport const colorConfig = (variant: TransformedProtvistaVariant) => {\n  const variantWrapper = [{ variants: [variant] }];\n  if (filterConfig.disease.filterData(variantWrapper)[0].variants.length > 0) {\n    return scaleColors.UPDiseaseColor;\n  }\n  if (\n    filterConfig.nonDisease.filterData(variantWrapper)[0].variants.length > 0\n  ) {\n    return scaleColors.UPNonDiseaseColor;\n  }\n  if (\n    filterConfig.uncertain.filterData(variantWrapper)[0].variants.length > 0\n  ) {\n    return scaleColors.othersColor;\n  }\n  if (\n    filterConfig.predicted.filterData(variantWrapper)[0].variants.length > 0\n  ) {\n    return predictionScale(\n      calculatePredictionScoreAvg(variant.siftScore, variant.polyphenScore)\n    );\n  }\n  return scaleColors.othersColor;\n};\n\n// export the filterConfig as an array (keys are used for lookup in colorConfig)\nexport default Object.values(filterConfig);\n","import React, { useCallback, FC } from 'react';\nimport ProtvistaManager from 'protvista-manager';\nimport ProtvistaSequence from 'protvista-sequence';\nimport ProtvistaNavigation from 'protvista-navigation';\nimport ProtvistaVariation from 'protvista-variation';\nimport { transformData } from 'protvista-variation-adapter';\nimport ProtvistaFilter from 'protvista-filter';\nimport { Loader } from 'franklin-sites';\nimport { html } from 'lit-html';\nimport joinUrl from 'url-join';\nimport { loadWebComponent } from '../../../shared/utils/utils';\nimport useDataApi from '../../../shared/hooks/useDataApi';\nimport apiUrls from '../../config/apiUrls';\nimport FeatureType from '../../types/featureType';\nimport { UniProtProtvistaEvidenceTag } from './UniProtKBEvidenceTag';\nimport { Evidence } from '../../types/modelTypes';\nimport FeaturesTableView, { FeaturesTableCallback } from './FeaturesTableView';\nimport filterConfig, { colorConfig } from '../../config/variationFiltersConfig';\nimport './styles/variation-view.scss';\n\nexport type ProtvistaVariant = {\n  begin: number;\n  end: number;\n  type: FeatureType.VARIANT;\n  wildType: string;\n  alternativeSequence: string;\n  polyphenPrediction?: string;\n  polyphenScore?: number;\n  siftPrediction?: string;\n  siftScore?: number;\n  description?: string;\n  consequenceType: string;\n  cytogeneticBand?: string;\n  genomicLocation?: string;\n  somaticStatus?: number;\n  sourceType: string;\n  clinicalSignificances?: string;\n  association?: {\n    description: string;\n    disease: boolean;\n    name: string;\n    evidences: { code: string; source: { name: string; id: string } }[];\n  }[];\n  xrefs: {\n    alternativeUrl?: string;\n    id: string;\n    name: string;\n    url: string;\n  }[];\n};\n\nexport type TransformedProtvistaVariant = ProtvistaVariant & {\n  accession: string;\n  start: string;\n  tooltipContent: string;\n  sourceType: string;\n  variant: string;\n  protvistaFeatureId: string;\n  xrefNames: string[];\n};\n\nexport type TransformedVariantsResponse = {\n  sequence: string;\n  variants: TransformedProtvistaVariant[];\n};\n\ninterface ChangeEvent extends Event {\n  detail?: { type: string; value: string[] };\n}\n\nloadWebComponent('protvista-variation', ProtvistaVariation);\nloadWebComponent('protvista-navigation', ProtvistaNavigation);\nloadWebComponent('protvista-sequence', ProtvistaSequence);\nloadWebComponent('protvista-manager', ProtvistaManager);\nloadWebComponent('protvista-filter', ProtvistaFilter);\n\nconst formatVariantDescription = (description: string) => {\n  /* eslint-disable no-useless-escape */\n  const pattern = /\\[(\\w+)\\]: ([^\\[]+)/g;\n  const match = description.match(pattern);\n  return match;\n};\n\nconst getColumnConfig = (evidenceTagCallback: FeaturesTableCallback) => {\n  return {\n    positions: {\n      label: 'Position(s)',\n      resolver: (d: ProtvistaVariant) =>\n        d.begin === d.end ? d.begin : `${d.begin}-${d.end}`,\n    },\n    change: {\n      label: 'Change',\n      resolver: (d: ProtvistaVariant) =>\n        `${d.wildType}>${d.alternativeSequence}`,\n    },\n    consequence: {\n      label: 'Consequence',\n      child: true,\n      resolver: (d: ProtvistaVariant) => d.consequenceType,\n    },\n    sift: {\n      label: 'SIFT prediction',\n      child: true,\n      resolver: (d: ProtvistaVariant) =>\n        d.siftPrediction ? `${d.siftPrediction} (${d.siftScore})` : '',\n    },\n    polyphen: {\n      label: 'Polyphen prediction',\n      child: true,\n      resolver: (d: ProtvistaVariant) =>\n        d.polyphenPrediction\n          ? `${d.polyphenPrediction} (${d.polyphenScore})`\n          : '',\n    },\n    description: {\n      label: 'Description',\n      resolver: (d: ProtvistaVariant) => {\n        if (!d.description) {\n          return '';\n        }\n        const formatedDescription = formatVariantDescription(d.description);\n        return formatedDescription\n          ? formatedDescription.map(\n              (descriptionLine) => html` <p>${descriptionLine}</p> `\n            )\n          : '';\n      },\n    },\n    somaticStatus: {\n      label: 'Somatic',\n      child: true,\n      resolver: (d: ProtvistaVariant) => (d.somaticStatus === 1 ? 'Y' : 'N'),\n    },\n    hasDisease: {\n      label: 'Disease association',\n      resolver: (d: ProtvistaVariant) =>\n        d.association && d.association.length > 0 ? 'Y' : 'N',\n    },\n    association: {\n      label: 'Disease association',\n      child: true,\n      resolver: (d: ProtvistaVariant) => {\n        if (!d.association) {\n          return '';\n        }\n        return d.association.map((association) => {\n          return html`\n            <p>\n              ${association.name}\n              ${association.evidences &&\n              UniProtProtvistaEvidenceTag(\n                association.evidences.map((evidence) => {\n                  return ({\n                    evidenceCode: evidence.code,\n                    source: evidence.source.name,\n                    id: evidence.source.id,\n                  } as unknown) as Evidence;\n                }),\n                evidenceTagCallback\n              )}\n            </p>\n          `;\n        });\n      },\n    },\n  };\n};\n\nconst VariationView: FC<{\n  primaryAccession: string;\n  title?: string;\n  hasTable?: boolean;\n}> = ({ primaryAccession, title, hasTable = true }) => {\n  const { loading, data, error, status } = useDataApi(\n    joinUrl(apiUrls.variation, primaryAccession)\n  );\n\n  const protvistaFilterRef = useCallback((node) => {\n    if (node !== null) {\n      // eslint-disable-next-line no-param-reassign\n      node.filters = filterConfig;\n    }\n  }, []);\n\n  const protvistaVariationRef = useCallback(\n    (node) => {\n      if (node !== null && data.features) {\n        const transformedData: TransformedVariantsResponse = transformData(\n          data\n        );\n        // eslint-disable-next-line no-param-reassign\n        node.colorConfig = colorConfig;\n        // eslint-disable-next-line no-param-reassign\n        node.data = transformedData;\n        // eslint-disable-next-line no-param-reassign\n        node.length = transformedData.sequence.length;\n      }\n    },\n    [data]\n  );\n\n  if (loading) return <Loader />;\n\n  if (error && status !== 404) {\n    // TODO: use in-page error message\n    return <div>An error happened</div>;\n  }\n\n  if (status === 404 || !data.sequence || data.features.length <= 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {title && <h3>{title}</h3>}\n      <protvista-manager attributes=\"highlight displaystart displayend activefilters filters\">\n        {hasTable && (\n          <div className=\"variation-view\">\n            <protvista-navigation length={data.sequence.length} />\n            <protvista-sequence\n              length={data.sequence.length}\n              sequence={data.sequence}\n              height=\"20\"\n            />\n            <protvista-filter\n              for=\"variation-component\"\n              ref={protvistaFilterRef}\n            />\n            <protvista-variation\n              id=\"variation-component\"\n              length={data.sequence.length}\n              ref={protvistaVariationRef}\n            />\n          </div>\n        )}\n        <FeaturesTableView\n          data={data.features}\n          getColumnConfig={getColumnConfig}\n        />\n      </protvista-manager>\n    </div>\n  );\n};\n\nexport default VariationView;\n"],"sourceRoot":""}